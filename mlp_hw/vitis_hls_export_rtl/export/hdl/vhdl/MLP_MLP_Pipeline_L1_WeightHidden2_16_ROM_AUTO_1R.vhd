-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_16_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_16_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111011110001010001100000100011", 1 => "10111110101000111001100111110111", 2 => "10111110100111111111101111000101", 3 => "10111110100011110101111101110001", 
    4 => "10111101001011111011111100110101", 5 => "10111101000010001101111011000001", 6 => "10111110000101101101111110011111", 7 => "00111101100000000111000000101101", 
    8 => "10111110100111000101101001101000", 9 => "00111110000001100101000110000011", 10 => "10111110101110001110000000110110", 11 => "00111101101100111001100000010100", 
    12 => "10111101000011001111111010100110", 13 => "00111110000100111111111100010110", 14 => "10111110011011001001001100011111", 15 => "10111110111100010111100101100000", 
    16 => "10111101101111010101000010110011", 17 => "10111110010000011110000010101001", 18 => "00111110100111111101111011110001", 19 => "00111110001101100101101110010101", 
    20 => "00111101110000100111101111001100", 21 => "00111101011011000100010000111100", 22 => "00111101110010110010100110011000", 23 => "00111101100111111110011100010011", 
    24 => "10111110001001000000000010000000", 25 => "00111110111000010011001101111100", 26 => "10111110001110001101110110101010", 27 => "10111101011100000001000010111010", 
    28 => "00111101001010100001010110101000", 29 => "00111110001100111001000010101110", 30 => "00111110100110000111001001100101", 31 => "10111011111001110010100000011000", 
    32 => "00111110011010001100000110001010", 33 => "10111110011111111111111001010000", 34 => "00111110000110011000010111111101", 35 => "00111101111000011000000001110011", 
    36 => "10111110110011111111100101000000", 37 => "00111110110000000011101011110001", 38 => "00111110010011010101011101011011", 39 => "00111110100001100111011100011101", 
    40 => "00111110011110001111010100111011", 41 => "00111100001011000100110011110000", 42 => "00111100110001100010000011111100", 43 => "10111110011011001101011010100101", 
    44 => "10111101111000000100010110011001", 45 => "10111101101001101110111110011111", 46 => "00111101000101011100100111101100", 47 => "10111101111000000000010111101011", 
    48 => "10111110000100011000100101101000", 49 => "00111101100010111001001111011100", 50 => "10111110100100111001111100111110", 51 => "10111101110011001101011001101001", 
    52 => "00111110100001101010001000011101", 53 => "00111101111111111001010001011001", 54 => "00111101000101010111100110001100", 55 => "10111100101011011110101000111001", 
    56 => "00111110001111001011011101001101", 57 => "00111110100000000011010101001101", 58 => "00111110010111010010000001011000", 59 => "10111101101000110100001100001110", 
    60 => "10111110110111011111110100100101", 61 => "00111110101010001000101010100000", 62 => "00111110000111100110000010001101", 63 => "10111110000011000111101100000100", 
    64 => "00111110100000001101101001001010", 65 => "00111100111110010100110001110010", 66 => "10111110001010111011101001101100", 67 => "00111110101010110000011101010101", 
    68 => "10111101111100111111101010011010", 69 => "00111110000111000101101011011010", 70 => "10111110001100001100101100100011", 71 => "00111110000001001111111110110100", 
    72 => "00111101100010101010101110001100", 73 => "10111110000111100100111000010111", 74 => "10111110000010001001100111100110", 75 => "00111110100011100100000000010101", 
    76 => "00111101100000100110100000110010", 77 => "10111110011111110010011000111101", 78 => "10111110010110110110111111111110", 79 => "10111110010111001010001010001010", 
    80 => "00111110101110010101001011000101", 81 => "00111110001100110000010001000001", 82 => "10111110100111010011111001001001", 83 => "00111101110011010000000010101000", 
    84 => "10111110001110001110001111111110", 85 => "10111110001011111000011011101001", 86 => "00111101100011100110000000101000", 87 => "10111110001000000111101110101101", 
    88 => "00111110010101100001111110001110", 89 => "10111101111010011110111010100110", 90 => "00111100111100100011100100001000", 91 => "00111110010010101111010110001010", 
    92 => "00111101110001000011001110101111", 93 => "00111101010110101001111100010010", 94 => "10111110100011100110111010100011", 95 => "10111110011001111000110111111000", 
    96 => "10111110000010001010011010001011", 97 => "00111101100111011110010001100010", 98 => "00111100010010111001000011101101", 99 => "10111101111010101000010101110011", 
    100 => "10111101111010111010110111111101", 101 => "10111101010011101000000001010001", 102 => "00111110111010101000000011110111", 103 => "10111110100001001110010111010011", 
    104 => "10111110111010110011000110100001", 105 => "10111101101111011000100110101111", 106 => "00111110101110010110111101110110", 107 => "00111101111100000001001101101110", 
    108 => "10111110000011001111011010100111", 109 => "10111101101001101110001110100110", 110 => "00111100100001111110001000000111", 111 => "00111101110011001010101100100000", 
    112 => "10111110000000101100101001110011", 113 => "10111101111111100001100011111000", 114 => "00111110010100110001010110011101", 115 => "00111110011001000101011110011110", 
    116 => "00111101011010010101011000000001", 117 => "00111101100000011000010100100010", 118 => "00111101101000011101110111100010", 119 => "00111110100110110001010011110111", 
    120 => "10111101101101100010001100100101", 121 => "10111101001111101011011100110000", 122 => "00111110000110010101001010000010", 123 => "00111101001001000111011101000110", 
    124 => "10111101101110000011011111101001", 125 => "00111101000101100100101011001000", 126 => "10111110110001000010010010111100", 127 => "10111110111110000011111010010011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

