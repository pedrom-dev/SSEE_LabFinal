-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_57_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_57_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110001000101111100111111100", 1 => "00111101001101011000110111111100", 2 => "00111101100111010001110010101100", 3 => "10111110000001010011111011001010", 
    4 => "00111110001101011000100010100000", 5 => "00111110011110101110101100101100", 6 => "00111011001111110000111011001001", 7 => "10111101110010100101110111111110", 
    8 => "00111100111010011111000011001111", 9 => "00111101011001011000101001100110", 10 => "00111110010110100001110000000011", 11 => "00111110001111111101111010001011", 
    12 => "00111110011000111110011111101101", 13 => "10111110111000101001011100010010", 14 => "00111100110011100110010110011110", 15 => "10111101100001010010110111111111", 
    16 => "10111110011101010111000010101000", 17 => "10111011010000011010100011100101", 18 => "10111101110011111010110111110011", 19 => "10111111001100111100010000101100", 
    20 => "10111100011010100101101111001001", 21 => "00111110100110101111111000111001", 22 => "00111110011110001001111000000100", 23 => "10111110101000001010111010011001", 
    24 => "10111110100000100010001101010100", 25 => "10111101100101000110000100010011", 26 => "00111101011100110110011111110100", 27 => "00111101110100010110001010100101", 
    28 => "00111110100010100010100000110100", 29 => "10111101010000001110001100110111", 30 => "10111011110001011100111000101011", 31 => "10111101011101101011111001100011", 
    32 => "00111101011101000111100111001101", 33 => "00111101010001001001010100111011", 34 => "00111101101100101101110101101010", 35 => "00111110100010101100001001010011", 
    36 => "10111011010100111100110001000001", 37 => "10111110111001010000010100010001", 38 => "00111110100100000101100011110000", 39 => "00111101100111100000111101001110", 
    40 => "10111011111010111010010001010011", 41 => "00111101100011011111111101001100", 42 => "10111100100111001001001111111010", 43 => "10111011011001000000110110110001", 
    44 => "00111110001011100011000010000100", 45 => "10111010101111111001101110001100", 46 => "10111110101101101101001101100111", 47 => "00111110000101010110110000011001", 
    48 => "00111101101110111000101000001011", 49 => "10111110001110011011111111001000", 50 => "10111101110010011100101001100111", 51 => "00111110101001011100110010111010", 
    52 => "10111110000000000000001011000000", 53 => "10111110001001110100011111111000", 54 => "00111110101111100010001011101100", 55 => "00111101101001100000001010010110", 
    56 => "00111100111110000000100001111010", 57 => "00111101111001010001000110011100", 58 => "00111101011000101101110011110010", 59 => "00111101100110100101111001010101", 
    60 => "10111101011111100111000111010011", 61 => "10111100010001010100110100110001", 62 => "10111110000101101011011101111111", 63 => "00111110010110011001010111010001", 
    64 => "10111110001110110011000111000111", 65 => "00111101011011111111000010101110", 66 => "10111110011010011110010111001011", 67 => "10111110111111100001010011010111", 
    68 => "00111101010101011010110000011001", 69 => "10111110100001011010010100010011", 70 => "00111111000100001100010001100000", 71 => "10111110010111100000001110010110", 
    72 => "00111100011001000001101001010001", 73 => "10111100111111001011110000111110", 74 => "10111101101011111110111110110011", 75 => "00111110001101101000011101101101", 
    76 => "10111110000101111100010001101100", 77 => "00111101000011001001010001110000", 78 => "00111101100101100011000111110111", 79 => "00111101111100001111100100101011", 
    80 => "10111110100011000010011011000100", 81 => "00111110110001110110011000010001", 82 => "00111001010000100010111000111111", 83 => "00111100000111011000101111101101", 
    84 => "00111110011011010100000000010001", 85 => "00111101100111011101111000111111", 86 => "10111110011111001100110010101011", 87 => "00111110110100111001011010101011", 
    88 => "10111110111001110110110011011101", 89 => "10111101111111010111001001110100", 90 => "10111101010000011000000001011000", 91 => "10111110011011000011100101100010", 
    92 => "00111110100101011010001101001100", 93 => "10111110010101100101010010000110", 94 => "00111110010100011100000101011101", 95 => "00111110001111011101110000011101", 
    96 => "00111100001111101111000000000000", 97 => "10111110111110000001011011111000", 98 => "10111101100010011010001101111100", 99 => "00111110101011101111010001011001", 
    100 => "00111111000000101100000011101110", 101 => "10111101110111100010000111001011", 102 => "10111110001101000011010111110101", 103 => "00111101101001100010000010111110", 
    104 => "10111110001111111111100111010100", 105 => "10111110111111110000111000101011", 106 => "10111110101011010100011111001000", 107 => "00111110000000100111011110000111", 
    108 => "00111110010110101111010001111011", 109 => "00111101000101011100110001011101", 110 => "00111110011010111100100111101101", 111 => "00111110011110101010100011111001", 
    112 => "00111110001111001101101111101100", 113 => "10111101010010000001100001011010", 114 => "10111100001100010101000111010010", 115 => "00111101010011111010101011110110", 
    116 => "00111110000100101010011111111101", 117 => "00111110100011001001110101001111", 118 => "10111110110101010001100001000101", 119 => "10111110110000000010011010001010", 
    120 => "10111110100101101101110001011111", 121 => "00111101000011101111011110111000", 122 => "00111101000010000001111010111000", 123 => "10111100100110001010010101010011", 
    124 => "00111101100010010110001001110011", 125 => "00111110011000110100111101011101", 126 => "00111110101001001001110001100010", 127 => "00111101101000001110111100101010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

