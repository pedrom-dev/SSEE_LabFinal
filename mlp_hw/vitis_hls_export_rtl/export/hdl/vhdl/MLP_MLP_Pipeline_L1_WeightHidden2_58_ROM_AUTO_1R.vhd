-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_58_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_58_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101111011110001010101011011", 1 => "10111110111010110110101101101101", 2 => "10111110011000100001101010010101", 3 => "00111101101001110000010000001100", 
    4 => "10111101100000101000011000111010", 5 => "10111101101101010010011001111100", 6 => "10111101111101110100111011000010", 7 => "10111101101111110011000010011110", 
    8 => "10111110111100100100011000110101", 9 => "10111101111010001101101011111111", 10 => "00111110111111010111000001100001", 11 => "10111101111111000011110000011111", 
    12 => "10111110001011000011010111111000", 13 => "00111101110100111001110111011000", 14 => "00111100110110111001011001000100", 15 => "10111110111011110110011100110011", 
    16 => "10111101001010001001101000101000", 17 => "10111101110001101001010011000000", 18 => "10111110000101100011010001111100", 19 => "10111101010010011000000101111110", 
    20 => "10111110100110101001100001010001", 21 => "10111110100100111010011111110101", 22 => "00111110000000110001111011001001", 23 => "10111011000000010101100110000111", 
    24 => "10111101000011110110110111111010", 25 => "10111110011111101011101111111101", 26 => "00111110000010010000011010011111", 27 => "10111110100001001001000000110111", 
    28 => "10111101010001110100111000011000", 29 => "10111110011101011011110011111110", 30 => "10111110001110010111011100011001", 31 => "00111101000111111001010000011111", 
    32 => "10111100101001111100010101100001", 33 => "00111101101101001000011000100100", 34 => "10111101101011110001111010111000", 35 => "10111101100001110011011010011011", 
    36 => "00111101000011100011100000010001", 37 => "00111110011110100110111101000011", 38 => "10111101101010101101101001000111", 39 => "10111110101101111100010111011110", 
    40 => "10111110110100111111001100110110", 41 => "00111110000000101000101011001100", 42 => "00111111000011001110001110010011", 43 => "10111100110001000111100100101100", 
    44 => "10111101101000100011110110010000", 45 => "10111101110011000100101001110000", 46 => "00111110101000011111000110101111", 47 => "10111110010000001000011110100011", 
    48 => "10111110100001100111000100100101", 49 => "00111110110000001111111010011111", 50 => "10111111000010010110100000111100", 51 => "00111110000110010011000111011000", 
    52 => "00111110100111000011101100011111", 53 => "00111110100000011110110111010011", 54 => "10111101100001101101111100001011", 55 => "10111101111000011111111110100010", 
    56 => "10111110001000110110100000110111", 57 => "10111110000010100100000100110000", 58 => "00111110101101100110001000011111", 59 => "00111110100111100110001100001110", 
    60 => "10111111000010001110010000001111", 61 => "10111110100011010001110010000011", 62 => "10111110110000110101110110010000", 63 => "10111101101010100001010110011111", 
    64 => "10111110100100000101100100110100", 65 => "00111110010110111011100000111110", 66 => "10111110100010110111011111100100", 67 => "10111110101011101000101101110001", 
    68 => "00111101010000110110011011100000", 69 => "10111100100100001110111000110100", 70 => "00111101100100010011110001100010", 71 => "00111110010100101111100110011010", 
    72 => "00111101111111010100010111100110", 73 => "10111101111110001011011100000010", 74 => "10111011110101001001111100101001", 75 => "00111111000001000110011000001000", 
    76 => "00111101101101111010010100100000", 77 => "00111110111100100111110011000101", 78 => "10111100000110000010100001000000", 79 => "10111101011001110111010100000010", 
    80 => "00111101010010010011111001100000", 81 => "10111110101111000010001010111110", 82 => "00111101101010011011011110100010", 83 => "00111110010110110011001001101111", 
    84 => "10111101101111000010100010001100", 85 => "10111101110111010000110101001111", 86 => "00111110000011111101011000110001", 87 => "00111101001110010101001111000001", 
    88 => "10111110000100110001101000000111", 89 => "10111101100000111111000001101010", 90 => "00111110111101010001101100110101", 91 => "00111110100010110111000001111000", 
    92 => "00111110000010111100101010101001", 93 => "10111101111010001010111111100101", 94 => "00111110110010011000111011010000", 95 => "10111011100011111000011010110001", 
    96 => "00111101100100010001110000110110", 97 => "00111110001010100000010110110111", 98 => "10111110011001011110011011011011", 99 => "10111101101110011111110101001110", 
    100 => "10111110001101011001111110110011", 101 => "00111110000100100101011001010111", 102 => "00111110010101100000100001011100", 103 => "00111101011110010101100110111011", 
    104 => "10111101110111011110101000001111", 105 => "10111110101100110111001011011001", 106 => "10111110100011001111101100011010", 107 => "00111110110100101011101010000010", 
    108 => "10111110111110111110101000000100", 109 => "00111101100100110001111100111010", 110 => "00111101101100110111101011000011", 111 => "10111110110000010011011001100000", 
    112 => "00111101110100000011111011000110", 113 => "00111110000101100000100011101001", 114 => "10111110101110000101001110000100", 115 => "00111101000101010110011001000110", 
    116 => "00111101000011110110100111000001", 117 => "10111110011111000001000111001011", 118 => "00111101000011011011010111100001", 119 => "10111100011001000110110111110011", 
    120 => "00111110001011000101110100011011", 121 => "00111110000101000001010101000101", 122 => "10111100110001101110011101111011", 123 => "00111110101001011111011001011011", 
    124 => "10111110000011101010000011001010", 125 => "10111110101111111001011100011010", 126 => "10111101010001100111011011101101", 127 => "00111110011010011010000101001001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

