-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_45_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_45_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110101000100110100011110000", 1 => "10111110100000101111110100011100", 2 => "10111110101011110011000011000010", 3 => "00111100110001001110110100101111", 
    4 => "10111101000001111000100011001011", 5 => "00111101111001110010000100111100", 6 => "10111101101000100101111110100101", 7 => "10111110010000010000101011000101", 
    8 => "10111110000110100001000010101010", 9 => "10111101100010110100101110000000", 10 => "10111110011111010101110011010100", 11 => "00111101111100001110001101011010", 
    12 => "10111101010000011000111001010011", 13 => "00111101100110010111110110010110", 14 => "10111110010010001001111010011111", 15 => "10111110011111011101010000010110", 
    16 => "10111100110110011110001111001100", 17 => "00111101111111110010110010100110", 18 => "00111110100010011111100101100110", 19 => "00111101000011100111001011010111", 
    20 => "00111100110110010011111111101000", 21 => "00111100101010000000111111001111", 22 => "10111110001101001011100001010010", 23 => "00111110010110010101010001001001", 
    24 => "10111110101111101001000110100111", 25 => "00111110101111011010011011000011", 26 => "10111101111011111001100011101001", 27 => "00111101000101010100010011110011", 
    28 => "10111101100110111011100001011101", 29 => "10111011110001100111101010001001", 30 => "00111101100101100111000110010000", 31 => "10111101111101101110011100100110", 
    32 => "10111110100011110011110001011011", 33 => "10111101100001010111001000011110", 34 => "10111101111100011011010101011000", 35 => "00111101110000111001011000011000", 
    36 => "10111110110100011010000100100110", 37 => "00111110110110010100001000101011", 38 => "10111100010010110100001010001001", 39 => "00111101010111010010101010100110", 
    40 => "00111110010111000110110101110011", 41 => "00111110011011100010111110000011", 42 => "00111101100111100110000011101101", 43 => "10111101110000011101111110010000", 
    44 => "00111110010011010000111101001010", 45 => "10111110001100110000111111100110", 46 => "10111110001001011101001101010010", 47 => "10111110010000000111110111101110", 
    48 => "10111010100100111101110010011101", 49 => "10111100100001000000111110011010", 50 => "10111110011111101001111111010110", 51 => "00111101010101110111111010010010", 
    52 => "00111101001110000001011001101100", 53 => "00111110100011100001000010001100", 54 => "00111101101011111110011110111000", 55 => "10111110000111110001011101111011", 
    56 => "00111110001011010011111110010110", 57 => "00111110100101001001101100100011", 58 => "00111101111111110001011111010100", 59 => "00111110100010110111110101110101", 
    60 => "10111110101001110011010101111101", 61 => "10111110000100010010000111010011", 62 => "10111010111110110110110100011110", 63 => "00111110100000101001011111000110", 
    64 => "00111110011100011001001110100110", 65 => "00111110101011110011111011100110", 66 => "00111110000010100110101000101100", 67 => "10111101101111001100000011010010", 
    68 => "10111110110100100111110111000100", 69 => "10111101000011001101111110101010", 70 => "00111101011010001010100111000101", 71 => "00111110100010101001010001110100", 
    72 => "00111110100010101010101100010101", 73 => "10111110010000001000101011110111", 74 => "00111101100111000000001110011111", 75 => "00111110110000011011100000101100", 
    76 => "00111101011111011010010011101001", 77 => "10111101100110101011100011101100", 78 => "00111110011010000100010101101111", 79 => "10111110111010001101000001000001", 
    80 => "10111100100101001011101110100000", 81 => "10111110001101101100110011011110", 82 => "10111100111011011100101011001000", 83 => "00111011100110110111000011011111", 
    84 => "10111100110111010011010110000101", 85 => "00111101001110111100101010111100", 86 => "00111110000110011100100110011111", 87 => "00111100110100011010101100101001", 
    88 => "10111101111110011111100001010100", 89 => "10111101001110000101011101110101", 90 => "00111110000010010100011010001100", 91 => "00111110010001100110100100101111", 
    92 => "00111101101110000110001100111110", 93 => "00111110010100111001010000101010", 94 => "10111110001101111010101011101000", 95 => "10111100111001001110101000110101", 
    96 => "00111101011111101011000011000011", 97 => "00111101101011111101101011101100", 98 => "10111101001000101111110001001111", 99 => "10111101111101111111010111101010", 
    100 => "10111110010110111010111111100010", 101 => "00111110001011100001000000101111", 102 => "00111110100010100001010101101001", 103 => "00111101101010001010011001011111", 
    104 => "10111110100100100000000101101011", 105 => "10111110010100010100111111111100", 106 => "10111110010010111101110100011010", 107 => "10111110100010010001011100111111", 
    108 => "10111110010100111101110010011101", 109 => "00111101100111010101010000010001", 110 => "00111101010111101100001000110101", 111 => "10111110001011000100001110111000", 
    112 => "10111101011110011101000110101000", 113 => "00111101010100001100001010100110", 114 => "10111101111111111110110011000010", 115 => "00111110100111110011100011101011", 
    116 => "00111110011100111100111101101001", 117 => "10111100110000001101101001010000", 118 => "10111110000010000000011110010101", 119 => "10111100111011100101011000011010", 
    120 => "10111101110001011000011101110010", 121 => "00111110110011111100110100001111", 122 => "00111110011100011111111101110101", 123 => "10111101110010000111110101111000", 
    124 => "10111101110100000001100101001000", 125 => "10111110001010001011001010011110", 126 => "10111011100011010010101100001100", 127 => "10111110100110110000110111010110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

