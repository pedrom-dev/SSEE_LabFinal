-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_61_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_61_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110000111000010011001110010", 1 => "10111101101111110111100011000111", 2 => "00111100101101111010110010001111", 3 => "10111110001010101000101110000100", 
    4 => "10111100111101101011011001011011", 5 => "10111110000100110011101111001000", 6 => "00111101110011001000111010000101", 7 => "00111110000000111001000010000011", 
    8 => "00111101101010000110001000101111", 9 => "00111110000101010011000000111010", 10 => "00111100110001011011100111111110", 11 => "10111110100110010110010010001111", 
    12 => "00111100100001111110101000101111", 13 => "00111101101001011001000110100010", 14 => "00111110011010011000000110100001", 15 => "10111110000111010110011011101010", 
    16 => "10111110001100010100001011110001", 17 => "10111110100001001101111111101011", 18 => "10111101101111000110001110100001", 19 => "00111110011011000011000011111100", 
    20 => "10111101111000001010101110000100", 21 => "10111110010111010000101110011111", 22 => "00111110000100000111011111110001", 23 => "10111101101101110100000111110001", 
    24 => "00111110011001011100111011100001", 25 => "10111101111011010010010001100010", 26 => "10111101110100110000001001001010", 27 => "00111101000101110100010010001101", 
    28 => "10111100101100000110000101011100", 29 => "00111101100101110000110010010001", 30 => "10111100110001000100000011111101", 31 => "10111100101000000000110010110000", 
    32 => "00111110011100011001011110100001", 33 => "10111100110100001111101110010110", 34 => "00111101111001100110110100010111", 35 => "10111110100000111011111000110011", 
    36 => "10111100001100010110101000110110", 37 => "10111101001110011110101000011111", 38 => "00111110001011110110101010010000", 39 => "00111110001000011000110001111000", 
    40 => "10111110001001110100101001010111", 41 => "10111110100001000011001100110111", 42 => "10111110000000110110011100111100", 43 => "10111110011000101010101101100011", 
    44 => "00111101011100010010011101111000", 45 => "10111110000000001110110101101000", 46 => "00111101010011111100100000001111", 47 => "10111101101111010011010111101010", 
    48 => "10111101111110100100011010111011", 49 => "10111100000100011010100011001010", 50 => "10111101111100100000001000010111", 51 => "10111110011001001010000001010000", 
    52 => "10111100100000100110111000011111", 53 => "10111101001110111000101011001011", 54 => "00111110000000111100010000100010", 55 => "00111110000110100001011111000110", 
    56 => "10111110001011111001101001011011", 57 => "10111110000001011001100110111000", 58 => "10111100110101000111010001110110", 59 => "10111110000010100111101001011010", 
    60 => "10111110001001011110010101001011", 61 => "00111110101101011101101000111001", 62 => "00111110000100101101110000100010", 63 => "10111110011111100100001001100110", 
    64 => "10111100100001010111110111011110", 65 => "10111110011110001010101111111111", 66 => "10111110010100110010010101100010", 67 => "00111110001010001010000101100010", 
    68 => "00111110100111100111011111001100", 69 => "00111110011111010000101001000101", 70 => "10111110001011110011010011110010", 71 => "10111110101100000000010111111010", 
    72 => "00111101000010111001001001111000", 73 => "00111101011000001010101101101111", 74 => "10111101111111110100000101101100", 75 => "10111110000001100111001110001110", 
    76 => "00111110001001100110101111000101", 77 => "10111101111010011111000101101111", 78 => "10111110101000101101011010001101", 79 => "00111110011100011011001001111010", 
    80 => "00111110011101001011000110110001", 81 => "00111101110011110011101100100001", 82 => "10111110100011011101010101101110", 83 => "10111110001011001011101001011000", 
    84 => "10111101110001011101010000110010", 85 => "10111110100000001100010010001001", 86 => "00111101001001111000010100101010", 87 => "10111110010010100011011011001101", 
    88 => "00111110110001011111010100100010", 89 => "00111011000100000010001110100100", 90 => "00111110000000000110110111110011", 91 => "00111101100000101000100100011011", 
    92 => "10111100100011101010100001101010", 93 => "10111101100001111100000110000110", 94 => "00111101011101101110111000011110", 95 => "10111101101011100100010000011101", 
    96 => "10111110000010011111111100100110", 97 => "10111100011001101100000110010000", 98 => "00111101011111010101101100010101", 99 => "10111101110101011011000001010101", 
    100 => "10111110000100100101001000101100", 101 => "10111101101100010010110010111001", 102 => "00111101001111000110100100011101", 103 => "10111110100110010000001101101000", 
    104 => "10111101100101001110110101110001", 105 => "00111110100000100011100111100000", 106 => "00111110101011011101100100100101", 107 => "00111110011110001111110011111110", 
    108 => "00111110000101011101010001101001", 109 => "10111110000011100110101010011010", 110 => "10111101010000011001101011011101", 111 => "00111110000101011101011010000110", 
    112 => "10111110100100101101101000000010", 113 => "10111100110100011000000010000001", 114 => "00111110011001101101001101010101", 115 => "10111110001101010000100011000110", 
    116 => "10111110011000001101011001101010", 117 => "10111101100110001001001100010011", 118 => "00111110010100011001001011110000", 119 => "00111110000100110100001010110110", 
    120 => "00111110011010111110101011001100", 121 => "10111110111001100100110001010100", 122 => "10111110010010010100111100110001", 123 => "00111110010111111000011010111011", 
    124 => "00111101100110101111100110100110", 125 => "10111101000110110101100000100000", 126 => "10111110101010001111000001100000", 127 => "10111101100011010100101000101000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

