-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_3_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_3_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111100111111110111010010101010", 1 => "10111110110111001100010011000010", 2 => "10111101110011011011101001000111", 3 => "00111110111111110110010111000010", 
    4 => "00111110010110001101011100001100", 5 => "00111100110011101010010010101110", 6 => "10111110010001100000010101001111", 7 => "00111110101011000001000001111111", 
    8 => "10111110000001010100111011100111", 9 => "10111101111110111000011001111100", 10 => "00111111010000010010111011100100", 11 => "10111110110110110100111010001110", 
    12 => "10111110000011100101011001011111", 13 => "10111110101100101001011100011001", 14 => "00111110011000101001101100001011", 15 => "10111101010101100001001111010001", 
    16 => "10111110000000001000000101111001", 17 => "10111101110001110110000000110011", 18 => "10111110110011101001111001111100", 19 => "10111110101111011001111110111110", 
    20 => "10111110111101110111001111110000", 21 => "10111110110110001011101110110000", 22 => "10111100111110001000011011111010", 23 => "10111110110010000001010010001100", 
    24 => "00111100101000100100010110000101", 25 => "10111111000000100001110100000100", 26 => "00111110101001011100001100011011", 27 => "10111110000100010000100000001101", 
    28 => "00111100101110101100011010011011", 29 => "00111100111111010100100110001010", 30 => "10111110011011101101000100000110", 31 => "00111011110001001110010100100010", 
    32 => "10111110010100001000110111111101", 33 => "00111110001111000101011101111110", 34 => "10111110011101110011001010010010", 35 => "00111010100101010000110111010001", 
    36 => "00111110100100111110111100110001", 37 => "10111101000101111000111101100001", 38 => "00111100010010001101110001010010", 39 => "10111110111001111000110101100110", 
    40 => "10111110111010011001010010001101", 41 => "00111100111000000010111011101111", 42 => "00111110100100001011011101001100", 43 => "00111110110000100101100011101001", 
    44 => "10111110000101011100010111101110", 45 => "10111101100011010010101101101010", 46 => "00111110100111111001000110001011", 47 => "10111010101100001111011110000100", 
    48 => "10111101101000010000000011101110", 49 => "00111101111010111011110101010011", 50 => "10111110000001011100111101111010", 51 => "10111101100101100001101000110110", 
    52 => "10111101000101100100010100111001", 53 => "00111101100100110101010110011101", 54 => "10111101101000101011101100100011", 55 => "00111101000000111110100010011101", 
    56 => "10111110110111010111110010001101", 57 => "10111111000001011001111011101000", 58 => "00111110101001000010000001111010", 59 => "00111110100000100111000111110011", 
    60 => "00111101110100100000000111110100", 61 => "10111110010000011010000001101011", 62 => "10111110010010000011111101000010", 63 => "00111110000011101000100101111010", 
    64 => "10111101111110100110010111100100", 65 => "10111101110111111010000100101101", 66 => "10111100101100111110001011011001", 67 => "10111110110001010010111001010000", 
    68 => "00111110000011001111010101110110", 69 => "10111100101110000001101001110011", 70 => "00111101101110111110000100100110", 71 => "10111101101001010101111001001001", 
    72 => "00111101111000101101111000111011", 73 => "00111110100000101111000000011110", 74 => "10111101111110110110011011010110", 75 => "10111100111001110110011101111000", 
    76 => "00111110010110000110001100111101", 77 => "00111111001001101011111001111001", 78 => "00111101111101000011011010110101", 79 => "10111011010100011100110011100111", 
    80 => "10111110000101011111101010011100", 81 => "10111110001101111110101110001011", 82 => "10111110001010100001111000001110", 83 => "00111110000000101111000000111010", 
    84 => "00111101101111111111000111000000", 85 => "00111101111010110101110101100010", 86 => "00111110001001111000110011001101", 87 => "00111110110110010011110100010010", 
    88 => "10111110100011010000111100001001", 89 => "00111110010011100010011111001011", 90 => "00111110111011000101010111110110", 91 => "10111110001100111101101010101011", 
    92 => "10111101101011100001001101010010", 93 => "00111101001101111001010000100110", 94 => "00111111000011010111110010001010", 95 => "00111110100010101000001110000010", 
    96 => "00111110010000111000110101000000", 97 => "00111110000011110001010100111101", 98 => "10111100111010101010101110000101", 99 => "00111110001100111000110111101010", 
    100 => "00111101101101000110100110010111", 101 => "10111110000111001111101000111110", 102 => "10111110000010011100110011101100", 103 => "00111110011100100111001111001010", 
    104 => "00111111000001101001010101001100", 105 => "10111101111000011111011111101111", 106 => "10111110111101000101101100110100", 107 => "00111110111010100111100000110011", 
    108 => "10111110011111000000110110001011", 109 => "10111100001010111010100110000111", 110 => "10111100111011011010110001100001", 111 => "10111110011001011100011110010101", 
    112 => "00111101111110100011110101000010", 113 => "00111111000100101010010100010010", 114 => "10111110001010100000110100100010", 115 => "10111110011010010001000111011001", 
    116 => "10111110010001101110000010101000", 117 => "10111110100011101000010100010111", 118 => "00111101101011010100110011011110", 119 => "10111110100011100100011111100100", 
    120 => "00111110011000100111010101000011", 121 => "00111110011101110011111100001111", 122 => "10111101010011000001001100111100", 123 => "00111101111101000001110100111010", 
    124 => "00111110100001000010110111110101", 125 => "00111100100111110110010011100101", 126 => "00111101100111001011011010101111", 127 => "00111111000011101010011011101011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

