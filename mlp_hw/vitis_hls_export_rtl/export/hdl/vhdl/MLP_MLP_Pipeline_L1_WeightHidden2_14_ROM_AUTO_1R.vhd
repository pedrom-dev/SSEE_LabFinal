-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_14_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_14_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111010011100110010010000100100", 1 => "00111110100110011001100010000000", 2 => "10111110010100111000100111101010", 3 => "10111101111001110111101001000000", 
    4 => "10111110100011110101111001010101", 5 => "10111101000100100001111110001010", 6 => "00111101001000011101111110011001", 7 => "10111110110100101111011101101010", 
    8 => "00111101110101111000010111001011", 9 => "00111101111001001111110101111010", 10 => "10111110100100100101111010101010", 11 => "10111100101010001100000101001111", 
    12 => "00111100110110101111001101010110", 13 => "00111110111100101110000101100101", 14 => "10111110010101011100000000011011", 15 => "10111101111001101100111101001001", 
    16 => "00111110100111101100110011111011", 17 => "00111110100101100010111011101001", 18 => "00111111000010010011110010110011", 19 => "00111110111010011011100001001011", 
    20 => "00111111000010110110100100001100", 21 => "00111110000110011010110001010011", 22 => "10111100101000110010011110110010", 23 => "00111110011011001000001111101111", 
    24 => "10111101100010101110011111111111", 25 => "00111110111100110000100001101101", 26 => "10111110000101100011001001111111", 27 => "00111101000000110011010000000101", 
    28 => "00111100100000001011100110011001", 29 => "10111101000010100100011011010001", 30 => "00111110100010111101101101010100", 31 => "10111110000110000001100110110101", 
    32 => "00111100010100100000111001101011", 33 => "10111110001110000101001001010111", 34 => "10111110000000110100010111100100", 35 => "00111101011000101011101100001111", 
    36 => "10111110111101011010110010001110", 37 => "00111110010110101011001001100100", 38 => "10111110001100101111101110011111", 39 => "00111110000101100111001000001011", 
    40 => "00111110111001100100101111001110", 41 => "00111110001010100011010111010100", 42 => "10111110100110100111000101111101", 43 => "10111110011110010001101110001110", 
    44 => "00111110011100100010011100111000", 45 => "10111110000010001010010110101000", 46 => "10111101111100101001101000100101", 47 => "10111110100101101000100110001100", 
    48 => "10111110010110111011100000010100", 49 => "10111110001000111101110011000100", 50 => "00111110001101100000111110011101", 51 => "00111101111010110011001000100100", 
    52 => "00111101110100101110100010001011", 53 => "00111110010011011001001000110001", 54 => "10111101111111000001100011110001", 55 => "00111101001001111010100010111110", 
    56 => "00111110101011101101100001001110", 57 => "00111110111000101110000001111001", 58 => "10111110001110001010010011111000", 59 => "10111110000010111011101110101000", 
    60 => "00111101011110111101111111001101", 61 => "10111010100101101101001101101100", 62 => "00111110111010111101110001110110", 63 => "00111100110011001101100011110001", 
    64 => "00111100110000110101011011101101", 65 => "10111100100011100001010100101100", 66 => "00111101101011111110000010110110", 67 => "00111110100010101110110000011111", 
    68 => "10111110101101010010111000100100", 69 => "00111101110110001011010101010010", 70 => "10111110010101101100100011111101", 71 => "00111110000000000011010000101001", 
    72 => "00111101100010011011000011101000", 73 => "10111100011100001000011101111101", 74 => "00111101001001001101001110000111", 75 => "10111101101100111110100000010011", 
    76 => "10111110000000111010011110100110", 77 => "10111110111001100100011111111001", 78 => "10111101010101011000010110111001", 79 => "10111101101000110110101011011100", 
    80 => "00111101110101010111101100101111", 81 => "00111101100011010000110111111000", 82 => "10111101111010111100111010111100", 83 => "10111101110110110101101101011111", 
    84 => "10111010101111111100011000101001", 85 => "00111011101111100100001010110001", 86 => "10111110000100010000101101001100", 87 => "10111110100010110001111010011100", 
    88 => "00111110110010111011011010110010", 89 => "10111110011110011010111101010000", 90 => "10111110110000000100001011010100", 91 => "00111101100010000101010101001001", 
    92 => "10111110000011101111000011010101", 93 => "00111101110110001011011100110110", 94 => "10111110110000111010011111110100", 95 => "10111101101011100101101001101010", 
    96 => "10111100110110101000000011000000", 97 => "00111110000111100010001000110110", 98 => "10111110000011011111110111010001", 99 => "10111110101100100101011010011000", 
    100 => "10111110101101100111000100101100", 101 => "10111100110000111000101100110101", 102 => "00111110110001011101011010000011", 103 => "10111110100110011101101101000101", 
    104 => "10111110100100000101100001101011", 105 => "00111110001101001100000100101010", 106 => "00111111000100110110010000100100", 107 => "10111110101011100011100011111110", 
    108 => "00111101110100000100000001111110", 109 => "10111101010101010011101110010100", 110 => "10111101101110100010011110111111", 111 => "00111110000010001011001001011111", 
    112 => "10111110010011111100101000100100", 113 => "10111110110100000101001011100100", 114 => "10111100010001101110010111011000", 115 => "10111101001110010100111100101100", 
    116 => "00111101010100010111011011100100", 117 => "00111110011101010011000011100110", 118 => "00111110011001000100001111001010", 119 => "00111110100101011001110010111111", 
    120 => "00111101100100000100000000011100", 121 => "00111110000100001101010100010000", 122 => "00111110010000110010000110011100", 123 => "10111101100111000111001001001111", 
    124 => "00111101010111111000000011100010", 125 => "00111101001110001100101000100100", 126 => "10111101100101101110101011010000", 127 => "10111111000001101110000001110101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

