-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_32_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_32_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111100100111010010000000000001", 1 => "00111101011100110101010010010100", 2 => "00111110001001000100011101111111", 3 => "10111110000000010111000100011000", 
    4 => "10111110001100111000100011001100", 5 => "00111101111010010011111010001101", 6 => "00111100000110100000101001011000", 7 => "10111101110001110111010100010000", 
    8 => "00111101000000011111001110110110", 9 => "10111101010011011001110110000010", 10 => "00111110011011011010011010000011", 11 => "10111110000110000110110001101111", 
    12 => "10111110100011010000000011101000", 13 => "00111110100101011010010100101011", 14 => "10111110001101010111000100100001", 15 => "00111110100000011001001010101110", 
    16 => "00111110001000100101011110011101", 17 => "00111110100010001010110100001100", 18 => "00111100011101110011101110100001", 19 => "00111011111000011011111101001101", 
    20 => "10111101001100100011101101110111", 21 => "00111101000110110011010110010001", 22 => "00111110100010011011001000001101", 23 => "00111110000000100000000101110011", 
    24 => "10111101001010101110011101101111", 25 => "10111110010110111101100100111100", 26 => "10111100110100111010111000001101", 27 => "10111101100011101101100010000000", 
    28 => "00111110010001101000010110011001", 29 => "10111110001001110101111110111011", 30 => "10111110001101100010010101101111", 31 => "00111100000100101000101101010011", 
    32 => "00111101100111101011000110101001", 33 => "00111101001101011110111111010001", 34 => "00111101001000000111100101111101", 35 => "10111110101100010010001001100011", 
    36 => "00111110101000111101101011001001", 37 => "10111110010010110000010101110010", 38 => "10111110101110111010111101110100", 39 => "10111110101010011110001111111111", 
    40 => "10111110110000101010100111011100", 41 => "00111101000110101100000010010110", 42 => "00111101101111001100010110110010", 43 => "00111110000010001011011110101001", 
    44 => "00111100110001100010000111001000", 45 => "10111101110100111011011100000111", 46 => "00111110001110010111101000110011", 47 => "00111011111101111110010111101011", 
    48 => "10111110001010011010001000010111", 49 => "00111110100011010100011001110101", 50 => "00111101111010101000101101101110", 51 => "00111110100101111010100100011101", 
    52 => "10111110011010010100010011110101", 53 => "00111101111100010110111001011001", 54 => "10111110100010010000110000000100", 55 => "00111101101010110001000111010000", 
    56 => "00111110101010100101100110111111", 57 => "00111101110100111001101111111011", 58 => "10111100101001110001001100010100", 59 => "10111100101101100110110001001000", 
    60 => "10111100100000111111110100110101", 61 => "10111110011011100010001001101100", 62 => "00111100011110111000100001010111", 63 => "00111101011100000110011011101110", 
    64 => "10111110100101001000110110110101", 65 => "10111110010111010000111000111110", 66 => "00111110000111110001011011011101", 67 => "10111110000001000010100101100000", 
    68 => "00111110010101000111001100111110", 69 => "10111110011110011001000101001011", 70 => "00111101110110010001100010111000", 71 => "00111110101000111001011111100001", 
    72 => "10111101100111100000000010110110", 73 => "00111110000100100001001110110000", 74 => "00111101011000110011000000101001", 75 => "10111100100001001010011110010101", 
    76 => "00111100110100011110000010111110", 77 => "00111101111001101100011000101101", 78 => "00111110001011100110000011001011", 79 => "10111101000000010100010100000010", 
    80 => "10111110010000000001001001010101", 81 => "10111110000110111110101101110011", 82 => "00111110110001011100100001100101", 83 => "10111100110011110011100000100111", 
    84 => "10111101100110011001001000110001", 85 => "00111101011111011001000010111010", 86 => "10111101110111000110100101000001", 87 => "00111101110110001011101001010001", 
    88 => "10111110001100010110010111000101", 89 => "10111101101010110011010110010010", 90 => "10111110010101111011000010101100", 91 => "10111101100011010100111000100011", 
    92 => "10111110101010001001000110101111", 93 => "10111110011111100101110001110011", 94 => "00111101010011010111110000001010", 95 => "00111110011110111001010001001110", 
    96 => "00111101111101001101111100001100", 97 => "00111110001111000101100001000001", 98 => "10111110100011101110100111001011", 99 => "10111101111001000001010010010111", 
    100 => "10111101101111011111010110000011", 101 => "00111100000100010000010100101011", 102 => "10111101110101010001000011001110", 103 => "10111100100011111001011000000000", 
    104 => "00111110110000110000110000111001", 105 => "10111110000100010111110101110111", 106 => "10111110011011111010000000010100", 107 => "10111101010010110001001001101000", 
    108 => "10111011010101110011100001111111", 109 => "00111100110001111111100010110010", 110 => "10111110010110010011110000010000", 111 => "10111101111001011111100000100100", 
    112 => "00111101110010111111011001100010", 113 => "00111101101110000100110100110101", 114 => "10111110101111000111100101001110", 115 => "10111011010110010001001010000000", 
    116 => "00111110100000011100011000010101", 117 => "10111110010100100010111011100101", 118 => "00111100111001101110001010011101", 119 => "10111100011001011100011001111001", 
    120 => "00111101110100001001101000011111", 121 => "00111110001010111101011000101011", 122 => "00111110001000111101010101010101", 123 => "10111100010110001001001101011111", 
    124 => "00111110000110011011001101100110", 125 => "10111110100111110110110101010110", 126 => "00111110100111110110101000100101", 127 => "00111110100000000110000010011001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

