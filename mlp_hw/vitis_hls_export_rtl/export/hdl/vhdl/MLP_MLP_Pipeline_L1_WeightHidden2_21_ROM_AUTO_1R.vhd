-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_21_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_21_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110010010001000000000100101", 1 => "10111100010000101001110011111110", 2 => "10111101001100011100010011010001", 3 => "10111110001111100000001100111001", 
    4 => "00111101000111100101001111011110", 5 => "10111100010010110111011001110110", 6 => "00111101101011101110000010010010", 7 => "00111110001001001110011011101010", 
    8 => "00111110011010100101011101110101", 9 => "00111110010011110000100001111000", 10 => "10111110100000010001110000010100", 11 => "10111100100111011010011111010001", 
    12 => "00111110010111111001011011001001", 13 => "10111101101001001001111011111001", 14 => "00111101101110011111001001111100", 15 => "00111110000000000110110011111101", 
    16 => "10111110001111011000010011011101", 17 => "10111110101011111001101110100000", 18 => "10111110001100111001000000000100", 19 => "00111110011100100001011000110110", 
    20 => "10111101011001111100000110111000", 21 => "10111110001100000011000011000000", 22 => "10111110001101001100001111011110", 23 => "10111101000000010010111110001011", 
    24 => "00111101001100101101001011010011", 25 => "00111101011111100111001011001010", 26 => "10111110000000100100110001011010", 27 => "00111110011100011001000001110000", 
    28 => "10111110100100110001010001101011", 29 => "00111110100101001011000000110010", 30 => "00111101110111100101101111001110", 31 => "00111101100001011100000110100100", 
    32 => "00111110101000010010110011111001", 33 => "10111110010010110110000111000100", 34 => "00111101111001101010001010000101", 35 => "10111101011101100110011001010100", 
    36 => "00111101000001001001101100011010", 37 => "10111101000000001001000000011110", 38 => "00111110110010000101010010011011", 39 => "00111110110010011011101010000000", 
    40 => "00111100110011101111000011011001", 41 => "10111110011000100010111000010101", 42 => "10111110010101000001101011000100", 43 => "10111101111101110010011010101100", 
    44 => "10111110100011111111100001010011", 45 => "00111101100001011111101001110100", 46 => "10111101100100111011011011010011", 47 => "00111110001001000101001011001110", 
    48 => "00111110000010110000010100110000", 49 => "10111101111111100001010000100110", 50 => "00111101110100100101101001011111", 51 => "10111110110010100010011000111011", 
    52 => "10111101110101110011011101010000", 53 => "10111110001001010011101000100111", 54 => "00111101111111000011100011001000", 55 => "00111101110101011010110100101111", 
    56 => "10111100011010010001101110000010", 57 => "10111110010110110110101110001000", 58 => "10111101100001111000001011110110", 59 => "10111110101000000010010111000100", 
    60 => "00111101110101001101010111101110", 61 => "00111111000111101111110001011000", 62 => "00111110001001011101110110101011", 63 => "10111110100011011011100101011110", 
    64 => "00111110000100001101110101001011", 65 => "10111101101110110110001011111001", 66 => "10111101011110101011111010011011", 67 => "00111110110000000010011101110101", 
    68 => "00111110011110100000110111111101", 69 => "00111110010110110011010111000110", 70 => "10111110100000101101111110001000", 71 => "10111110110011011001110000100011", 
    72 => "00111100011010111010000101001110", 73 => "10111011111100010100110101001010", 74 => "10111110001100101100101111011100", 75 => "10111110101011000010000010001000", 
    76 => "10111010110111101010010000111011", 77 => "10111110101010000011111101111010", 78 => "10111110011000001100110110111001", 79 => "00111110011110100011111101011011", 
    80 => "00111110101010101000011000000010", 81 => "00111110000000100111100110101111", 82 => "10111110010101000101001001001001", 83 => "10111101101001100000010000011001", 
    84 => "10111110000110111101110101100000", 85 => "10111110001110100000110010101001", 86 => "00111101101001101010001010011101", 87 => "10111101100100100010000101000010", 
    88 => "00111101110110100111001101101101", 89 => "00111101110010001111111001100001", 90 => "10111101000001110100101111000100", 91 => "00111100111001100001110011001010", 
    92 => "10111101000001110010100101001111", 93 => "00111110001000100111011011111010", 94 => "10111110100001111101101100010100", 95 => "10111100010101101110111001101111", 
    96 => "10111110001000001010100111000110", 97 => "00111100110001011111111111001101", 98 => "00111110101001101111001111101101", 99 => "00111101111111110110100010001011", 
    100 => "10111101011000011101010010000001", 101 => "10111110001100111101011101100101", 102 => "10111110000000110110100101100001", 103 => "10111110010011100101000111011101", 
    104 => "00111101110000100111110010011110", 105 => "00111110101000001011101110100000", 106 => "00111110101011111111110000000010", 107 => "00111100010000011010101010100101", 
    108 => "00111110000110011001011110100000", 109 => "10111110010001011011011111001111", 110 => "00111101010011111011010110000000", 111 => "00111110010001011010101100110111", 
    112 => "10111110010001100110010100100000", 113 => "10111011010001111101110110100101", 114 => "00111110110011110001111000111110", 115 => "10111100001001111010101000010011", 
    116 => "10111110100011011011010001011101", 117 => "00111110000101000110100010000100", 118 => "10111100111011000110110110100111", 119 => "00111110010111110000010111100110", 
    120 => "10111101000001110011100011101111", 121 => "10111110111011001110011100111010", 122 => "10111100111111000001101000000010", 123 => "10111110010000100110011000101011", 
    124 => "10111100011000010000010101101001", 125 => "00111110100010110110100011000010", 126 => "10111110101010101011000111011110", 127 => "10111110000110111011001000101011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

