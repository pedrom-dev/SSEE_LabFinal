-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_59_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_59_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110010011100001001010001100", 1 => "10111101101010100001001110011010", 2 => "10111101000100101110001101011010", 3 => "10111110001001111000000001011010", 
    4 => "10111100000010101000011001000001", 5 => "00111110011110000111000010001100", 6 => "10111101110100100011100000110100", 7 => "00111101101100010000110000010000", 
    8 => "00111110000111101110110001111011", 9 => "00111110000010101100011100011000", 10 => "10111110110101001010110011010010", 11 => "00111110111111101100111100011101", 
    12 => "00111110000000100010111000101111", 13 => "10111110110101111110111111100000", 14 => "10111110011010101001010001101101", 15 => "00111110001011110000001101111100", 
    16 => "10111110110010100001111111110100", 17 => "10111110100111011000010111101111", 18 => "10111110001111100101000100001111", 19 => "10111110000010111111000111101001", 
    20 => "10111100010001110110000110110100", 21 => "10111101100101001001100000110001", 22 => "10111110100101100011010111000011", 23 => "00111110001010101011101110010101", 
    24 => "10111110101100011011110100011101", 25 => "00111100111010011111111010001100", 26 => "10111110000001010100000011010111", 27 => "00111111000011111111101111010100", 
    28 => "10111110001111100000110110111111", 29 => "00111110100110100001101001110010", 30 => "00111110001011101001110010011000", 31 => "10111100110101011011011011010001", 
    32 => "00111101110111110110100100000101", 33 => "10111110101010010101110101111111", 34 => "00111110010100001000100010000001", 35 => "00111110001000011000011111100100", 
    36 => "00111110010111110110001101001101", 37 => "10111110000010111100001110001001", 38 => "00111110111100110000111101000011", 39 => "00111110010110011101101110110110", 
    40 => "00111110011011000000100011001001", 41 => "10111100111011100100110110010110", 42 => "10111101011101111101110010010011", 43 => "00111110010101010011011010101100", 
    44 => "10111110100100001000111101110111", 45 => "00111110001001100011011010011000", 46 => "10111110111111011011000001110000", 47 => "00111110100110101000011111110010", 
    48 => "00111110110100000000110010101100", 49 => "10111110100001110101100101011101", 50 => "00111101101011100100100010101100", 51 => "10111110100100010101100001111101", 
    52 => "10111110011100010000011000110101", 53 => "10111110100100111111111001101111", 54 => "00111110000011011110110010110110", 55 => "00111101010100001100111011110010", 
    56 => "00111101010110010010011100000110", 57 => "00111100110011100011101010000000", 58 => "10111101011100101000110001101111", 59 => "10111110011110011000111100111010", 
    60 => "00111110010000010101101110011111", 61 => "00111110111001101000001010100000", 62 => "10111011010101000111000011011011", 63 => "00111110000001110101110111010111", 
    64 => "00111101110111001100111110111011", 65 => "00111101010101100011011110101000", 66 => "00111110000011111000000001000101", 67 => "00111100011110010011100101000111", 
    68 => "10111101111100000011110010110010", 69 => "00111101010011100110100101010010", 70 => "00111100110000110100111000101110", 71 => "10111110011100001001000000010010", 
    72 => "00111101011100011100011000110001", 73 => "10111101110000011110000001100101", 74 => "10111101111110011010001001011011", 75 => "10111110011010001010110100111000", 
    76 => "00111100111000010011100010011111", 77 => "10111110100011100101001011000101", 78 => "00111101110010110000100001110110", 79 => "00111100110100001100011001010001", 
    80 => "10111101111111000111011011001000", 81 => "00111110010111110100111101000111", 82 => "10111101001001100101000011100010", 83 => "00111110100011110001100000001010", 
    84 => "00111101111110111000110101010111", 85 => "00111101101000000011110011101101", 86 => "10111011111011010011111111011111", 87 => "00111110010100001000111110000101", 
    88 => "10111110110101111111101010110111", 89 => "00111110011011001011000111111010", 90 => "00111110100111110110011110000111", 91 => "10111100101101000100011111111011", 
    92 => "00111110001000110000111001110100", 93 => "00111110011001100010101011010011", 94 => "10111110110110011011011011100000", 95 => "00111110100101000101110100001110", 
    96 => "10111110001011100001011110100010", 97 => "10111110011100110111011101110101", 98 => "00111110011111010001100101110101", 99 => "00111111000000011001111000010010", 
    100 => "00111110010100100100100110110010", 101 => "10111101110101100111111011001001", 102 => "10111110101100000001101000110000", 103 => "00111100010101110001001011100001", 
    104 => "00111110000101101011111110001110", 105 => "10111110001000100111000010100101", 106 => "10111101111010010111110000111110", 107 => "10111110001100101001001111101101", 
    108 => "00111101101111111111001000011110", 109 => "10111110001010110001101001111000", 110 => "00111110001101101111001111011101", 111 => "00111101100101011100011110101000", 
    112 => "00111101011101111011001011110111", 113 => "10111100110001000000101001110110", 114 => "00111110100001011100111111101011", 115 => "00111110100110100011111100111010", 
    116 => "00111011101111000100101010101000", 117 => "00111101101110010000010101001101", 118 => "10111110011001001110011010001000", 119 => "10111110000001000011110001101100", 
    120 => "10111110010011110100100101010011", 121 => "00111110010001011000000111010011", 122 => "00111101111101000001000000011010", 123 => "10111110101101001010100011011100", 
    124 => "10111101100110111111000001100110", 125 => "00111110100110100001110011011011", 126 => "10111110000011010010111110110100", 127 => "10111110100010001000110100011100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

