-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_19_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_19_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110100100100110101010101011", 1 => "00111101001001001100110111011011", 2 => "10111110011100110111010000011011", 3 => "10111110111001110111100101001111", 
    4 => "00111101100001011001101000100011", 5 => "00111101111101110110010101100110", 6 => "10111101101010100101110110101000", 7 => "10111110000110011111100000011110", 
    8 => "10111101111100011010010111110000", 9 => "00111110011000010001100000011010", 10 => "10111101111100011010011011101100", 11 => "00111101110111111100100101010110", 
    12 => "10111110000000000111000010110111", 13 => "00111101001110101101000101001111", 14 => "10111101100100101011110100011111", 15 => "10111110100101101100010000111000", 
    16 => "10111110010000111000110000100001", 17 => "00111110000110011000101100011111", 18 => "00111110011001100111100011001101", 19 => "10111101001110001101111000111000", 
    20 => "00111110000100011001100110100011", 21 => "10111101111110010000010011000000", 22 => "00111110100001101010001110101110", 23 => "00111110100000110100000000001101", 
    24 => "10111110100111000010011111101111", 25 => "00111110100000000101111101110010", 26 => "10111110100000010000001001100011", 27 => "10111100000111001100100101001111", 
    28 => "00111110100001111110001001001010", 29 => "00111101011001011111100000111100", 30 => "00111110011100010100110011101000", 31 => "00111101001101101100001101010011", 
    32 => "00111110100010100000110011110000", 33 => "10111110110010001100011011011011", 34 => "00111110101001001001101011000010", 35 => "10111110100010001110111101101101", 
    36 => "10111100101001000010110011110010", 37 => "00111110010011110000110110011101", 38 => "00111101101100000010000110101111", 39 => "00111110001110010000101011010001", 
    40 => "10111101000001101000010010111111", 41 => "10111110000001101110100111011100", 42 => "10111100001011011101011100111110", 43 => "10111110010110101110000100110100", 
    44 => "00111110001101101000001100110011", 45 => "10111110100110101101001100010111", 46 => "10111101110010100100001011011010", 47 => "10111110001010100001011011100001", 
    48 => "10111110100010011010001111011110", 49 => "10111101010010011110010110111111", 50 => "10111110011101110111010100101010", 51 => "00111101101001101010010011001110", 
    52 => "10111101011000000000100001110100", 53 => "00111101100110011001010110010011", 54 => "00111110100011111001000000111110", 55 => "00111101010011010010101100010001", 
    56 => "00111110110010010001110100000111", 57 => "00111110100101111001111110101101", 58 => "10111100110010000011100111100000", 59 => "10111101101101101111111011000111", 
    60 => "10111110101010000001001011100001", 61 => "00111110101010110110110011101011", 62 => "00111110101110010010001000101101", 63 => "10111101101110111101011100110100", 
    64 => "10111100101011101101100001000101", 65 => "10111110010001011001010110101010", 66 => "10111100010010101100100000011111", 67 => "00111110000001101111010101001111", 
    68 => "00111101110111111001001001010100", 69 => "10111101110011111110100111100101", 70 => "00111101011110111011000010110011", 71 => "10111011000011101011100111101101", 
    72 => "00111110101101110110101011000110", 73 => "00111101100111101110110010100010", 74 => "10111110000101001110010010000001", 75 => "00111110011000000111001000011110", 
    76 => "00111100111010100011000110101101", 77 => "10111110100010100101111010100001", 78 => "10111110011111100010100110110000", 79 => "10111100101101101011011010000000", 
    80 => "00111110101111000101101010010001", 81 => "00111110100100010111111111011010", 82 => "10111100000110111101110000011011", 83 => "10111101111000011000000101110000", 
    84 => "10111110100001010000010010101111", 85 => "10111110000011101100110001101100", 86 => "10111101000011100011001111000101", 87 => "10111110000011111001000101001001", 
    88 => "00111110100010010010101011100111", 89 => "10111110010101100011010011110111", 90 => "10111010101111101001010111010010", 91 => "10111110001010111110100010110001", 
    92 => "00111101111110111101100111101111", 93 => "10111101110111000001111100111010", 94 => "10111110000110001101000010001001", 95 => "10111100010100100110111111100100", 
    96 => "10111110010000000110100101010011", 97 => "10111101110001111110001011001111", 98 => "10111110010010001001101110111100", 99 => "10111110011010110100011101000101", 
    100 => "10111110001010010100101000101000", 101 => "10111110000110001110110010000101", 102 => "00111110000000100111111011010100", 103 => "10111110111110100011101111010011", 
    104 => "10111110000000010001010000101010", 105 => "10111101000110100001011111110100", 106 => "00111101010111100110001001000000", 107 => "00111100010110110110001000100110", 
    108 => "00111110000000110010000111000111", 109 => "10111110010111100111110101111111", 110 => "10111110001011011100111010111111", 111 => "00111101110111101000011110000010", 
    112 => "10111110011010101100100111010001", 113 => "10111110000100001111000011100000", 114 => "00111101101000111101101011010111", 115 => "00111110001011110101010101111110", 
    116 => "00111110100101100000100111000111", 117 => "00111110100110100011011101101000", 118 => "10111100000100000111001101110101", 119 => "00111110100110100010111010001000", 
    120 => "00111101001010100100000100000100", 121 => "10111110000011010001110100010110", 122 => "00111101101100110010000000111111", 123 => "00111101111100101000101001001010", 
    124 => "00111110101000101010001001101110", 125 => "10111110010011110111110101110000", 126 => "10111011110011011110000111100000", 127 => "10111110011100010010111000111111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

