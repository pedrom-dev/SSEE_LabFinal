-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_63_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_63_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110011101010000100011001010", 1 => "10111110000000000101000101000010", 2 => "10111101111000011000101011001110", 3 => "10111110100010001001101111010100", 
    4 => "10111110011101111110110100011011", 5 => "10111101101010101001111000001100", 6 => "10111101101100111001010010011001", 7 => "10111101000111010110111100101001", 
    8 => "10111110001101011100001110000110", 9 => "10111101101100001110100010000011", 10 => "10111110111101011001010111000000", 11 => "00111110000000100110010010101101", 
    12 => "10111101111000100111010100111001", 13 => "00111110100111111010101111101001", 14 => "10111110100001101110001001100111", 15 => "00111110010100001101100101110010", 
    16 => "00111110001000110011111101000100", 17 => "10111110010000100000111111100010", 18 => "00111110101011100010110101011010", 19 => "00111110111010100001100001100001", 
    20 => "00111110101011001101100101111100", 21 => "00111110001001111101110000010010", 22 => "00111110000001010110010010011011", 23 => "00111110110110010110111011101011", 
    24 => "00111101000011111010000101100000", 25 => "00111110110101111000001001010000", 26 => "10111110101110101001001100100100", 27 => "10111110001101001101000000101101", 
    28 => "10111110100010001101001101100011", 29 => "00111110001111001110110010110010", 30 => "00111110011001110011000111010111", 31 => "00111101000011011010010111100110", 
    32 => "00111100101010100100110111000001", 33 => "10111110000111100001111101000100", 34 => "00111101110000100111110111000100", 35 => "10111110101011001111000101110010", 
    36 => "10111110010101101110000010011101", 37 => "00111110110010100000100101101011", 38 => "10111110000100010111001101101001", 39 => "00111110101011011101001100110101", 
    40 => "00111101110111000110100000101010", 41 => "10111100000000000001100010001001", 42 => "00111011101010110111001011110101", 43 => "10111110010111010001100111010000", 
    44 => "00111110000111011101100101000111", 45 => "10111101100100110111111111101111", 46 => "10111101000101000110011010000100", 47 => "10111101110111111110011111010011", 
    48 => "10111110100000010001000010011101", 49 => "00111101110101111111011011111111", 50 => "00111110001011000001101101011001", 51 => "10111110011100011000010101110001", 
    52 => "10111101100110001100011001111111", 53 => "00111101110111111110000000110001", 54 => "10111101101100100000111010111000", 55 => "10111110010000100001110010100100", 
    56 => "00111110101111100010110010110100", 57 => "00111110101010000001011101100101", 58 => "10111101010100101101110110111011", 59 => "10111101110111001011000000110011", 
    60 => "00111010010001100100011111001101", 61 => "00111110000001101001000001100001", 62 => "00111110100001000101110011000010", 63 => "00111110001001101100100111010110", 
    64 => "00111110100000001101101100100101", 65 => "10111101000000100101001001110000", 66 => "00111110011011010110010001011010", 67 => "00111111000010111111010101111001", 
    68 => "10111011001000011100000010000101", 69 => "00111110100001011100110011000110", 70 => "10111110011011101011101000101101", 71 => "00111110010110110110011001000011", 
    72 => "00111100101100011001001100110000", 73 => "10111110011010101101110101101001", 74 => "00111110000001111110000010111000", 75 => "00111110000001001111001010110111", 
    76 => "10111101100110011000010101101001", 77 => "10111110111100010000000111011000", 78 => "10111110011110010000010111010000", 79 => "10111110100111110111011100110011", 
    80 => "00111110100010010101001011011010", 81 => "10111100000101001011100110110110", 82 => "10111011100111001011011100111101", 83 => "10111101101110011010001111100100", 
    84 => "10111110000101101011011110001101", 85 => "00111101011100000011011101100011", 86 => "10111110000010110010011001101110", 87 => "10111110101001100100000011110000", 
    88 => "00111110101111101011101101001110", 89 => "10111011001110100011000001101000", 90 => "10111110011010111001011011100011", 91 => "00111110101111111010111101111001", 
    92 => "10111110011111100110111111111001", 93 => "00111101110011111111010101110000", 94 => "10111111000000011000111011100001", 95 => "10111101101010010101001110110001", 
    96 => "10111110000011000001001011100010", 97 => "00111110100100100010101100111000", 98 => "00111110000110000011000001000111", 99 => "10111110101110110100010110111100", 
    100 => "10111110110011011111100000000010", 101 => "00111101111111110100001101110111", 102 => "00111110101100110010111011001000", 103 => "10111110010001000011010010110011", 
    104 => "10111110010010100111110001001000", 105 => "00111110001011011011101000011110", 106 => "00111110101010001110101010100111", 107 => "10111110100111000000111001100101", 
    108 => "10111110000001011111110000010100", 109 => "10111110000110110101011000011101", 110 => "10111110100011110000000101101011", 111 => "00111110000001001001101001101110", 
    112 => "10111110000101111011110011010100", 113 => "10111110011010110111111001000011", 114 => "00111110100011101100010111010011", 115 => "00111110100010110101101110110110", 
    116 => "10111101101100111110110011101101", 117 => "00111101000110101100011100010001", 118 => "00111110101000011110001010110111", 119 => "00111110010111010001000011111011", 
    120 => "00111101101110001111010010010110", 121 => "10111101111110100100010101100110", 122 => "10111101001000010110111000011010", 123 => "10111110011110111101011000110011", 
    124 => "00111110000101010110111101001101", 125 => "10111101001110001110001110100111", 126 => "10111110011001111110010000100001", 127 => "10111110101111001001000111000110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

