-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_39_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_39_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101101111100101011000000111", 1 => "10111110110000111101010001100001", 2 => "10111110001001110100110101010101", 3 => "10111110110110101011010011001001", 
    4 => "10111110101111111110111111011101", 5 => "00111101110010011010111001100011", 6 => "10111101000100100101100001110010", 7 => "10111101100101100111100100010110", 
    8 => "10111110011110001011011011101101", 9 => "10111100101100110011010001111011", 10 => "00111101100001001111000101000000", 11 => "10111110010001011100001111000110", 
    12 => "10111110100110010101101110110011", 13 => "00111110110101011011001100001101", 14 => "10111110000100111100000000011011", 15 => "10111110001010110010010010100111", 
    16 => "10111100100001100011001110000001", 17 => "00111110001111000110010110111110", 18 => "00111101110010100000110001001011", 19 => "00111110001011101000000110010001", 
    20 => "10111110001101000011101000011111", 21 => "10111101111010100000000001001011", 22 => "00111111001000100111010010001100", 23 => "00111110010101101100000001000101", 
    24 => "00111100101111000100010010001010", 25 => "10111110011011101110011111100011", 26 => "10111110001101100001011010100011", 27 => "10111110011111100000111001111011", 
    28 => "10111101011011000111011000010000", 29 => "10111110001000100011100111010000", 30 => "10111110001000100101100101101111", 31 => "00111110011010001010011101010101", 
    32 => "00111110010001010000101100000010", 33 => "10111110010110011011101101000000", 34 => "00111110001011111101011101111010", 35 => "10111111010101001101101010111011", 
    36 => "00111110100010001000010000000110", 37 => "00111110101010101000010001011000", 38 => "10111110001010000000100000000011", 39 => "10111110100101000101010010010111", 
    40 => "10111111000100000011010000001100", 41 => "10111101101111111010000110010010", 42 => "00111110111010010000101011001001", 43 => "10111101111100011100000010010010", 
    44 => "10111101100010101010100010111010", 45 => "10111110100110111010110110101111", 46 => "00111111000001100010011001101011", 47 => "10111110010101001110100100001110", 
    48 => "10111110110001000111110101100000", 49 => "00111111000100110000011111001010", 50 => "10111110000101000111100010100110", 51 => "00111110010110001111000100101101", 
    52 => "10111011011110100011100001000000", 53 => "00111110100001001010110000100011", 54 => "10111110100000101101111101101110", 55 => "00111101011100100101010110101000", 
    56 => "00111111000001101100011100000010", 57 => "00111101100001111011011100100001", 58 => "00111101110011011010110100110111", 59 => "10111010010100110111010000000110", 
    60 => "10111110010100110010100110001000", 61 => "00111101111111010010110101110100", 62 => "00111100001100101001101101110011", 63 => "10111100001101111100101101010011", 
    64 => "10111110111000111010000011000101", 65 => "10111110101001111001010001011101", 66 => "00111101100100011010000100110000", 67 => "00111110100101100101000100010111", 
    68 => "00111110101101011111001101000100", 69 => "10111101110101101111000010110101", 70 => "00111101101001101000110111110001", 71 => "00111110101110001100000110000100", 
    72 => "00111101101100110001100100001010", 73 => "00111110000001001000110110110100", 74 => "00111101010111110111011111110101", 75 => "00111110011110010000011100110100", 
    76 => "00111110001100101001000111000010", 77 => "00111101011001000001100000001101", 78 => "10111110100101010111110111110110", 79 => "10111110000010011111010010010111", 
    80 => "00111110100110110010111010100010", 81 => "10111110010010111110111000111101", 82 => "00111110001100111101011110111000", 83 => "00111110010100100110101011111001", 
    84 => "10111110101101010010111001000001", 85 => "10111110011110101111111000111010", 86 => "10111110010011000000001110110110", 87 => "10111101101111000101101101100111", 
    88 => "00111110011101110001110001111010", 89 => "10111110011000001000100000010010", 90 => "00111110100010100001101011100100", 91 => "00111110010100000011110101011001", 
    92 => "10111110111000110001000011101001", 93 => "10111110010010110011011010100101", 94 => "10111101100110010111111110011011", 95 => "00111101110000011100111100101100", 
    96 => "10111110001111001110010101110010", 97 => "00111111000000110010110100111110", 98 => "10111110100101111000011101011000", 99 => "10111110100111100101101110111010", 
    100 => "10111110110110101011010010001001", 101 => "00111110001011001011111000101111", 102 => "00111110111011101110001010111011", 103 => "10111111000110111110011111000110", 
    104 => "00111110000101010110100101000111", 105 => "10111110001111000101000111101100", 106 => "10111101000000100000101010010101", 107 => "00111110101101100111010111110111", 
    108 => "10111110100100111001100100000110", 109 => "10111110100110010001010100111001", 110 => "10111111000000010011010000011011", 111 => "10111110010001011111101011001110", 
    112 => "10111110011011101111101101010110", 113 => "00111101000001010100110010000011", 114 => "10111110011101000010001010010010", 115 => "00111110001111000110000001010010", 
    116 => "00111001001010100000100010000100", 117 => "10111110000011011001000000101011", 118 => "00111110100010011011110011010110", 119 => "00111110101100101011001011011110", 
    120 => "00111110100111111011110110110010", 121 => "00111100100001001111010001000001", 122 => "00111110001010001100110001000100", 123 => "00111110100100011110000111010011", 
    124 => "00111110101111000101010111110111", 125 => "10111111000101010110010101001111", 126 => "10111101101111110011110100111011", 127 => "00111100010111101111010000100001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

