-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_18_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_18_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110110000011101001100100101", 1 => "10111110001011011101011010100010", 2 => "00111101101000101010001001111010", 3 => "00111100110110000110010001011011", 
    4 => "10111110101110111111001100101000", 5 => "00111110100011000011111011010011", 6 => "10111110000101101110001111100000", 7 => "10111100111101000011011011100100", 
    8 => "10111110010000110010110100000111", 9 => "10111110111000000011110011010111", 10 => "00111101011010011111011000001110", 11 => "00111101101100111111101110100000", 
    12 => "10111110110000100100110100101111", 13 => "00111101101111001101001111010110", 14 => "10111110101111100101001000110000", 15 => "00111110111111100100010110110111", 
    16 => "00111101111101001010011111011111", 17 => "00111110100000100101111011101000", 18 => "00111010100011100011001110001010", 19 => "10111101111000010110101001001000", 
    20 => "10111101100001001111101000011000", 21 => "10111101101111001111100001001100", 22 => "00111110001100111100111101010011", 23 => "00111110011011011110111000010011", 
    24 => "10111110001101000110001100010011", 25 => "10111110100110111111010101011001", 26 => "10111101110010010101111101111100", 27 => "10111110010110101001111000010000", 
    28 => "00111101101101001110000011010111", 29 => "00111101001111001000011000001000", 30 => "10111110001011001110000100001011", 31 => "00111110000011111011101000111010", 
    32 => "10111110010010011101011100100000", 33 => "00111101110010000101010111101010", 34 => "00111100001111011110001111111100", 35 => "10111110111100110110101000001100", 
    36 => "00111110101011101100110010001011", 37 => "00111101110001011111011010100001", 38 => "10111111000000001001111010010110", 39 => "10111110110011101010111100110010", 
    40 => "10111110100001001110010011000001", 41 => "00111101000100000100110111000000", 42 => "00111110100011101110111010110100", 43 => "00111110110001111001110110101110", 
    44 => "10111101100000010011100010001110", 45 => "00111100010001110101001100010000", 46 => "00111110101001111110101011110010", 47 => "10111100101101100110001110101111", 
    48 => "10111110100111110110111111001111", 49 => "00111110100100110001101000001000", 50 => "00111110100100010011110100101101", 51 => "00111110011011001011111101111111", 
    52 => "10111110100000100110001011001100", 53 => "00111101011010011110011001111011", 54 => "10111111000011001010110001011011", 55 => "10111110001110010001110001100100", 
    56 => "00111110111011110111111011000001", 57 => "10111101101011001010001110110001", 58 => "00111110000110111001101101111001", 59 => "00111101100110110111000011000100", 
    60 => "00111101101000011011001001111000", 61 => "10111110101110101011101100011111", 62 => "10111101110111111000011000000110", 63 => "00111110111000000001001110110010", 
    64 => "10111101100100011100101111011000", 65 => "10111110001011000011101000101000", 66 => "00111110100110010011011100110111", 67 => "10111101101000010111010101100011", 
    68 => "00111101110000100101101000110111", 69 => "10111110100101101100011110100001", 70 => "00111110010011001111101000000011", 71 => "00111111000001100101001100101110", 
    72 => "00111100010010001111100110101111", 73 => "00111101110000111011111110100101", 74 => "00111101000100111111010010000100", 75 => "00111110010000101000000100101100", 
    76 => "10111101100011100011101011100001", 77 => "00111100010011100001010100000001", 78 => "00111110011011111100111000100101", 79 => "10111110111001001000010110111001", 
    80 => "10111101111011010111101010111001", 81 => "10111110101101001011001111000001", 82 => "00111110101101010100110101110101", 83 => "00111110100001100011111011110010", 
    84 => "00111100110010110010011000011001", 85 => "00111110000101000100110001011101", 86 => "10111110011010111101001000100100", 87 => "00111110100011111000101011000110", 
    88 => "10111110010001010110011011110110", 89 => "00111101100011011001001100010101", 90 => "00111101011111100010011010100100", 91 => "00111101111101111001010110111110", 
    92 => "10111110110111000111010101110111", 93 => "10111101011100110100000111011011", 94 => "10111110000111100001110111100001", 95 => "00111110110001110001111010000111", 
    96 => "00111100101000110111001001111011", 97 => "00111110110101100000011011000101", 98 => "10111101110010010000110110110100", 99 => "00111101001110011011101100110000", 
    100 => "10111110100100101111101101011000", 101 => "00111110100010000110110111111001", 102 => "00111101110010001111101001100000", 103 => "00111011101000111111011001101010", 
    104 => "00111111000000000111100000001100", 105 => "10111110100000111110100010010011", 106 => "10111110101110101110010110000000", 107 => "00111101100011101110111100010100", 
    108 => "10111110001000011011100101001111", 109 => "10111101111111101000010101101000", 110 => "10111110110010101111100101001100", 111 => "10111110110101100000001000100100", 
    112 => "10111101101100100111001100001010", 113 => "00111110011110001000011101000110", 114 => "10111110101000000100100010010001", 115 => "00111110011101011001011110001101", 
    116 => "00111101100011101101001110000010", 117 => "10111110110100001111110010010011", 118 => "00111110100000110000100111101110", 119 => "10111110100000000000110111000100", 
    120 => "10111101000000110110000100001001", 121 => "00111110111010111110010000000011", 122 => "00111101011011010100100100111111", 123 => "10111100101001000001110100101011", 
    124 => "00111110100011110111000011111011", 125 => "10111110101100011010100110101111", 126 => "00111101111110010000110001001010", 127 => "00111101101100111101111000001001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

