-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_40_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_40_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101110001111101100101100010", 1 => "10111101100111111011011000000110", 2 => "00111010111111110011100111011100", 3 => "10111110000011111100010101001111", 
    4 => "10111100110111111101000110000010", 5 => "00111110000001011100010100010000", 6 => "10111110000100111011100001101111", 7 => "10111101010100110110000010011101", 
    8 => "10111110011111101001111001111000", 9 => "00111101101000000100110000001110", 10 => "10111110110001110001010010000100", 11 => "00111110110101110101100001001011", 
    12 => "00111101101100101100001101010100", 13 => "10111011100001001000011101100100", 14 => "10111110011000001010000110110110", 15 => "10111110000010111000100101011000", 
    16 => "10111101110110100110001010101111", 17 => "10111110000001100100001001111001", 18 => "00111101000000111101100101100001", 19 => "10111101110100010010110000111010", 
    20 => "00111110001001101010001111000110", 21 => "00111101011010100010110101101110", 22 => "10111110001111001111100100010011", 23 => "00111110001111001110100001101100", 
    24 => "10111110011111110101011001110001", 25 => "00111110011101101101101011110110", 26 => "10111101000010101100110010010101", 27 => "00111110000011010001011000010000", 
    28 => "10111110001111011001110000010110", 29 => "00111101110110011100000010101111", 30 => "00111110100001010011101001001000", 31 => "10111101101101000001110110110011", 
    32 => "00111101000001001100101011001101", 33 => "10111101000001011100010111000101", 34 => "00111101101110000011001011000111", 35 => "00111110101011100100010110011010", 
    36 => "10111101111101001011111011001101", 37 => "00111101100011101010101000001010", 38 => "00111110001010001000001110010101", 39 => "00111110001100110100111000001100", 
    40 => "00111110100101010001000101010000", 41 => "00111110001001011110000111101010", 42 => "10111100110001101010010011100000", 43 => "10111110000100111100011001111010", 
    44 => "10111101101011001010101011111000", 45 => "00111101011001001101001010001010", 46 => "10111110001111110110111010011011", 47 => "00111100101100110110111111000100", 
    48 => "00111110010100010111010100111010", 49 => "10111101001001000111001110010101", 50 => "10111110001011101000000011110000", 51 => "10111110100011000101001010010011", 
    52 => "10111010111101110011101001011111", 53 => "10111100111001110001010101001000", 54 => "00111110001110010101010101001100", 55 => "10111110000100010001110101011101", 
    56 => "10111100101000000011001000111010", 57 => "00111110100000000111111110111011", 58 => "00111101101011101111100111110011", 59 => "10111101001001001001011101110100", 
    60 => "10111110000011101100110101011000", 61 => "00111110001001001101011000011100", 62 => "10111101110110101110001010110111", 63 => "00111110000100101100111111010001", 
    64 => "00111110010101110111110100001001", 65 => "00111110100001001111011000000010", 66 => "10111101111101001101111100111000", 67 => "00111101101100001101100001011000", 
    68 => "10111110101000011000101111110011", 69 => "00111101100001100110011101101000", 70 => "10111101101011110000111101011011", 71 => "00111101001101001000001101101101", 
    72 => "00111011000001111011110001110111", 73 => "10111110100111100001111011000001", 74 => "10111110000110111111110101001010", 75 => "00111101111100101001110110100100", 
    76 => "10111101110110100011100111101000", 77 => "10111110000100000110010110100001", 78 => "10111101101111111011001100110001", 79 => "10111110101110001010111111000000", 
    80 => "00111100010010011101001110111010", 81 => "00111100001010100000011111100110", 82 => "10111101110011000010110011101110", 83 => "00111101001100111100010000110000", 
    84 => "10111101101011100000011101100010", 85 => "00111010100111100110100000110101", 86 => "00111100111111100101000110010101", 87 => "10111101100011110011111010110111", 
    88 => "10111110000100110000101110111111", 89 => "10111100110101101101111010011001", 90 => "00111101011001010111110100010010", 91 => "00111101111010100011000010011011", 
    92 => "00111110010101101110011000000110", 93 => "00111101101111111010001110010011", 94 => "10111110100010101000111101011010", 95 => "10111110011110100101110100110001", 
    96 => "10111101111111101110111001011010", 97 => "10111110001010001000101000010011", 98 => "00111101100000011001100000000111", 99 => "10111101000000111010110000110010", 
    100 => "00111101111111011000110010001011", 101 => "00111100111000000000010001000010", 102 => "00111100110100100111110110100001", 103 => "00111110001100010000101011101110", 
    104 => "10111110011110100101001010010001", 105 => "10111110001010110100111011100110", 106 => "00111110000000000000000011001001", 107 => "10111101000111011111111010110110", 
    108 => "10111101111000011110100111000001", 109 => "00111101100100011010101010100010", 110 => "00111110010010101111101000101000", 111 => "10111100001010010001011101110001", 
    112 => "00111110000100000100010001100010", 113 => "10111110000100111101001100100001", 114 => "00111100010000110101010011010100", 115 => "00111110101001000011011101100100", 
    116 => "00111101110001001111001111100010", 117 => "00111110001111000010111000011001", 118 => "10111110100010010110110110100101", 119 => "10111101000010110000010011100001", 
    120 => "10111110010111010111101010100100", 121 => "00111110100001000100000011000010", 122 => "00111101001110010001000110010100", 123 => "10111101101101100100010101001011", 
    124 => "10111110011110111100010110111111", 125 => "00111101000000111011010110010111", 126 => "10111110001010001010011100001010", 127 => "10111110101000011110111110000100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

