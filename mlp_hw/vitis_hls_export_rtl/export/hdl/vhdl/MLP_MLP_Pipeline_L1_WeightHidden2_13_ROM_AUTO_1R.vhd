-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_13_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_13_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110110101011000001100011111", 1 => "00111111000000101010110001010010", 2 => "00111110010010001000010100001001", 3 => "00111110100011000010011111110101", 
    4 => "00111101010100110110011110011100", 5 => "10111101100101111101110010110011", 6 => "00111110000011100111111110110100", 7 => "10111110110101101010111111110010", 
    8 => "00111110100000101001000111111110", 9 => "10111101101100001101001001100011", 10 => "00111111000010011011001000110000", 11 => "10111110100110111110010101101010", 
    12 => "10111110011011000100110100101110", 13 => "00111110101010010000010111001011", 14 => "00111101001011100011101110111010", 15 => "00111110000100001000001110111110", 
    16 => "00111110011101101101100111110110", 17 => "00111111001100100111010100100010", 18 => "00111101111110100001110110110000", 19 => "10111110100011011100010100011001", 
    20 => "00111101100000101001110011100000", 21 => "00111110010111010000101001101111", 22 => "00111110000011111100010010011110", 23 => "10111110010111000010101000011101", 
    24 => "10111100001000001000001100001101", 25 => "10111110011000110111010010100110", 26 => "00111110001011011001011110001010", 27 => "10111110010011100001000111001110", 
    28 => "00111111000010101001111011010010", 29 => "10111110111100011100110111101010", 30 => "10111110100101110111101011111011", 31 => "10111110000010011100100100110001", 
    32 => "10111110000100111011100011101001", 33 => "00111101110111111011000010100011", 34 => "10111110100001111001101010010110", 35 => "10111110000100010111011000001100", 
    36 => "00111101001100100000110010110101", 37 => "10111110111010001101101111100001", 38 => "10111111000100000011100000011100", 39 => "10111111010001000010110101001111", 
    40 => "10111110111000010000101010001010", 41 => "00111110001101010001100110001010", 42 => "00111101010100111101110111101011", 43 => "00111110000001100100011000101001", 
    44 => "00111110110101111110101100000110", 45 => "10111110010101100001111110110010", 46 => "00111110101111111010000010100011", 47 => "10111110001011101001010101010110", 
    48 => "10111110100111000101010011101101", 49 => "10111101100010101011010110101111", 50 => "00111110000100011011001001011111", 51 => "00111111010100100111001011011011", 
    52 => "10111110000100011110010111010100", 53 => "10111100100011100000100001011100", 54 => "10111101111101111101000110100111", 55 => "00111101111111010011110101001001", 
    56 => "00111101111110100111101110110110", 57 => "00111110010100101101010000011101", 58 => "10111110010001011111001011110110", 59 => "00111101101110110010011110101101", 
    60 => "00111110100011111110110111010010", 61 => "10111111001110001011000000001110", 62 => "00111110000010001101010110110111", 63 => "10111100100010100000110111101011", 
    64 => "10111111000110101001101100110011", 65 => "10111110010110100101011011000001", 66 => "10111100010111000100011111011011", 67 => "10111110101001011010011000000100", 
    68 => "00111101111001010100000001100010", 69 => "10111110111010100010100011111010", 70 => "00111110111000100110010111011010", 71 => "00111110000011110101111101000010", 
    72 => "00111110000000110110111001001011", 73 => "00111110111001110111111100110000", 74 => "00111110011101110010001010111101", 75 => "00111110010110101010111011001111", 
    76 => "00111100010100111011010000111101", 77 => "00111110111000110110110010000101", 78 => "00111110100001111111011100011100", 79 => "00111101111011000100010010001111", 
    80 => "10111110110010101000000010110111", 81 => "10111101001000001011010010111001", 82 => "00111110110111111100100110110100", 83 => "10111110001101101110100100110111", 
    84 => "00111110100110001100011010000110", 85 => "00111100101011011001101011001110", 86 => "10111110101011100000001000111000", 87 => "00111010100100001111111111101101", 
    88 => "10111110011010110001100111001110", 89 => "10111110000101000000000101011001", 90 => "10111110111011111111100001001010", 91 => "10111111000100001000101100100000", 
    92 => "10111101000110101001101010101110", 93 => "10111110111110010010111010111111", 94 => "00111111000000110000011110110000", 95 => "00111110011011000100111011111010", 
    96 => "00111101100010111001011001010000", 97 => "10111100100111011001111101100000", 98 => "10111111000001000100000100101000", 99 => "10111110000100111000100101111100", 
    100 => "10111100101100100001001011111000", 101 => "10111101101011110100011001011011", 102 => "10111101110111111101000101001111", 103 => "10111101111110100110010000111011", 
    104 => "00111110100111110110100011100011", 105 => "10111110101101100011000011101001", 106 => "10111110100101010110001001010110", 107 => "00111101001011101001111001100110", 
    108 => "00111110010101110011011000010110", 109 => "00111110001000101101001101100110", 110 => "10111110010010110100011100001100", 111 => "10111101101010101010010100000110", 
    112 => "00111101011000000101110100100101", 113 => "10111101111000001101100111001010", 114 => "10111111000011111101111110011010", 115 => "10111110101111110101111110101110", 
    116 => "00111110100100000110010111010000", 117 => "10111101011100110011001011100000", 118 => "00111110010011111110111001110101", 119 => "10111101001110010101010011101110", 
    120 => "10111101110110011101000000001000", 121 => "00111101000100110101110110011101", 122 => "00111101111010110000010111000100", 123 => "00111110100111000001000001100001", 
    124 => "00111110011011001010101110011011", 125 => "10111110100001011011111000011011", 126 => "00111111001001011111010000010000", 127 => "00111110111001111010000011000101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

