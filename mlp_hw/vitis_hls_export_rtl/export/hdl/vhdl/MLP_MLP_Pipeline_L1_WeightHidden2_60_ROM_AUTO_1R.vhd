-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_60_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_60_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111101111110011101110100000011", 1 => "00111101100101011010110011101100", 2 => "00111110011001100000011001111001", 3 => "00111110010000100000101010110010", 
    4 => "00111100111010010011100011000100", 5 => "00111100111101011101010111111011", 6 => "00111101100000011011001001000001", 7 => "00111110100000000101010000010000", 
    8 => "00111101111111100100000001011000", 9 => "10111110000111001110101110100110", 10 => "00111110100110101001110011111001", 11 => "10111110000010101100011100101000", 
    12 => "10111101101101001000100011101000", 13 => "10111110100011111101110110101101", 14 => "00111101100101110001100000011101", 15 => "00111110001011000000011110001000", 
    16 => "00111100111011101101110100101101", 17 => "10111000011111111000111010111111", 18 => "10111110011011101101101100111000", 19 => "10111110100000111101111100010110", 
    20 => "10111110101101111111110001100100", 21 => "10111110010011101101101111100001", 22 => "10111110001000111110000000100011", 23 => "10111110100000100101100010000011", 
    24 => "00111101000011111111110110000100", 25 => "10111111000001001110011011000010", 26 => "00111110010011011101001011010111", 27 => "00111101110100010111010010001010", 
    28 => "10111011000111001010010011100111", 29 => "10111101111111100001110000010001", 30 => "10111110100000011000100010010011", 31 => "00111100000000011111101011000001", 
    32 => "10111100001101111110001100111011", 33 => "00111101111010001101101110010110", 34 => "10111101101100110001100011001001", 35 => "00111100100001011001100110100101", 
    36 => "00111110111100000010101000000010", 37 => "10111110110100111100100111100101", 38 => "00111101100111101111010110100001", 39 => "10111110101110111101111110011110", 
    40 => "10111110100111000001000011100000", 41 => "00111011111101000000001101110010", 42 => "00111101111111001000100001101101", 43 => "00111110100110001011011001110111", 
    44 => "10111110101101010100111110011111", 45 => "00111101100101010001011000010000", 46 => "10111100101000010000010010000010", 47 => "00111101110101111010111101100000", 
    48 => "00111101101101101001001110100011", 49 => "10111101100011010110100011100001", 50 => "00111110000110100011000011010001", 51 => "00111101110110110001011111110001", 
    52 => "10111110010100101100111101011110", 53 => "10111110010101110000101011100111", 54 => "10111101010010001100010101010100", 55 => "00111101011110001001101011000100", 
    56 => "10111110011001111101101011000100", 57 => "10111110111001010101000011101110", 58 => "10111101111010101101000101000110", 59 => "00111100101011010111111100000100", 
    60 => "00111110100100001000000000100111", 61 => "10111110000010111100100110111110", 62 => "10111110010110110000111100101000", 63 => "00111101001101000101011110000011", 
    64 => "10111110001110110001101111100110", 65 => "10111110001001011000001000001000", 66 => "00111101101011001011110001100100", 67 => "10111110111001110011011110011110", 
    68 => "00111110001010110100111100010011", 69 => "10111110011011111101000101001110", 70 => "00111101110111010110010010001001", 71 => "10111101100011101101111011100111", 
    72 => "10111110001001100011011011100001", 73 => "00111110010110010010011111100101", 74 => "10111101110011111110001101011000", 75 => "10111110010100101110011001010100", 
    76 => "00111100111001110000110011011010", 77 => "00111110110010111011101110100010", 78 => "00111101101101010001010001001000", 79 => "00111110010111110000111100111111", 
    80 => "10111110100011000110111011110100", 81 => "10111110000000101111010110111110", 82 => "00111110011000110011110010000001", 83 => "00111101110110010110111001110110", 
    84 => "00111110100101110010100100010001", 85 => "00111110000010001001101011011011", 86 => "10111101100000001001100011010100", 87 => "00111110011111100101101001011001", 
    88 => "10111110111101101011110100001111", 89 => "00111110101101110111111110100010", 90 => "00111110011110100110111000101011", 91 => "10111110011101111111110010110001", 
    92 => "10111101011010011011111101001100", 93 => "10111101011111100010110110100011", 94 => "00111101011011010000101100001011", 95 => "00111110101011010010111001000101", 
    96 => "10111100000011111001000110011000", 97 => "00111101100110111101100100101010", 98 => "00111101111100110010110001011110", 99 => "00111110100011001001101011110110", 
    100 => "00111110011011001011000011001110", 101 => "10111101001001111111100101101001", 102 => "10111110111100010111000011111111", 103 => "00111110001011000100110010000110", 
    104 => "00111110111011111110001111011111", 105 => "10111101110111000110111111101101", 106 => "10111110110101110000000110011001", 107 => "00111110000011101110101010000011", 
    108 => "10111101101001001111000000110111", 109 => "10111101011101011000110010110101", 110 => "00111101111011000101001010000011", 111 => "10111110100100110000000001001101", 
    112 => "00111110000101110010111010000111", 113 => "00111110101011110101111011001101", 114 => "10111110011111011101000010111001", 115 => "10111101101110111110110101110101", 
    116 => "10111101100000110011111010111111", 117 => "10111110100011010000010111000001", 118 => "10111101110110111101001110101001", 119 => "10111110100100000001111011101110", 
    120 => "10111101010011010011111100000011", 121 => "10111010111100010001100110110011", 122 => "10111101011000111011001000100111", 123 => "00111010010111100001011101001101", 
    124 => "10111101100111011100000110101011", 125 => "10111101100111011111010110010000", 126 => "00111110001010010001111100001000", 127 => "00111110110101011111000101110110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

