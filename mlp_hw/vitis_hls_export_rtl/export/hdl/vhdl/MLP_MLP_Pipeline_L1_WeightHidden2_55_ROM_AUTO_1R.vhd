-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_55_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_55_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110100010000001100110101111", 1 => "10111110011000001100010001110110", 2 => "00111101111101110000010101000100", 3 => "10111011100011001111010010000101", 
    4 => "10111110010110101110010010110101", 5 => "10111101110100110001101100011001", 6 => "10111101110111111101011001001011", 7 => "00111101010100100111100000111000", 
    8 => "10111101010100110101100111010010", 9 => "00111100010011101001011001110001", 10 => "00111111001000001101110100000010", 11 => "10111111001001000101110010010011", 
    12 => "10111110110001001010011000010000", 13 => "00111110100011111100101011100101", 14 => "00111101000001001100111110110011", 15 => "10111110001000110110111101000110", 
    16 => "00111100111000000000001110111100", 17 => "00111110100000000011101001101011", 18 => "10111101001011110101111010011101", 19 => "00111101000011011111110000010100", 
    20 => "10111110100010111000110110100001", 21 => "00111010100111100111011111111011", 22 => "00111111000100001011000100010101", 23 => "00111011111011110000001111000100", 
    24 => "00111110101001011000101010111101", 25 => "10111110110010000111000100010000", 26 => "10111101000111011010001000011010", 27 => "10111110101110100011111000011101", 
    28 => "00111110111000100001101010011110", 29 => "10111110011101110111010111100110", 30 => "10111110101011010110000011111101", 31 => "00111110010111100011111101101110", 
    32 => "00111101111101101111000010101010", 33 => "00111110010000100110000011011010", 34 => "10111100101010011110010101000001", 35 => "10111111000000001110110100000100", 
    36 => "00111110011111101011111101011010", 37 => "10111110000100010100111101001101", 38 => "10111110110010100010100011110000", 39 => "10111110101011101010000011111000", 
    40 => "10111111000100111011001111011111", 41 => "10111110001100111010110101000001", 42 => "00111110000110001101100111011001", 43 => "10111101011001001101111110000000", 
    44 => "00111101101101000111010010101011", 45 => "10111110101011000100000000110000", 46 => "00111111001101111101001000111011", 47 => "00111100111011001111010100110110", 
    48 => "10111110110000010001011110000000", 49 => "00111110110000010101000101000111", 50 => "10111110000101000011110100001000", 51 => "00111110101111000011101010101011", 
    52 => "10111101000100011100001011101001", 53 => "00111110011111110110011010000011", 54 => "10111110101011110001011011000101", 55 => "00111110000101101100000010001100", 
    56 => "00111110101110111000001110000100", 57 => "10111110001101011111110010001111", 58 => "00111110010011011001101111000100", 59 => "00111110000110111001111000110100", 
    60 => "10111101000010110001010100001111", 61 => "10111110100111010000011001100010", 62 => "00111101010111000101101001001110", 63 => "10111110010011001010010001110100", 
    64 => "10111110110011001100100001010011", 65 => "10111110100010011001111111010000", 66 => "00111101100111000011001011001100", 67 => "10111100011010100110011011011100", 
    68 => "00111110111100000001110101101110", 69 => "10111110000000000000010011000001", 70 => "00111110010110001011010100110110", 71 => "00111101100101011011100101001101", 
    72 => "00111101100110111010000000010110", 73 => "00111110001101000110100010001101", 74 => "00111100111011111100010010111111", 75 => "00111110000011111010110011110001", 
    76 => "00111100100111001001100000111100", 77 => "00111110111101111000000110100010", 78 => "10111110001110011101001011100011", 79 => "00111110100000000111011000001001", 
    80 => "00111110011111100000101010010001", 81 => "10111110000101101111111010101110", 82 => "00111101111110001011010111010011", 83 => "10111100100111110111000110011010", 
    84 => "10111110011000000001110110100110", 85 => "10111110000100011001101110110100", 86 => "10111110000111111000111101010101", 87 => "10111101100101000101001111010111", 
    88 => "00111110011110000001111000001011", 89 => "10111110001010101111100000100110", 90 => "10111101101001100000100010110110", 91 => "10111101111001001011100101000111", 
    92 => "10111110110001010110101000100010", 93 => "10111110100100001010111110001110", 94 => "00111110100101101111011100011111", 95 => "00111110001101111101100100101010", 
    96 => "00111110000011101101110100001101", 97 => "00111111000000010101000001101111", 98 => "10111110100110111010010111001101", 99 => "10111110101001100100010000001101", 
    100 => "10111110000000101111010011101101", 101 => "00111100011100110111100001111101", 102 => "00111110010010110100011001100100", 103 => "10111110110111011011011100101100", 
    104 => "00111101100011001100100101101110", 105 => "10111100101001000101010000110011", 106 => "00111100011001011100001100010010", 107 => "00111111000011110000011001101111", 
    108 => "10111100011001110010100100100011", 109 => "10111101000111000011000010111110", 110 => "10111110110111010110010100101111", 111 => "10111110001000001110110011110011", 
    112 => "10111110101111101110010100001110", 113 => "00111101101010111110000001101110", 114 => "10111110100000001111100010110101", 115 => "10111101111010101001000101111010", 
    116 => "10111101101101101100001110011100", 117 => "10111110100010111001101111000001", 118 => "00111111000000110001011010010111", 119 => "00111110011111011000110110011101", 
    120 => "00111110100110010000110001101101", 121 => "10111110101000001010101111101001", 122 => "10111101100101111100010011011111", 123 => "00111110110111001110110101110010", 
    124 => "00111110110100001101011000010101", 125 => "10111110110001111001010101111101", 126 => "00111110001001110101111101000010", 127 => "00111110111011111000001111110101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

