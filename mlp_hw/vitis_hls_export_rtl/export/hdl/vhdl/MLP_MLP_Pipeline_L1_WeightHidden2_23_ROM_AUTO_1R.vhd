-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_23_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_23_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110011111101101100001011000", 1 => "10111110010001010111000110011001", 2 => "10111110010001001001110010110110", 3 => "00111110001011100001101111111000", 
    4 => "10111101001100001100100011010101", 5 => "00111101000010011100011111011010", 6 => "10111110010001010000101010110010", 7 => "10111101000110100011100101111111", 
    8 => "10111111000000001100011111000100", 9 => "10111101111001101101010001010100", 10 => "00111110011100000101101101001000", 11 => "00111101011011100010110101110000", 
    12 => "00111101100101110001110010000010", 13 => "10111110001100100011011001001010", 14 => "10111101110010101110110010010001", 15 => "10111111000111011010010100101100", 
    16 => "10111101101100010010001010001011", 17 => "10111110011101100111100100110101", 18 => "00111110000011000001100111000111", 19 => "10111110100101101001111100011001", 
    20 => "10111100111101110011001000011011", 21 => "00111110010110011001101111001011", 22 => "00111101100110111000100111111000", 23 => "10111101101111001000101011001101", 
    24 => "10111100111101000111010001001100", 25 => "00111110100100010011111011011010", 26 => "00111101010100110111110010011010", 27 => "10111110001110010010010001001101", 
    28 => "10111101001100100001010100011001", 29 => "10111101010000101010101001010011", 30 => "00111101110010010011000100111011", 31 => "10111101110101101011001110011010", 
    32 => "10111110100010010001011000000001", 33 => "00111110011111011010101011110101", 34 => "10111110101000001011100111110000", 35 => "00111111000001010001001001010111", 
    36 => "10111110111001000000001010000100", 37 => "00111110101111101101100000000110", 38 => "00111011101110010001110100011000", 39 => "10111101001000010101000110001001", 
    40 => "00111110101000100110110100111110", 41 => "00111110010110000101011100110010", 42 => "00111110010110001010010110110100", 43 => "10111110010110100010001110010100", 
    44 => "00111101100100111110111100011111", 45 => "10111100100000001101001111111011", 46 => "00111101100101011000001010010011", 47 => "10111101111001110111010010110000", 
    48 => "00111101011001101100000000001101", 49 => "00111110000111011000001011110110", 50 => "10111111000001000111100000011110", 51 => "00111100000011011111110100101110", 
    52 => "00111111000000000011010000010011", 53 => "00111101111001101101100110000010", 54 => "00111101101100011101001010101010", 55 => "10111101101101010011010000011110", 
    56 => "10111110011000110011100000110110", 57 => "00111110100111001010110011100000", 58 => "00111110101100110111111111110000", 59 => "00111110101010010001110000100110", 
    60 => "10111110111011001101010101000100", 61 => "10111110100011111010010010010000", 62 => "10111110111011010010111100101010", 63 => "00111110000100010011111000100111", 
    64 => "00111110011011000100000000010000", 65 => "00111110101110001111110100100110", 66 => "10111110100010001101010011000011", 67 => "10111110101100001101010110111011", 
    68 => "10111110110000101110100011100101", 69 => "10111101010000000001010100010110", 70 => "00111110010001010100010111101110", 71 => "00111110010100000000101100011101", 
    72 => "10111011110011010100100010011110", 73 => "10111110110010000100000111101111", 74 => "10111100100011100001011011001001", 75 => "00111111000010011010111000001000", 
    76 => "10111110001100111000000101001000", 77 => "00111110101011110000100000010101", 78 => "10111101110111000000011001000001", 79 => "10111110101100101001101000100001", 
    80 => "10111101110110111111110111011101", 81 => "10111100110110010001000000111101", 82 => "10111110110000100000100010110111", 83 => "00111101111111110001011010000110", 
    84 => "00111101111101100100110111101010", 85 => "00111101100001101100010010111010", 86 => "00111101100000000110110100111010", 87 => "00111100010010111011110011000010", 
    88 => "10111100000000010110101101010000", 89 => "10111110001110110000100111100010", 90 => "00111110011000101100101010100100", 91 => "00111110100001001001010010010001", 
    92 => "00111110011011000101000001000001", 93 => "10111101100010001010010000101010", 94 => "00111110100100110111100000111001", 95 => "10111110110001000000011001100000", 
    96 => "00111110010011111000111000110101", 97 => "00111001100100001101001001101000", 98 => "10111100111110001110011100101101", 99 => "10111110010111100111011001011011", 
    100 => "00111101010101010010011001001101", 101 => "00111110000100111111111111010001", 102 => "00111110101101001111000100100100", 103 => "00111110001111011100011100111110", 
    104 => "10111111001010001010100011001100", 105 => "10111110100111000000011000111010", 106 => "10111110000100010001111110010000", 107 => "00111101111101000000010110101010", 
    108 => "10111110110010110001100101011111", 109 => "00111110110111001010001101001001", 110 => "00111110111000101111011011101101", 111 => "00111011110100100011001101101001", 
    112 => "00111110110000000010010010001011", 113 => "00111100001010000101001011111011", 114 => "10111110001010110011010111011100", 115 => "00111110011100000110101101100100", 
    116 => "10111100100110011000100011100111", 117 => "10111101011011010001010100001001", 118 => "10111110011011100010110111001110", 119 => "10111110010110000101001000011010", 
    120 => "10111110001001100001111011100101", 121 => "00111110101010101001011001111001", 122 => "10111100111000111111110110011011", 123 => "00111101110101000100111101010101", 
    124 => "10111110100110100001100111011011", 125 => "00111110010011010101000101000000", 126 => "10111101110001100101001011001101", 127 => "10111101100110010101100111100011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

