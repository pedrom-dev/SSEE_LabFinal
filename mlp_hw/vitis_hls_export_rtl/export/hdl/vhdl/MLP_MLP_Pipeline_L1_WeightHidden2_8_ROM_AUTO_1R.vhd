-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_8_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_8_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110100001110101010000100110", 1 => "00111110110011010111101010100010", 2 => "00111110111011010011011001010100", 3 => "10111100011010101110010010010000", 
    4 => "00111101010110101101101011000101", 5 => "00111101111010011100000110000000", 6 => "10111011100110101001111111010100", 7 => "00111110100000010101100101001101", 
    8 => "00111110100110011101000110100101", 9 => "00111101100101101001001111000000", 10 => "00111110000101000110111010001010", 11 => "10111101010010001110000011001101", 
    12 => "00111100011010011001110010100111", 13 => "10111110100010110011110101110010", 14 => "00111110100100011001111001010110", 15 => "00111110111101110101001111101010", 
    16 => "00111010111101000011111110101101", 17 => "00111101010101011011101111001100", 18 => "10111110011100100101101011101011", 19 => "10111110111010100111111111010010", 
    20 => "10111101100100001101000000001100", 21 => "00111110001010010110101001111101", 22 => "00111110001001101110100100101100", 23 => "10111110010100001001111110111010", 
    24 => "00111110011010100101101111110010", 25 => "10111110111111100101100010101001", 26 => "00111100100011011011111001100100", 27 => "00111110001001100010110111110001", 
    28 => "00111110010101001100111001000100", 29 => "10111110001100010100111100001000", 30 => "10111110011011010110111010000110", 31 => "00111101111100001100110010000110", 
    32 => "00111101111110111001111010101010", 33 => "00111110001100010011011110110100", 34 => "00111110000110000101000101011101", 35 => "00111100001000000101100010100010", 
    36 => "00111111000001011101011000101100", 37 => "10111111001100011111010100110001", 38 => "10111100001010011111111001110110", 39 => "10111110010010111110101010001110", 
    40 => "10111110101001011110001000100001", 41 => "10111110000100110100110111001001", 42 => "10111110011011001000010111010010", 43 => "00111110110000000100001100000100", 
    44 => "10111110000001011000000010000000", 45 => "00111101100101000110011100001101", 46 => "00111101011100101101000111110010", 47 => "00111110101000010010001100110100", 
    48 => "00111101101001111000011010111110", 49 => "10111100100011101001110001101011", 50 => "00111110101000111001000000000101", 51 => "00111101001110010100011100000110", 
    52 => "10111110110101101101011101010010", 53 => "10111110010100111110001110110100", 54 => "00111110000011010001110111111000", 55 => "00111101110101001100011000110000", 
    56 => "10111101001011110110011111000010", 57 => "10111110101001001100001101100110", 58 => "10111101111100111010010010101111", 59 => "10111110010011011110111011010000", 
    60 => "00111110111101010010101100000110", 61 => "00111101010100011000000110010101", 62 => "00111100100011001010111101101011", 63 => "00111011100011110010110101011010", 
    64 => "10111110011110111000111100101101", 65 => "10111110011100101101110010111001", 66 => "00111101000100100111100010111111", 67 => "10111110101010100011100011010010", 
    68 => "00111110110101011010101111001100", 69 => "10111110011111100110001100101101", 70 => "00111110100000110001001100110001", 71 => "10111110100011101000110000010100", 
    72 => "10111110011111000101100011000000", 73 => "00111110001111101101110110101000", 74 => "10111101010111110001110000001101", 75 => "10111110011110110010000001100101", 
    76 => "10111101101100010010101000011110", 77 => "00111100011010001001011111000100", 78 => "10111101111111011010001110010100", 79 => "00111110111111100111111010110101", 
    80 => "10111110011011101111110001000100", 81 => "00111110010100011110111010101110", 82 => "00111101110000110000001010000010", 83 => "10111101001000001100100101101110", 
    84 => "00111110001110111110000101000011", 85 => "00111101100010011111100000011000", 86 => "10111110100100011001011001001011", 87 => "00111110100110011000010111100011", 
    88 => "10111110101010111010101001000110", 89 => "00111101100010010111011010000101", 90 => "10111110000000010101100110011010", 91 => "10111110111101110100010110111001", 
    92 => "00111101010011101010010111110110", 93 => "10111110000100010000001001100100", 94 => "00111110010101001011000000010000", 95 => "00111110011110100110101000101000", 
    96 => "10111100011001101100111111011000", 97 => "10111110101100000101101010000101", 98 => "10111101101001101101100001111011", 99 => "00111110100111000100001110000100", 
    100 => "00111111000000011100011010101111", 101 => "10111110010101110001110011011100", 102 => "10111110111000100010111101011001", 103 => "00111101011101001000101110001011", 
    104 => "00111110111000100110001001010101", 105 => "10111011110100111011010000000111", 106 => "10111110010001000110010000001000", 107 => "00111101110001100111111001000100", 
    108 => "00111110101101111000001110100111", 109 => "10111110000001001111010000001110", 110 => "00111101001011111010100011010101", 111 => "00111101110110110010110000001111", 
    112 => "00111101111101010001011100101101", 113 => "00111010100001101110111001000110", 114 => "00111100111010000100011011100001", 115 => "10111110100101000110101110111000", 
    116 => "10111101100010100011011110011101", 117 => "10111011110000011101101101010111", 118 => "10111110001111110111010111000000", 119 => "10111110100011001100101100001001", 
    120 => "10111101110010111100111101011100", 121 => "10111110110010111111111110011010", 122 => "10111101000001110100010011011000", 123 => "00111011110111001011100110010100", 
    124 => "00111101110100100010110100011100", 125 => "00111110010000110111010011010010", 126 => "00111110100011001111001001111011", 127 => "00111110110111111000100101100000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

