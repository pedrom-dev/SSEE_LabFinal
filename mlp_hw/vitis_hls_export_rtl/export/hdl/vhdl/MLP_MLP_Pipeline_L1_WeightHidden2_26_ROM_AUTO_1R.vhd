-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_26_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_26_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110101011100111001011111011", 1 => "00111110010101110011000011111100", 2 => "00111101100000100100110001110001", 3 => "00111111000000001000001011001011", 
    4 => "00111110100010110001101110000010", 5 => "10111100110001001110010011000001", 6 => "10111100110100110110010101001000", 7 => "00111110001101000110011010000111", 
    8 => "00111110101110101100001111110001", 9 => "00111101110001010000000110000110", 10 => "00111110110100110101011110001101", 11 => "10111110110100010011000011110010", 
    12 => "00111101111011100011011101000100", 13 => "10111110111001000111100100101010", 14 => "00111110101011100010100111001001", 15 => "00111110110000111001011000010100", 
    16 => "10111101101100100101011101011100", 17 => "00111101011100111000110000110101", 18 => "10111110100010111010000001000010", 19 => "10111110010011110111000100011010", 
    20 => "10111110011010111000100011100000", 21 => "10111110001010111101010000100111", 22 => "10111110101011001001100100100111", 23 => "10111110110000010101101010110000", 
    24 => "00111110010011011001111001011100", 25 => "10111110110110111101010000110001", 26 => "00111110111010000001100111110000", 27 => "00111101101110001000110011111000", 
    28 => "10111011100000101000100011110001", 29 => "00111100101101010100010010000101", 30 => "10111110010010111011011001011100", 31 => "10111101101011000101001110001010", 
    32 => "10111100110000100010000011100111", 33 => "00111110000000011101111100111100", 34 => "00111101000110111001110110101101", 35 => "00111101101000000011011010100110", 
    36 => "00111110111011101110001111010100", 37 => "10111111000010011111001010100110", 38 => "00111101011010110101110011001011", 39 => "10111110001111111001000000110110", 
    40 => "10111110010001011011111010011101", 41 => "10111110000110001001000000001111", 42 => "10111101110001100110011111001001", 43 => "00111110101111000111101011101111", 
    44 => "10111110000111011111100111101010", 45 => "00111101011000111001000110001010", 46 => "00111101110010111000111000111010", 47 => "00111110000000111010101101011000", 
    48 => "00111011101110000010001010110101", 49 => "10111110100011100111110100011110", 50 => "00111110011100011001001110010100", 51 => "10111101011000100011100000110110", 
    52 => "10111110010111111100110110001100", 53 => "10111110010010011000001010010011", 54 => "00111101101110000101010110111011", 55 => "00111110010110101010010101111110", 
    56 => "10111111000100110010100101001001", 57 => "10111111000011110001000010110011", 58 => "10111110011000100011010001001011", 59 => "10111101101000100110101010100000", 
    60 => "00111110111011101000000110010000", 61 => "10111100001111011001010110100010", 62 => "00111100110111101101100000110010", 63 => "10111110001010101000111100101101", 
    64 => "10111101111001001100010110100001", 65 => "10111110010001111110010001101001", 66 => "10111001001101001100010100101100", 67 => "10111110010110101000001001100110", 
    68 => "00111101110011010110111111011100", 69 => "10111101101010011011001100010110", 70 => "00111101110101100100011101100111", 71 => "10111110111011011111101101011010", 
    72 => "00111101101011001111011111001100", 73 => "00111110110110010101000110100000", 74 => "10111110000011111100000000101101", 75 => "10111111000011000101111101001010", 
    76 => "00111100011011011001010000100010", 77 => "00111110100010101100110111101111", 78 => "00111110010000101001010100010101", 79 => "00111111000011011000101010000011", 
    80 => "10111110001010101001001110001000", 81 => "10111100011000111001010001111010", 82 => "00111011001000100100111001101010", 83 => "10111101000011000111101001001100", 
    84 => "00111110000100111011110110110011", 85 => "00111101111000000001110101000011", 86 => "00111110100010010011001101010101", 87 => "00111110000101110011011100010100", 
    88 => "10111101111101011111111110011110", 89 => "00111110010100011000011011100001", 90 => "00111101100100110111100110110001", 91 => "10111110111000010100011010001011", 
    92 => "10111101101010001111101100100001", 93 => "00111101011010110110011000010100", 94 => "00111110101101111011111010100000", 95 => "00111110100101011010000010000011", 
    96 => "10111100101111100000110001110101", 97 => "10111110000110111110101101000000", 98 => "00111110011010110100111101010100", 99 => "00111110101011100010000110111100", 
    100 => "00111110101000110110111111001101", 101 => "10111110100101010000011011101000", 102 => "10111111001011101110000110111100", 103 => "00111110100010000010010110000100", 
    104 => "00111111000001001000101101100100", 105 => "00111110010111101011101110111111", 106 => "10111101111111001010001010010110", 107 => "00111110000000011101100010100101", 
    108 => "00111110101010001101011000110110", 109 => "00111101001110101011110011010101", 110 => "10111101001100111010011001010011", 111 => "00111100101000100100001110011100", 
    112 => "10111110001001101011110010010010", 113 => "00111110000010001111000011111010", 114 => "00111100011010110101101000110110", 115 => "10111110111101001110110001011110", 
    116 => "10111110100111010110010000101010", 117 => "10111110001000001010011100001110", 118 => "10111100010001101110001100101001", 119 => "10111101110111011011000010110001", 
    120 => "00111101110110001110011011000101", 121 => "10111101111000001100000000111011", 122 => "10111110000011110100110011111011", 123 => "00111100100101000111111000110010", 
    124 => "00111110000011000101101010111110", 125 => "00111110011111000001101111110111", 126 => "00111110000101010100010001001010", 127 => "00111110111011101110011011110111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

