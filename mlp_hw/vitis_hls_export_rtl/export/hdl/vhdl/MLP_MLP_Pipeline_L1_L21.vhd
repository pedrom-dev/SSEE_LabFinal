-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_MLP_Pipeline_L1_L21 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    l_hidden2_outputs_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    l_hidden2_outputs_ce0 : OUT STD_LOGIC;
    l_hidden2_outputs_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    l_out_outputs_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    l_out_outputs_ce0 : OUT STD_LOGIC;
    l_out_outputs_we0 : OUT STD_LOGIC;
    l_out_outputs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1655_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1655_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1655_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1655_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1655_p_ce : OUT STD_LOGIC;
    grp_fu_1659_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1659_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1659_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1659_p_ce : OUT STD_LOGIC;
    grp_fu_1663_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1663_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1663_p_ce : OUT STD_LOGIC;
    grp_fu_1666_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1666_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1666_p_ce : OUT STD_LOGIC;
    grp_fu_1669_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1669_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1669_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1669_p_ce : OUT STD_LOGIC;
    grp_fu_1673_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1673_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1673_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1673_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1673_p_ce : OUT STD_LOGIC;
    grp_fu_1677_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1677_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1677_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1677_p_ce : OUT STD_LOGIC );
end;


architecture behav of MLP_MLP_Pipeline_L1_L21 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln59_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal WeightOut_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal WeightOut_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal BiasesOut_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal BiasesOut_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln59_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_368_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_372_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_2_fu_222_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln59_2_reg_377 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln59_2_reg_377_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln62_1_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_392_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal mul_i2_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_1_fu_288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_out_outputs_addr_1_reg_421 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal l_out_outputs_addr_1_reg_421_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal aux_1_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal BiasesOut_load_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal aux_2_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bitcast_ln16_1_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_2_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_i2_reg_451 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i_i2_reg_456 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_i_i2_reg_461 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln63_1_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln62_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal aux_fu_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_aux_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_66 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln62_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten140_fu_74 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln59_1_fu_190_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten140_load : STD_LOGIC_VECTOR (10 downto 0);
    signal l_hidden2_outputs_ce0_local : STD_LOGIC;
    signal WeightOut_ce0_local : STD_LOGIC;
    signal BiasesOut_ce0_local : STD_LOGIC;
    signal l_out_outputs_we0_local : STD_LOGIC;
    signal l_out_outputs_ce0_local : STD_LOGIC;
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln59_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln59_fu_214_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_230_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln63_fu_243_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln63_fu_247_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln16_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bit_sel2_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln16_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln16_fu_323_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln16_2_fu_327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter12_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to13 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component MLP_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MLP_fexp_32ns_32ns_32_8_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MLP_ddiv_64ns_64ns_64_22_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component MLP_MLP_Pipeline_L1_L21_WeightOut_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_MLP_Pipeline_L1_L21_BiasesOut_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MLP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    WeightOut_U : component MLP_MLP_Pipeline_L1_L21_WeightOut_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => WeightOut_address0,
        ce0 => WeightOut_ce0_local,
        q0 => WeightOut_q0);

    BiasesOut_U : component MLP_MLP_Pipeline_L1_L21_BiasesOut_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => BiasesOut_address0,
        ce0 => BiasesOut_ce0_local,
        q0 => BiasesOut_q0);

    flow_control_loop_pipe_sequential_init_U : component MLP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    aux_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                aux_fu_62 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                aux_fu_62 <= grp_fu_1655_p_dout0;
            end if; 
        end if;
    end process;

    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln59_fu_184_p2 = ap_const_lv1_0))) then 
                    i_fu_70 <= select_ln59_2_fu_222_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten140_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln59_fu_184_p2 = ap_const_lv1_0))) then 
                    indvar_flatten140_fu_74 <= add_ln59_1_fu_190_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten140_fu_74 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln59_fu_184_p2 = ap_const_lv1_0))) then 
                    j_fu_66 <= add_ln62_fu_258_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_66 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                BiasesOut_load_reg_431 <= BiasesOut_q0;
                add_i_i2_reg_456 <= grp_fu_1673_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                aux_1_reg_426 <= grp_fu_1655_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                aux_2_reg_436 <= grp_fu_1655_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv_i_i2_reg_451 <= grp_fu_1666_p_dout0;
                icmp_ln59_reg_368 <= icmp_ln59_fu_184_p2;
                icmp_ln59_reg_368_pp0_iter10_reg <= icmp_ln59_reg_368_pp0_iter9_reg;
                icmp_ln59_reg_368_pp0_iter11_reg <= icmp_ln59_reg_368_pp0_iter10_reg;
                icmp_ln59_reg_368_pp0_iter12_reg <= icmp_ln59_reg_368_pp0_iter11_reg;
                icmp_ln59_reg_368_pp0_iter1_reg <= icmp_ln59_reg_368;
                icmp_ln59_reg_368_pp0_iter2_reg <= icmp_ln59_reg_368_pp0_iter1_reg;
                icmp_ln59_reg_368_pp0_iter3_reg <= icmp_ln59_reg_368_pp0_iter2_reg;
                icmp_ln59_reg_368_pp0_iter4_reg <= icmp_ln59_reg_368_pp0_iter3_reg;
                icmp_ln59_reg_368_pp0_iter5_reg <= icmp_ln59_reg_368_pp0_iter4_reg;
                icmp_ln59_reg_368_pp0_iter6_reg <= icmp_ln59_reg_368_pp0_iter5_reg;
                icmp_ln59_reg_368_pp0_iter7_reg <= icmp_ln59_reg_368_pp0_iter6_reg;
                icmp_ln59_reg_368_pp0_iter8_reg <= icmp_ln59_reg_368_pp0_iter7_reg;
                icmp_ln59_reg_368_pp0_iter9_reg <= icmp_ln59_reg_368_pp0_iter8_reg;
                icmp_ln62_1_reg_392 <= icmp_ln62_1_fu_264_p2;
                icmp_ln62_1_reg_392_pp0_iter10_reg <= icmp_ln62_1_reg_392_pp0_iter9_reg;
                icmp_ln62_1_reg_392_pp0_iter11_reg <= icmp_ln62_1_reg_392_pp0_iter10_reg;
                icmp_ln62_1_reg_392_pp0_iter12_reg <= icmp_ln62_1_reg_392_pp0_iter11_reg;
                icmp_ln62_1_reg_392_pp0_iter13_reg <= icmp_ln62_1_reg_392_pp0_iter12_reg;
                icmp_ln62_1_reg_392_pp0_iter1_reg <= icmp_ln62_1_reg_392;
                icmp_ln62_1_reg_392_pp0_iter2_reg <= icmp_ln62_1_reg_392_pp0_iter1_reg;
                icmp_ln62_1_reg_392_pp0_iter3_reg <= icmp_ln62_1_reg_392_pp0_iter2_reg;
                icmp_ln62_1_reg_392_pp0_iter4_reg <= icmp_ln62_1_reg_392_pp0_iter3_reg;
                icmp_ln62_1_reg_392_pp0_iter5_reg <= icmp_ln62_1_reg_392_pp0_iter4_reg;
                icmp_ln62_1_reg_392_pp0_iter6_reg <= icmp_ln62_1_reg_392_pp0_iter5_reg;
                icmp_ln62_1_reg_392_pp0_iter7_reg <= icmp_ln62_1_reg_392_pp0_iter6_reg;
                icmp_ln62_1_reg_392_pp0_iter8_reg <= icmp_ln62_1_reg_392_pp0_iter7_reg;
                icmp_ln62_1_reg_392_pp0_iter9_reg <= icmp_ln62_1_reg_392_pp0_iter8_reg;
                icmp_ln62_reg_372 <= icmp_ln62_fu_208_p2;
                icmp_ln62_reg_372_pp0_iter1_reg <= icmp_ln62_reg_372;
                l_out_outputs_addr_1_reg_421 <= zext_ln59_fu_296_p1(4 - 1 downto 0);
                l_out_outputs_addr_1_reg_421_pp0_iter10_reg <= l_out_outputs_addr_1_reg_421_pp0_iter9_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter11_reg <= l_out_outputs_addr_1_reg_421_pp0_iter10_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter12_reg <= l_out_outputs_addr_1_reg_421_pp0_iter11_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter13_reg <= l_out_outputs_addr_1_reg_421_pp0_iter12_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter3_reg <= l_out_outputs_addr_1_reg_421;
                l_out_outputs_addr_1_reg_421_pp0_iter4_reg <= l_out_outputs_addr_1_reg_421_pp0_iter3_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter5_reg <= l_out_outputs_addr_1_reg_421_pp0_iter4_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter6_reg <= l_out_outputs_addr_1_reg_421_pp0_iter5_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter7_reg <= l_out_outputs_addr_1_reg_421_pp0_iter6_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter8_reg <= l_out_outputs_addr_1_reg_421_pp0_iter7_reg;
                l_out_outputs_addr_1_reg_421_pp0_iter9_reg <= l_out_outputs_addr_1_reg_421_pp0_iter8_reg;
                mul_i2_reg_406 <= grp_fu_1659_p_dout0;
                select_ln59_2_reg_377 <= select_ln59_2_fu_222_p3;
                select_ln59_2_reg_377_pp0_iter1_reg <= select_ln59_2_reg_377;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                div_i_i2_reg_461 <= grp_fu_1677_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_2_reg_446 <= grp_fu_1669_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter12_stage1, ap_idle_pp0_0to11, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to13, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to13 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter12_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    BiasesOut_address0 <= zext_ln59_fu_296_p1(4 - 1 downto 0);

    BiasesOut_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            BiasesOut_ce0_local <= ap_const_logic_1;
        else 
            BiasesOut_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    WeightOut_address0 <= zext_ln63_1_fu_253_p1(11 - 1 downto 0);

    WeightOut_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            WeightOut_ce0_local <= ap_const_logic_1;
        else 
            WeightOut_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln59_1_fu_190_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten140_load) + unsigned(ap_const_lv11_1));
    add_ln59_fu_202_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln62_fu_258_p2 <= std_logic_vector(unsigned(select_ln59_fu_214_p3) + unsigned(ap_const_lv8_1));
    add_ln63_fu_247_p2 <= std_logic_vector(unsigned(tmp_6_fu_230_p3) + unsigned(zext_ln63_fu_243_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln59_reg_368)
    begin
        if (((icmp_ln59_reg_368 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter12_stage1_assign_proc : process(ap_enable_reg_pp0_iter12, icmp_ln59_reg_368_pp0_iter12_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln59_reg_368_pp0_iter12_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter12_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter12_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to13_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to13 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_aux_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, aux_fu_62, ap_block_pp0_stage1, grp_fu_1655_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_aux_load <= grp_fu_1655_p_dout0;
        else 
            ap_sig_allocacmp_aux_load <= aux_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten140_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten140_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten140_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten140_load <= indvar_flatten140_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_66;
        end if; 
    end process;

    bit_sel2_fu_309_p3 <= bitcast_ln16_fu_306_p1(31 downto 31);
    bitcast_ln16_1_fu_335_p1 <= xor_ln16_2_fu_327_p3;
    bitcast_ln16_fu_306_p1 <= aux_2_reg_436;

    grp_fu_129_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, select_ln59_1_fu_288_p3, aux_1_reg_426, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_129_p0 <= aux_1_reg_426;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_129_p0 <= select_ln59_1_fu_288_p3;
        else 
            grp_fu_129_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_129_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, mul_i2_reg_406, BiasesOut_load_reg_431, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_129_p1 <= BiasesOut_load_reg_431;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_129_p1 <= mul_i2_reg_406;
        else 
            grp_fu_129_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1655_p_ce <= ap_const_logic_1;
    grp_fu_1655_p_din0 <= grp_fu_129_p0;
    grp_fu_1655_p_din1 <= grp_fu_129_p1;
    grp_fu_1655_p_opcode <= ap_const_lv2_0;
    grp_fu_1659_p_ce <= ap_const_logic_1;
    grp_fu_1659_p_din0 <= l_hidden2_outputs_q0;
    grp_fu_1659_p_din1 <= WeightOut_q0;
    grp_fu_1663_p_ce <= ap_const_logic_1;
    grp_fu_1663_p_din0 <= div_i_i2_reg_461;
    grp_fu_1666_p_ce <= ap_const_logic_1;
    grp_fu_1666_p_din0 <= tmp_2_reg_446;
    grp_fu_1669_p_ce <= ap_const_logic_1;
    grp_fu_1669_p_din0 <= ap_const_lv32_0;
    grp_fu_1669_p_din1 <= bitcast_ln16_1_fu_335_p1;
    grp_fu_1673_p_ce <= ap_const_logic_1;
    grp_fu_1673_p_din0 <= conv_i_i2_reg_451;
    grp_fu_1673_p_din1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_1673_p_opcode <= ap_const_lv2_0;
    grp_fu_1677_p_ce <= ap_const_logic_1;
    grp_fu_1677_p_din0 <= ap_const_lv64_3FF0000000000000;
    grp_fu_1677_p_din1 <= add_i_i2_reg_456;
    icmp_ln59_fu_184_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten140_load = ap_const_lv11_500) else "0";
    icmp_ln62_1_fu_264_p2 <= "1" when (add_ln62_fu_258_p2 = ap_const_lv8_80) else "0";
    icmp_ln62_fu_208_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv8_80) else "0";
    l_hidden2_outputs_address0 <= zext_ln62_fu_238_p1(7 - 1 downto 0);
    l_hidden2_outputs_ce0 <= l_hidden2_outputs_ce0_local;

    l_hidden2_outputs_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            l_hidden2_outputs_ce0_local <= ap_const_logic_1;
        else 
            l_hidden2_outputs_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    l_out_outputs_address0 <= l_out_outputs_addr_1_reg_421_pp0_iter13_reg;
    l_out_outputs_ce0 <= l_out_outputs_ce0_local;

    l_out_outputs_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            l_out_outputs_ce0_local <= ap_const_logic_1;
        else 
            l_out_outputs_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    l_out_outputs_d0 <= grp_fu_1663_p_dout0;
    l_out_outputs_we0 <= l_out_outputs_we0_local;

    l_out_outputs_we0_local_assign_proc : process(ap_enable_reg_pp0_iter13, icmp_ln62_1_reg_392_pp0_iter13_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln62_1_reg_392_pp0_iter13_reg = ap_const_lv1_1))) then 
            l_out_outputs_we0_local <= ap_const_logic_1;
        else 
            l_out_outputs_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln59_1_fu_288_p3 <= 
        ap_const_lv32_0 when (icmp_ln62_reg_372_pp0_iter1_reg(0) = '1') else 
        ap_sig_allocacmp_aux_load;
    select_ln59_2_fu_222_p3 <= 
        add_ln59_fu_202_p2 when (icmp_ln62_fu_208_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln59_fu_214_p3 <= 
        ap_const_lv8_0 when (icmp_ln62_fu_208_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_6_fu_230_p3 <= (select_ln59_2_fu_222_p3 & ap_const_lv7_0);
    trunc_ln16_fu_323_p1 <= bitcast_ln16_fu_306_p1(31 - 1 downto 0);
    xor_ln16_2_fu_327_p3 <= (xor_ln16_fu_317_p2 & trunc_ln16_fu_323_p1);
    xor_ln16_fu_317_p2 <= (bit_sel2_fu_309_p3 xor ap_const_lv1_1);
    zext_ln59_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln59_2_reg_377_pp0_iter1_reg),64));
    zext_ln62_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln59_fu_214_p3),64));
    zext_ln63_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_247_p2),64));
    zext_ln63_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln59_fu_214_p3),11));
end behav;
