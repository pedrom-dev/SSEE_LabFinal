-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_30_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_30_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110011011001111110001101100", 1 => "10111110100101110110011100000101", 2 => "10111110100001110001110101011010", 3 => "00111110011001101010110011100001", 
    4 => "00111101100001101100110111101101", 5 => "10111110011000011100000001011010", 6 => "10111110001110011000010000011001", 7 => "00111110100001110110101100111111", 
    8 => "10111101101110001011101111111100", 9 => "00111110000000110100110110000110", 10 => "10111110001110100010000001111100", 11 => "00111110010101010000011110011011", 
    12 => "00111110011000001100111111111011", 13 => "10111110000010010010100001000010", 14 => "00111101110100111010011111001000", 15 => "10111101011001010010111101001000", 
    16 => "10111110011101000001110001010110", 17 => "10111110111101000010000101111101", 18 => "10111110100100111010001111110011", 19 => "00111110100111001101010111100000", 
    20 => "10111110000111001011101110001010", 21 => "10111110101011010011100001001001", 22 => "10111110111000000011100100101010", 23 => "10111110000001001101000000001011", 
    24 => "00111110010100010100010000001001", 25 => "00111100111001110110111010101111", 26 => "00111101111010100110100001110111", 27 => "00111110000001101000110100011000", 
    28 => "10111111000111111101111011011100", 29 => "00111110000010110110110000001011", 30 => "00111110010000100110101011111000", 31 => "00111011100100111101011001100001", 
    32 => "00111100000000100111111011110110", 33 => "00111101001010011100000000011101", 34 => "10111101110010001011001000110011", 35 => "00111110100001101001111001001110", 
    36 => "00111100110111110000110100100110", 37 => "00111110101111110110101100000010", 38 => "00111110111010101000001000011010", 39 => "00111110101100011000000001011110", 
    40 => "00111110101001100101000001101101", 41 => "10111110000000000010001100111001", 42 => "10111101000001001001011101100100", 43 => "10111101100100111000011100110100", 
    44 => "10111110100111101101110011111100", 45 => "00111110010111100101111011101000", 46 => "10111110010100001111110100100110", 47 => "00111101000100111101001111001111", 
    48 => "00111110100000100011000010110001", 49 => "10111110000011001100000111001111", 50 => "10111110010101000010110100000111", 51 => "10111111001011011101010110001111", 
    52 => "00111110100001101000000100011001", 53 => "10111101110001111011100110101101", 54 => "00111101100100011010010010110111", 55 => "10111110011111111001001010001010", 
    56 => "10111110111100000000100100101000", 57 => "10111110100100000110001010110000", 58 => "00111101101100101001001010011010", 59 => "00111101100110011011011010011101", 
    60 => "10111110001110011001110011010010", 61 => "00111110100110011111111110010011", 62 => "10111110010101100001001110111010", 63 => "10111110001100001010101101111101", 
    64 => "00111110100010011100001101000001", 65 => "00111110001010100101000001111101", 66 => "10111100101010001101110011011000", 67 => "00111110010110010001011001000110", 
    68 => "10111110101000001001100111110001", 69 => "00111110101101100101110011010011", 70 => "10111110110100010110100001000010", 71 => "10111110100000111001110000001010", 
    72 => "10111110011001000101011011010000", 73 => "10111110101011110001000110011110", 74 => "10111101111111010100101101000001", 75 => "10111101101001111001110100011100", 
    76 => "00111101100110011110111101000001", 77 => "00111100011010110100001100011010", 78 => "10111101000110001010111000110101", 79 => "10111101001000010101100111001101", 
    80 => "00111110000011001101000010010000", 81 => "10111110011101101100011010111011", 82 => "10111110101010100100001011010111", 83 => "00111110010100111000010110101001", 
    84 => "10111101100101101110010010000110", 85 => "10111011100001101010011111111010", 86 => "00111110101100111011101000111000", 87 => "10111101111000001011011101000110", 
    88 => "00111110000111111110111010100000", 89 => "00111110011011011011001011000110", 90 => "00111111000011010111111000000011", 91 => "00111110110011101110000101010111", 
    92 => "00111100100100000011000010011111", 93 => "00111110100110010110010100111011", 94 => "10111101000011000111000010000001", 95 => "10111110011110010011101010111110", 
    96 => "00111101001111111100100000010100", 97 => "00111101001100010100100100010001", 98 => "00111110101011101000000101111011", 99 => "00111100110011101001110011010001", 
    100 => "00111100100010101000101000111101", 101 => "00111101111001011011110111101110", 102 => "00111100111101101111101100101111", 103 => "00111110011001010000100000100101", 
    104 => "10111101110011100100001110101000", 105 => "00111110100100100001110001000111", 106 => "00111110010011000100101111110100", 107 => "10111110000011000111010011010001", 
    108 => "10111110101010110011111011001000", 109 => "00111110001001011100110101110101", 110 => "00111110010001101111010001010000", 111 => "00111100101110110011111001010101", 
    112 => "00111110010110011000111110011101", 113 => "10111100110101100101001100101001", 114 => "00111110100001100111000110001001", 115 => "00111110000101000011101100101110", 
    116 => "10111110100110000010111101001011", 117 => "10111101101111101000100010100000", 118 => "10111100000010100001011001101111", 119 => "10111101010111111011000000000110", 
    120 => "10111011110101100000101100111010", 121 => "00111101001111001111111101110010", 122 => "10111101111001010110100101000001", 123 => "10111110000010101110101110100111", 
    124 => "10111110101111010011101111110010", 125 => "00111110100111011001110000110011", 126 => "10111111000000110101101000010000", 127 => "10111110100111010110001000001101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

