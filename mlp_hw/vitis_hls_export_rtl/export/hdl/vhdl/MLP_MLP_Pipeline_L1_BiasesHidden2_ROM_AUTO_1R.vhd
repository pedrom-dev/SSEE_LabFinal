-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_BiasesHidden2_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_BiasesHidden2_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111101101110011000101111101101", 1 => "10111101110110011110001001100111", 2 => "00111101001001000001101011001011", 3 => "10111101010111000010110101000110", 
    4 => "10111101011000110011111111110101", 5 => "00111101100010001000001001110110", 6 => "00111100110011111101110011010001", 7 => "10111100001001100111111101001101", 
    8 => "00111100001101101000011010100111", 9 => "10111101101000111110000101000010", 10 => "10111100111010111111010000110011", 11 => "00111101011111001110100011011100", 
    12 => "10111101010111111010111110110110", 13 => "00111101100001011100011010101001", 14 => "10111101100000111100010101000101", 15 => "10111100100100011000000011110001", 
    16 => "10111101110111011010111100011010", 17 => "00111101101101111011100111101101", 18 => "00111100111110011100001001111011", 19 => "10111100100110001011110010010010", 
    20 => "00111101110000001101111101100000", 21 => "00111101110011101001001110001101", 22 => "10111100100001100101111101011100", 23 => "00111101110000110000110110010011", 
    24 => "00111100011111100001011001001011", 25 => "10111100000111011111010000100001", 26 => "10111100100100001110011110110111", 27 => "00111011111100101000011100100110", 
    28 => "10111101100011010011111010010100", 29 => "00111100110000001110011010000100", 30 => "10111101101011101001101100110110", 31 => "00111100001011110010011011111011", 
    32 => "10111100101110001001010001010101", 33 => "00111101000110010100001011111010", 34 => "00111101011100111110101100110000", 35 => "10111110000101101111011111011110", 
    36 => "00111101001011000000110110101110", 37 => "00111011001111010110110100101000", 38 => "10111101101010001010100100111011", 39 => "00111101000110111011100110001110", 
    40 => "10111101100010001101011101010011", 41 => "00111100101001100101001111100010", 42 => "00111101011110000111000011111001", 43 => "10111101000100110000011100101110", 
    44 => "10111100100010011100010011101010", 45 => "10111101010101111000010111100001", 46 => "10111100100011110101010111001000", 47 => "00111101001110001100010100101001", 
    48 => "10111110000001000000001100100110", 49 => "10111101100010110110010100101110", 50 => "00111101111011100000101010100101", 51 => "10111101010111001001010010100110", 
    52 => "10111101111110001001000101101101", 53 => "10111101100000100110011011000000", 54 => "10111101111011101111100110101101", 55 => "10111101001001001101011101000011", 
    56 => "10111100111101110010100111110100", 57 => "00111101001000110000010101101101", 58 => "10111100111010110100000010011011", 59 => "00111101000101011101100000100010", 
    60 => "00111100110010000110101100100110", 61 => "10111110000000100100011110101001", 62 => "00111101100000111010001011000011", 63 => "00111101100100101111111101110100", 
    64 => "00111011100111100000011101100101", 65 => "10111100101111110011010101100001", 66 => "00111101100000111100001010000111", 67 => "10111100100101010111010001010100", 
    68 => "10111101110010110001111100010011", 69 => "10111101011010100011010110011110", 70 => "10111101100101110100100011001111", 71 => "00111101001000011110111000100111", 
    72 => "00111101110011010001111010000111", 73 => "00111100100010101000001110100110", 74 => "00111101100101011011011001001100", 75 => "10111101101011010100111011110101", 
    76 => "10111101011110110000010101011100", 77 => "10111101110001001011001010011111", 78 => "10111100110010011010100110110100", 79 => "10111101000111100001001100000110", 
    80 => "00111101010011111111110100110000", 81 => "00111100110100111001101110110000", 82 => "00111100111101011001100011010011", 83 => "00111101001010001001111000011001", 
    84 => "10111100100110111111000011101010", 85 => "10111101101101011010000101111101", 86 => "00111101010001010000000110000000", 87 => "10111101100101111001110101110000", 
    88 => "00111011111101001110100110011011", 89 => "00111101011000000111001110010111", 90 => "00111101100100110101100010011111", 91 => "00111101010110011101011100010111", 
    92 => "10111101111111010000110101000000", 93 => "00111101001111011000011100111000", 94 => "10111101111000111100110000101100", 95 => "00111101111100011001011010101010", 
    96 => "10111101010001010111100001011000", 97 => "00111110000001000110101100100110", 98 => "10111101100111110010011110101001", 99 => "10111110000011011111111000110111", 
    100 => "10111110001010000011001101010110", 101 => "10111011000100011110011010110110", 102 => "00111101110011011100101001110011", 103 => "10111100001101010110110100001000", 
    104 => "10111011101001100011110101111110", 105 => "00111101010000101101010010100101", 106 => "00111101110100111000100101111001", 107 => "00111011110100100010111000110100", 
    108 => "10111101101000100010001011100110", 109 => "10111101110010001100110001011100", 110 => "10111110000001111000100011000110", 111 => "10111101100101000110001011111010", 
    112 => "10111101101011110010011110011001", 113 => "10111101101010101100110110001001", 114 => "00111011000010001110101100010110", 115 => "00111101111101100011100011100000", 
    116 => "10111101001100101110101011111001", 117 => "10111101100001110110000110100011", 118 => "00111101110101011011101010000000", 119 => "10111100001011001011101101010101", 
    120 => "00111101001011011100010110000111", 121 => "00111101010100001010001110100010", 122 => "00111101011011111011110100101111", 123 => "10111101101100100111100100111101", 
    124 => "00111100110000001000110101100111", 125 => "10111100111111000100001011001011", 126 => "00111101100101111011001101110011", 127 => "10111100110101010110100000010100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

