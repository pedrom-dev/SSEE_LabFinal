-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_38_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_38_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111100110011000110001110111100", 1 => "00111110000110111110101010101001", 2 => "00111110010011110001100001110110", 3 => "10111011001110111111101010011000", 
    4 => "10111010111100010011011110010000", 5 => "10111100111101010000110000111100", 6 => "00111101101100101111110111110111", 7 => "00111101001010111001001100011100", 
    8 => "00111101111101101101111100001011", 9 => "10111101100001001100010100001010", 10 => "10111101011000111101011011010111", 11 => "00111101010110111101011100000100", 
    12 => "00111011110101111010011010011011", 13 => "10111101100000011010000000110101", 14 => "10111010000110110110011011001110", 15 => "00111100111001111001011000110011", 
    16 => "10111011111000000000000001011011", 17 => "10111101010001100110010011101111", 18 => "00111110010110101100110000111000", 19 => "10111101101011001101100011010010", 
    20 => "00111110100110010111000011010011", 21 => "00111110100100100111111110100010", 22 => "00111101100111011001001101101101", 23 => "10111110001010000100010001110000", 
    24 => "00111101100110001111101010101001", 25 => "00111101110100110101001101000100", 26 => "10111110001010011100000001010010", 27 => "10111110000100110111011100001100", 
    28 => "00111110100000011111000100000100", 29 => "10111101010100110110101010110110", 30 => "00111100101000011001011000010010", 31 => "10111010110000001010101001010101", 
    32 => "10111110001010010101010001110000", 33 => "00111110010001001111011110101111", 34 => "10111110000100110111011100011101", 35 => "00111110000010111001001100010011", 
    36 => "10111110100011001001010110111010", 37 => "00111100111100010000110010000100", 38 => "10111110000110100110111000001001", 39 => "00111110010111000111011011100110", 
    40 => "00111110000111101010010101100111", 41 => "10111101100000100111101000101100", 42 => "10111101111010110101110101110101", 43 => "10111101101111110001000101001101", 
    44 => "00111110100010011100011110111001", 45 => "00111101010001010000011011010000", 46 => "10111100000000101110001011110100", 47 => "00111110000001010110010001011100", 
    48 => "10111100101100101110110010000011", 49 => "10111110000011100110110011001001", 50 => "10111100101111001111101000101100", 51 => "00111101100110001010101011001101", 
    52 => "00111101110101000000001001100010", 53 => "10111110001001110101100100110101", 54 => "00111101010101111110111010101001", 55 => "10111101011011010111011010100011", 
    56 => "00111110001110000010100010000001", 57 => "00111101101111101110011001001101", 58 => "00111101111001110001000111010110", 59 => "10111110000111001010100000011110", 
    60 => "00111110011000011101100010001101", 61 => "10111110010100000011010010001101", 62 => "10111100100100110111011100110110", 63 => "00111101100011001001110011101101", 
    64 => "00111110001001110011011000000011", 65 => "10111100111010111011010110010110", 66 => "10111100011001111001101001001110", 67 => "00111101100100110101101110111100", 
    68 => "10111101101001000011011100001110", 69 => "00111011110101101100011011100001", 70 => "10111101001000001001001000001110", 71 => "00111110000101001011100101000101", 
    72 => "10111101100111111110100100001001", 73 => "00111011101111111100010010010001", 74 => "00111101000110110100101011010100", 75 => "00111010100100110110100101010100", 
    76 => "10111101101000000011111010111111", 77 => "10111011000001011101010101101101", 78 => "10111110001101100111001100100111", 79 => "10111101101001011100010101010111", 
    80 => "10111100011011101010000100011100", 81 => "00111110001100000101111010111101", 82 => "10111101110101111100111101100001", 83 => "10111101000100100100011010011111", 
    84 => "00111101101111001100110111011001", 85 => "00111101101011000111000011010011", 86 => "10111110001000100101001111111111", 87 => "00111100101010100111110110100010", 
    88 => "00111101111100001010000100001010", 89 => "10111101110110101110111100101100", 90 => "10111110101011011111110100110111", 91 => "00111100100010000101101100100011", 
    92 => "00111011101111111010000110010110", 93 => "10111101100111010111000111100010", 94 => "00111100111011011100110010010111", 95 => "10111110000111011100000100001011", 
    96 => "00111101110100001111010000100101", 97 => "10111101101110000001110001001101", 98 => "10111011101111000110010000011111", 99 => "10111110000010101000101101100110", 
    100 => "00111101110001010011110011000111", 101 => "10111101100010101001101111111000", 102 => "00111110011110001010110010011101", 103 => "10111101110101000101000010111010", 
    104 => "10111110100100000101001000001001", 105 => "00111110000001001101110010001000", 106 => "00111110011011100001111100011000", 107 => "00111100111000100100001111000010", 
    108 => "00111110001001011010110001010011", 109 => "00111011000111110101101101111010", 110 => "00111110000110100000111010111110", 111 => "00111110010100101100111000000010", 
    112 => "10111101010100101011010010110000", 113 => "10111110010001001101000011010011", 114 => "00111110001111011001011011010011", 115 => "10111101100100010001011101010110", 
    116 => "10111010101111101101111101100010", 117 => "00111110000111110100001000110010", 118 => "00111110000010010010100000001010", 119 => "10111101111111001100110111001010", 
    120 => "10111101110000101100101101010000", 121 => "10111110000111101011010101011110", 122 => "10111101111100000000100111000100", 123 => "10111101001011001101001100010101", 
    124 => "00111101111101000100111110110110", 125 => "00111110000010001011010111000011", 126 => "00111101000011000111101111100111", 127 => "00111011101101010100110010111110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

