-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_36_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_36_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111101110110011110111000011111", 1 => "10111101001000011111011111000010", 2 => "10111110001001101111011011010111", 3 => "10111110100110011000001101011100", 
    4 => "00111101111011001101111010001001", 5 => "10111110001010111110111110001101", 6 => "00111100111111110000011011100001", 7 => "00111101111101000000111110010100", 
    8 => "10111101001110100000000100001101", 9 => "00111110010010110101101110110011", 10 => "10111110010101111011001111010110", 11 => "10111101101100110100010011010110", 
    12 => "00111110000100000111001111001011", 13 => "00111101100000101101001100101001", 14 => "00111101101100001011001000011010", 15 => "10111110110100011011101010101001", 
    16 => "10111110001000110001101001110010", 17 => "10111110101110101000001100111011", 18 => "00111101000100001111100110011101", 19 => "00111110001010110000010011110010", 
    20 => "00111101000101110100111111101011", 21 => "00111101110010010101111000100011", 22 => "00111101111010011000001011000100", 23 => "00111101111101000010110111110010", 
    24 => "00111100100010111000100000001001", 25 => "00111110100001111111101110111100", 26 => "10111110001010000000010001000111", 27 => "10111101100010101000000001001101", 
    28 => "10111101111100001111000101110010", 29 => "00111110011101110101101100101010", 30 => "00111101101101101111110111100001", 31 => "00111101110010001000100101101001", 
    32 => "00111110101100100001110101001111", 33 => "10111101110100000101100101110100", 34 => "00111101011110111001110011110010", 35 => "00111101001001100010010000011101", 
    36 => "10111110100101000111110100101000", 37 => "00111101011100000000100010000110", 38 => "00111110101000010011000100111100", 39 => "00111110111100110111101111100111", 
    40 => "00111101101001101100011110001000", 41 => "10111101111110100100110110011100", 42 => "10111110100001110010000101100100", 43 => "10111110100111010100101000010101", 
    44 => "00111100100001101110010001010101", 45 => "10111101101111011000110011010001", 46 => "10111011111111001110111010101001", 47 => "00111101010011001101110111001100", 
    48 => "00111100001000001101000111110100", 49 => "10111101111100000110001110010000", 50 => "10111110011100011011010100100010", 51 => "10111110101101110000100010100011", 
    52 => "00111110100001011111010011000110", 53 => "10111101101101111010100100000100", 54 => "00111110011111011000000111000101", 55 => "00111110000011111001111011000001", 
    56 => "10111101100011111000101001110011", 57 => "00111101110000011000011101101011", 58 => "00111110000100001000100011001101", 59 => "10111110011010000011100110000111", 
    60 => "10111110100011001010100011001100", 61 => "00111110110010000011111001100011", 62 => "00111101111101100110010101011111", 63 => "10111110100101111111110100110010", 
    64 => "00111110000110011111000101001000", 65 => "00111010101100001100101100111001", 66 => "10111110100011111101010010011000", 67 => "00111110100100111100101111001010", 
    68 => "00111101110100001101010010000001", 69 => "00111110101011111010100100110011", 70 => "10111110011110111000111011111111", 71 => "10111110100001100110111110101010", 
    72 => "10111100100000010111100110101000", 73 => "10111101111001011010111101110011", 74 => "10111100010000001000110010011000", 75 => "10111101101001010001111000011111", 
    76 => "00111101110111000011101110101000", 77 => "10111110100010011110101111110110", 78 => "10111110111001111001110100001000", 79 => "00111110000011011011110011000001", 
    80 => "00111110110011011100100101001001", 81 => "00111110011111001101011111101110", 82 => "10111110101011011000110100110101", 83 => "10111110001100100010011111111101", 
    84 => "10111110001100100111110111010110", 85 => "10111110010010011110011111000000", 86 => "00111110000011111010000001010011", 87 => "10111110010111110101100111001011", 
    88 => "00111110110011101011110011101111", 89 => "10111110010110111101101101001101", 90 => "10111110000110010101011010100011", 91 => "00111110010000010011110010111100", 
    92 => "00111110010000011000011111111001", 93 => "00111101110000011110110100111010", 94 => "10111110010011001101111100111000", 95 => "10111110110011110111101001000100", 
    96 => "10111101110110001111010100010001", 97 => "10111101110111110010000101001101", 98 => "00111110010100110110011000001111", 99 => "10111110001001110011110111111100", 
    100 => "00111101000100001011000111110001", 101 => "10111110000100001111000001111001", 102 => "00111110011001110011011011001101", 103 => "10111110010110001000010001010001", 
    104 => "10111111000000110100101101010110", 105 => "00111110010001011101001100010100", 106 => "00111110101010000100100101111000", 107 => "00111110000101100000010000100101", 
    108 => "00111101001100101110010000011111", 109 => "00111101011000110111111100001110", 110 => "00111110000011101110100111101001", 111 => "00111110100011110100110001011010", 
    112 => "10111110011110101000100000110111", 113 => "10111110100001100000001100111110", 114 => "00111110101111111111100110111111", 115 => "10111101100001010101101001010101", 
    116 => "10111110001101000011101010111000", 117 => "00111110001111010000111110000010", 118 => "10111101011010111010010010011001", 119 => "00111101111011010000000000000001", 
    120 => "00111101110100111011010110101101", 121 => "10111111000010010101111001001100", 122 => "10111100101110110100100000111011", 123 => "00111101100000001001011110011010", 
    124 => "10111011001000010110111101010001", 125 => "00111110000000001001000000000000", 126 => "10111110101101101111000100010111", 127 => "10111110001110010101100010010011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

