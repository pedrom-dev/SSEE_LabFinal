-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_10_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_10_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111100110110110100100011001100", 1 => "00111110100111010000011111101010", 2 => "00111110000011100111001010110010", 3 => "10111101000000100000011001110011", 
    4 => "10111100011110111111011001000110", 5 => "10111100110101010111100001000111", 6 => "00111110000011101010011101000101", 7 => "00111110100010100111101001100010", 
    8 => "00111110110101010011110010110000", 9 => "10111101100001011001110111101111", 10 => "10111110011011010100011101110101", 11 => "00111101110000000001110001101000", 
    12 => "10111101010001011001110010001101", 13 => "00111101100101111011111110110010", 14 => "10111101110101100011010100100001", 15 => "00111111010101011001001000000101", 
    16 => "00111110000010011110000001111010", 17 => "10111101001011100100011110010011", 18 => "10111110011110010100011001011010", 19 => "00111110100011011101100001011011", 
    20 => "10111100111110000000100100000001", 21 => "10111110101101111001000000110001", 22 => "10111110001000011101001000000111", 23 => "00111110000110011010010000000110", 
    24 => "00111110010010011010101101001001", 25 => "10111110110010001110111101101100", 26 => "00111101011110000001000010011000", 27 => "00111110101000001010001111110111", 
    28 => "10111110110100010100011111011111", 29 => "00111101001100110011111001101001", 30 => "10111110011100111001001010001111", 31 => "00111101100110000101101111001110", 
    32 => "00111110010001101101011011001001", 33 => "10111110001110010010100000111111", 34 => "00111101111110001001001100000101", 35 => "10111110101100001011110111011110", 
    36 => "00111111001100010011011001111011", 37 => "10111110110111100101100010001001", 38 => "00111101100001100101011010010010", 39 => "10111110000010110000010110100000", 
    40 => "10111110011000001010010000001000", 41 => "10111110010001010111010100110011", 42 => "10111110011010011000011111101011", 43 => "00111110110001001111110001011111", 
    44 => "10111110110001011001001101110101", 45 => "00111110101011010000101100101011", 46 => "10111101100100100111100000111111", 47 => "00111110010010100100101001100111", 
    48 => "00111110001001000000010000100000", 49 => "10111101110111001101100101101011", 50 => "00111111001010101110001010110110", 51 => "10111110100010010001110111011011", 
    52 => "10111111000001011110110110001111", 53 => "10111110010111111100011000111001", 54 => "10111110000000001000001101011010", 55 => "00111100011011111100001001010000", 
    56 => "10111100010100010010010001100000", 57 => "10111111000000000010001000101110", 58 => "10111110110011101101100111111101", 59 => "10111110011101001111101110101011", 
    60 => "00111111000100101100111111101111", 61 => "00111110101010001010110011100100", 62 => "00111110010011100010010100001011", 63 => "10111110000001111001011010101011", 
    64 => "10111110100110001110010100000010", 65 => "10111110100101001101101010110110", 66 => "00111110100010011010000011001100", 67 => "00111110011111110101000000000011", 
    68 => "00111110001011011111111101110010", 69 => "10111100101000111111001101001111", 70 => "10111110101001001110000000100111", 71 => "10111110001001110011100111110101", 
    72 => "10111110001000001100001011001111", 73 => "00111101111001001101011100000110", 74 => "10111100011100011110010000010011", 75 => "10111111001111100100000100001101", 
    76 => "00111100100111010000000011100111", 77 => "10111110011001111111111011000010", 78 => "00111110000100011000110100110001", 79 => "00111110010000100011000100100010", 
    80 => "10111101000101111010001100100110", 81 => "10111110011111100011000111000000", 82 => "00111110101110100000000001010110", 83 => "00111100010111001011000100110001", 
    84 => "00111101011001011010111000000010", 85 => "10111101001110010100101101110110", 86 => "10111100000001110010000000110000", 87 => "10111011011101001110001101101100", 
    88 => "10111101000100110010010011110110", 89 => "00111110110001010110101101010000", 90 => "00111101100010001110111000011000", 91 => "10111110011101100001111101000011", 
    92 => "10111110110110110100111100110101", 93 => "00111110000000010110111010100000", 94 => "10111110100110110011110001101010", 95 => "00111110101101000100110000001010", 
    96 => "10111101000101101101110000001101", 97 => "10111011101110110111101100010011", 98 => "00111110001101111110000010011010", 99 => "00111110101011100011101100110110", 
    100 => "10111110011000011010111111010010", 101 => "00111101011011101110100010010011", 102 => "10111111000110110000110010111100", 103 => "00111101100111010010100101011000", 
    104 => "00111111010001011010100010101110", 105 => "00111110101110000001111100111010", 106 => "00111100111011101111111100111001", 107 => "10111110110010000111000010100000", 
    108 => "00111101101010000101110110010111", 109 => "10111110101011010011010110011111", 110 => "10111110100010110000011001100010", 111 => "10111110000010100110111010100100", 
    112 => "10111101010010101001001110000010", 113 => "00111101001010010000101110100010", 114 => "10111100011111111100011011001010", 115 => "10111110011101110010001001110101", 
    116 => "00111100111010011101011110000110", 117 => "10111110010111001101110011001100", 118 => "00111110000011010000110100110111", 119 => "10111011110010011011100111001000", 
    120 => "00111101111100000100000100000110", 121 => "10111101010000110011110010001000", 122 => "10111100110111111101111001101101", 123 => "10111110010001100101011001111111", 
    124 => "10111100000011111100001000001010", 125 => "00111101011100011100010110110011", 126 => "00111110000110101010010111111101", 127 => "10111100110001010111011011110010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

