-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLP_MLP_Pipeline_VITIS_LOOP_82_1_VITIS_LOOP_83_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    image_pixels_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    image_pixels_ce0 : OUT STD_LOGIC;
    image_pixels_we0 : OUT STD_LOGIC;
    image_pixels_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MLP_MLP_Pipeline_VITIS_LOOP_82_1_VITIS_LOOP_83_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln82_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal INPUT_STREAM_TDATA_blk_n : STD_LOGIC;
    signal zext_ln89_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_66 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln83_fu_223_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln82_1_fu_165_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_74 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln82_1_fu_133_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal image_pixels_we0_local : STD_LOGIC;
    signal bitcast_ln89_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal image_pixels_ce0_local : STD_LOGIC;
    signal icmp_ln83_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln82_fu_145_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_181_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_fu_173_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_189_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln82_fu_157_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln83_fu_199_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_193_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln89_fu_212_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component MLP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component MLP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln82_fu_127_p2 = ap_const_lv1_0)) then 
                    i_fu_70 <= select_ln82_1_fu_165_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_70 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln82_fu_127_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_74 <= add_ln82_1_fu_133_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_74 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln82_fu_127_p2 = ap_const_lv1_0)) then 
                    j_fu_66 <= add_ln83_fu_223_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_66 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    INPUT_STREAM_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, INPUT_STREAM_TVALID, icmp_ln82_fu_127_p2, ap_start_int)
    begin
        if (((icmp_ln82_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            INPUT_STREAM_TDATA_blk_n <= INPUT_STREAM_TVALID;
        else 
            INPUT_STREAM_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_STREAM_TREADY_assign_proc : process(ap_CS_fsm_state1, icmp_ln82_fu_127_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln82_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            INPUT_STREAM_TREADY <= ap_const_logic_1;
        else 
            INPUT_STREAM_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln82_1_fu_133_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln82_fu_145_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln83_fu_223_p2 <= std_logic_vector(unsigned(select_ln82_fu_157_p3) + unsigned(ap_const_lv5_1));
    add_ln89_fu_212_p2 <= std_logic_vector(unsigned(zext_ln83_fu_199_p1) + unsigned(empty_fu_193_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(INPUT_STREAM_TVALID, icmp_ln82_fu_127_p2, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or ((ap_const_logic_0 = INPUT_STREAM_TVALID) and (icmp_ln82_fu_127_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln82_fu_127_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln82_fu_127_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, i_fu_70)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_74)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_state1, j_fu_66, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_66;
        end if; 
    end process;

    bitcast_ln89_fu_207_p1 <= INPUT_STREAM_TDATA;
    empty_fu_193_p2 <= std_logic_vector(unsigned(p_shl_fu_173_p3) - unsigned(p_shl1_fu_189_p1));
    icmp_ln82_fu_127_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_310) else "0";
    icmp_ln83_fu_151_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_1C) else "0";
    image_pixels_address0 <= zext_ln89_fu_218_p1(10 - 1 downto 0);
    image_pixels_ce0 <= image_pixels_ce0_local;

    image_pixels_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_pixels_ce0_local <= ap_const_logic_1;
        else 
            image_pixels_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    image_pixels_d0 <= bitcast_ln89_fu_207_p1;
    image_pixels_we0 <= image_pixels_we0_local;

    image_pixels_we0_local_assign_proc : process(ap_CS_fsm_state1, icmp_ln82_fu_127_p2, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (icmp_ln82_fu_127_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            image_pixels_we0_local <= ap_const_logic_1;
        else 
            image_pixels_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_181_p3),10));
    p_shl_fu_173_p3 <= (select_ln82_1_fu_165_p3 & ap_const_lv5_0);
    select_ln82_1_fu_165_p3 <= 
        add_ln82_fu_145_p2 when (icmp_ln83_fu_151_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln82_fu_157_p3 <= 
        ap_const_lv5_0 when (icmp_ln83_fu_151_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_fu_181_p3 <= (select_ln82_1_fu_165_p3 & ap_const_lv2_0);
    zext_ln83_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_fu_157_p3),10));
    zext_ln89_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_fu_212_p2),64));
end behav;
