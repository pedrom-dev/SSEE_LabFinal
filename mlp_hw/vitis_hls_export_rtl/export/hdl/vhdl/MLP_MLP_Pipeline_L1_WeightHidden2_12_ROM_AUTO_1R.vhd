-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_12_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_12_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110001101101110000011101000", 1 => "00111110011101111101010001000010", 2 => "00111110011011100001100010110011", 3 => "10111101001110000010011010110011", 
    4 => "10111101110011100110000110111011", 5 => "00111101001101001001011110111101", 6 => "00111110000100011000010111101111", 7 => "10111011110111010100000110111010", 
    8 => "00111110100011001100110100000001", 9 => "10111110000100000110110010101011", 10 => "00111101111011011110011111101101", 11 => "10111110000010010110010111011000", 
    12 => "10111110010011111111001000110011", 13 => "00111100111110101010001001011000", 14 => "10111101010011011000010110011010", 15 => "00111111000011100101000111110101", 
    16 => "00111110001010011011110110010011", 17 => "00111110010111011000000010011001", 18 => "10111101111010011100101100010110", 19 => "00111110011001010000100101101110", 
    20 => "10111011001001001110101011011100", 21 => "10111110010110101100000101110101", 22 => "10111101001100010100101001001010", 23 => "00111110000010000001100110100010", 
    24 => "10111100100011100110100100101010", 25 => "10111110101010011010111110101000", 26 => "00111110000110111011000110001101", 27 => "00111101100011110011000100110111", 
    28 => "10111100100100001001101100010011", 29 => "00111011111111100011110001001110", 30 => "10111110000010101001101000110010", 31 => "10111101011110010111000110100110", 
    32 => "00111110000010010010110110001100", 33 => "10111101101000111010100001100010", 34 => "00111101110001001100110001111000", 35 => "10111110111111111001001110110000", 
    36 => "00111110111100010000010001100100", 37 => "10111110101011001110101101111000", 38 => "10111110100010110100110101100111", 39 => "10111110100010111000000001111010", 
    40 => "10111110110010100000100010001101", 41 => "10111110000010100011100001100010", 42 => "00111101010001001001001100000010", 43 => "00111110010111011101011000100100", 
    44 => "00111100110101101000000101110111", 45 => "00111101100101001111111000110001", 46 => "00111110011000001010101101100010", 47 => "00111101011110001101110110110010", 
    48 => "10111110011011011011110101010111", 49 => "10111101111101011011000010100010", 50 => "00111110110000001000001110101000", 51 => "10111100110101110000101001001110", 
    52 => "10111110110101100100010000111111", 53 => "10111101001110111001100101000011", 54 => "10111110001100111000000001011101", 55 => "00111011110000100010011111011000", 
    56 => "00111100001001110101011010010001", 57 => "10111110001000111100111100111011", 58 => "10111110001100000110101010000000", 59 => "10111101100110111100011100001001", 
    60 => "00111110111000011011100110110000", 61 => "10111011110101011001110010101010", 62 => "00111110101000110110011001101100", 63 => "00111101011000101101010001011001", 
    64 => "10111110101111011111100010111000", 65 => "10111110100100010110111000000110", 66 => "00111110011001110101011101010010", 67 => "00111101110011100010001010101101", 
    68 => "00111110001111100010101001100000", 69 => "10111110000010011101010000011111", 70 => "10111011100010111001001111110010", 71 => "10111110001010011010111010100100", 
    72 => "10111101000001101010001011000100", 73 => "00111110101110000110011001000100", 74 => "10111101100100010011011000100010", 75 => "10111110100010100100011101111010", 
    76 => "00111101010010000111001011001110", 77 => "10111101000010111001000001101100", 78 => "00111110000011010010011100011100", 79 => "00111110010001011001001111111001", 
    80 => "00111101010100001111110111000101", 81 => "10111110000111000111101001111001", 82 => "00111110011100010000101000000100", 83 => "10111101111110100011110101011111", 
    84 => "00111101111011100101101111110111", 85 => "10111101101001100110101110101110", 86 => "00111101001101101100100010011100", 87 => "10111011001101010001011010100011", 
    88 => "10111100101001101111111110011001", 89 => "00111110011010100110111100110110", 90 => "10111101111100100000111110111100", 91 => "10111110011011101100000000000000", 
    92 => "10111110110100110101000111110000", 93 => "10111100010000111000001111101111", 94 => "10111101010000101011111100100111", 95 => "00111110100010011101111011011110", 
    96 => "10111101011011010100000011111110", 97 => "00111110001001101110011100001010", 98 => "00111101000000110001001111101110", 99 => "00111110001101101100101110111101", 
    100 => "10111110001110010111001101000101", 101 => "10111101001000010111000010101001", 102 => "10111110101101001101011011001000", 103 => "10111110010001011001111111001101", 
    104 => "00111111000011111100110100000101", 105 => "00111101100000010101110000011101", 106 => "10111110000100100001100000110101", 107 => "10111110011011011000010000000111", 
    108 => "00111110010111101011100010011110", 109 => "10111110100011010011011010010100", 110 => "10111110101001100010101110111010", 111 => "10111110010011011010100110000110", 
    112 => "10111101111011110111010110101101", 113 => "00111101000000110111001110000000", 114 => "10111101111011001110111010001111", 115 => "10111101101100010111001110010000", 
    116 => "00111101100111001000001000010111", 117 => "10111110100000000011100101100001", 118 => "00111110101000001111111010001011", 119 => "00111101110110011000001111111101", 
    120 => "00111110011010100001111000100111", 121 => "10111110001001101010111111101100", 122 => "00111100101100000000100100001101", 123 => "00111100100101010101010001111011", 
    124 => "00111110100110100011001000101100", 125 => "10111110001010111111000001100011", 126 => "00111110010111001110100001011000", 127 => "00111110100110000000110000011100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

