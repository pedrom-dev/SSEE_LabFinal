-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_35_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_35_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110111010011110011010100010", 1 => "00111110000011001100001011011110", 2 => "10111110001001100110110011110101", 3 => "10111110100101000001100001010111", 
    4 => "00111110100111111001110110011110", 5 => "10111100100000001010001100000011", 6 => "00111101001100010100001011111011", 7 => "10111110010111011101111101110001", 
    8 => "00111101101000101101100001101001", 9 => "00111110101110101010011100110100", 10 => "00111110001001100100111100010110", 11 => "10111101100101101011110000010100", 
    12 => "00111100100101111011100000001101", 13 => "10111101011110010001111110001100", 14 => "00111110011110110100000001011010", 15 => "10111111001000001111110110100001", 
    16 => "10111110001101100010110000101110", 17 => "00111110001110100100001101000010", 18 => "00111110011100011011111001011011", 19 => "10111101110101111100100100011110", 
    20 => "00111110011011100110110100001110", 21 => "00111101110101000010100010100001", 22 => "00111110010101110101010100000101", 23 => "00111101101101111011111010101100", 
    24 => "10111110100100001101110110000101", 25 => "00111110100111010100001011011010", 26 => "00111100010100100010111010001100", 27 => "10111101000101111110011001011011", 
    28 => "00111110110001100001111000101010", 29 => "00111101101101100100100111001001", 30 => "00111110100000000110100010111011", 31 => "10111101111011011111100011011010", 
    32 => "00111110011010110101101001111111", 33 => "10111110011100110101011011110110", 34 => "00111110001100000100011100010110", 35 => "00111101100010001000101101110111", 
    36 => "10111110111001100110100011001010", 37 => "00111110001111100010111010111100", 38 => "00111110001110111100010010000011", 39 => "00111110000010000001100111000001", 
    40 => "00111110011111100111011010011111", 41 => "10111101111101001111011111100100", 42 => "10111110100001100100001100001011", 43 => "10111110110101101011111111111000", 
    44 => "00111110110010000101011110010011", 45 => "10111110110100101001110000101100", 46 => "10111101101101001100000101110110", 47 => "10111110000101011011000001000000", 
    48 => "10111110000001111000011111100110", 49 => "10111101111100110110100100001111", 50 => "10111110100000001101001000000100", 51 => "00111110011101010010101110010010", 
    52 => "00111110000001101100010000001110", 53 => "00111110000001001111100010111101", 54 => "00111110111100001100010100111110", 55 => "00111110001100100110000100100110", 
    56 => "00111110000110101110011101010011", 57 => "00111110101001000111011001110011", 58 => "00111101111001111011100000000011", 59 => "10111011100110011011001100101111", 
    60 => "10111110101000100001111100111011", 61 => "00111110011011100000111000001111", 62 => "00111110110101011001110000101101", 63 => "10111110011001110010111100100010", 
    64 => "10111101010110011011010010011100", 65 => "00111101000000110110110110110001", 66 => "10111110010001101000000010100001", 67 => "00111101100001000010011100101000", 
    68 => "10111101101010101100010010110011", 69 => "10111011101111100101111101001100", 70 => "00111110100011001101010010011001", 71 => "10111110000100111101011001000001", 
    72 => "00111110110110010111110101010000", 73 => "00111110100000001110001000011110", 74 => "10111110001101010110010100001100", 75 => "00111110001001100011111100011011", 
    76 => "00111110000110000100000011001011", 77 => "10111101101000100000110001111011", 78 => "10111110100110111101010110010011", 79 => "00111110100100001110111011000110", 
    80 => "00111110100001011110111010111111", 81 => "00111110111011000010110111001011", 82 => "10111110001101100000100111001000", 83 => "10111110100001010111111110000000", 
    84 => "10111110010001101100101000100001", 85 => "10111110011101111000011101100111", 86 => "00111101111110111001110010001110", 87 => "10111110010011110000011000101000", 
    88 => "00111110101110100101101101111110", 89 => "10111110110100111111110111100111", 90 => "10111110101010110000001001011010", 91 => "10111110101010100110101011101011", 
    92 => "00111110110100010110110001100111", 93 => "10111101001001001111111101011011", 94 => "00111110010011111110110101000010", 95 => "10111101111001000110001101101000", 
    96 => "10111110000011001100111011001011", 97 => "10111110100001101110011100111100", 98 => "10111110000011001100110001011001", 99 => "10111110010011010010100010000100", 
    100 => "10111101100011101011001011011011", 101 => "10111110100101000101110000100011", 102 => "00111110100011101001000010000001", 103 => "10111110111010011111000110110010", 
    104 => "10111110100001101000011001010111", 105 => "10111101111001011101101111010011", 106 => "00111110001000010011110011011101", 107 => "00111101101011011100101011110011", 
    108 => "00111110110101111100010000100110", 109 => "10111101111110111010101000101101", 110 => "00111100111111010110101100010000", 111 => "00111110100111101010111010111101", 
    112 => "10111110110010011110010110100100", 113 => "10111110010101001010011011001011", 114 => "00111110010101011010101111000111", 115 => "10111101011010100010110001111111", 
    116 => "00111101110100111010110010100001", 117 => "00111110111100110111100011001110", 118 => "10111101100000101110010110011010", 119 => "00111110100011010001101010011011", 
    120 => "00111110000111100000001111111000", 121 => "10111110101111101001100000000000", 122 => "00111101110101111010111000110011", 123 => "00111110000111010001110001111011", 
    124 => "00111110101011111101100111000010", 125 => "00111100011111101011000000011111", 126 => "00111100110010001101000001101110", 127 => "10111101111101100100001011000001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

