-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_49_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_49_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111101011100001100010011001100", 1 => "10111101101001110101100011010001", 2 => "00111100001100001111010111010111", 3 => "10111110011000010111101001001111", 
    4 => "10111110101000101110001100010011", 5 => "00111101110111010010011110111010", 6 => "10111110001011111011001011001111", 7 => "10111110001011010010001110110011", 
    8 => "10111101011110101101010101100110", 9 => "00111100110000101100110110010101", 10 => "10111110111110011101001010100011", 11 => "00111110101011000111101000010101", 
    12 => "00111101101010010010100001011101", 13 => "00111100010000110110101001111000", 14 => "10111110111011001110100001101110", 15 => "00111110010010100010100110111111", 
    16 => "10111110000001101001110000011010", 17 => "00111110011001100110110011111000", 18 => "00111110100101101101111111110111", 19 => "10111101100100100000100000110011", 
    20 => "00111101111110001011111010101100", 21 => "00111110010010001010011100001010", 22 => "10111011100100110011101010000101", 23 => "00111110001011011101000111101111", 
    24 => "10111110110011000011000001110100", 25 => "10111100100110101001100100001110", 26 => "10111110100100101010001000010000", 27 => "00111110110110011010101011010111", 
    28 => "00111101011001001100111111001110", 29 => "10111101110110010101001000110010", 30 => "00111101101101011001000001001011", 31 => "10111101001111011000000110100011", 
    32 => "10111100110110100100011000100010", 33 => "10111111000000110100111010000011", 34 => "00111110000010101010111100000010", 35 => "10111101110011100101001101000011", 
    36 => "00111110011111000111100100111100", 37 => "10111110001100111010010101100100", 38 => "00111110011010110001000010110101", 39 => "10111110010111111101111011000111", 
    40 => "00111101111110000111000110010001", 41 => "00111110000100001000101101011110", 42 => "00111101100011000110011000111010", 43 => "00111110001010011001000100011111", 
    44 => "10111110011011100110010101010000", 45 => "10111101001101101101011001001011", 46 => "10111110100011000100010001001110", 47 => "00111101110101010111010111110010", 
    48 => "10111100100101000110101110000100", 49 => "10111010101110000111011011010100", 50 => "00111110100110111000001111010011", 51 => "00111110001111100100100010101100", 
    52 => "10111110101001000001111111010011", 53 => "10111101000111011111101011101010", 54 => "10111101101111000101100011011101", 55 => "00111101100001111011011110111110", 
    56 => "00111111000000010110001000110111", 57 => "00111110101000001011111100000000", 58 => "10111110100110110101010101010010", 59 => "00111010111101001100000000110001", 
    60 => "00111110011001111110110100110001", 61 => "00111110010110001100101101111011", 62 => "00111110110100100001100100010101", 63 => "00111101111110101100100010000001", 
    64 => "10111110011101001010111011001110", 65 => "10111110010101000101011110011110", 66 => "00111101110000001011111000000010", 67 => "10111101011110101111100101011011", 
    68 => "00111101110100110001111111000001", 69 => "10111110001100111101111010100100", 70 => "00111110001001000110000111101111", 71 => "00111110011100001101101101011101", 
    72 => "00111110001111010000110111100101", 73 => "00111110000100011001100001101101", 74 => "10111101010001101001001111110001", 75 => "10111110011001011101010011010111", 
    76 => "10111101001000010101100110101111", 77 => "10111110100010001101110001111100", 78 => "00111110001110100100011010100010", 79 => "10111101000100010001110001111011", 
    80 => "10111110001111101010100000011001", 81 => "00111110010000100111110110111110", 82 => "10111011011100110010111100101101", 83 => "00111110100110010011101011001010", 
    84 => "00111110010100010100000001100111", 85 => "00111101100100000101000011110101", 86 => "10111110010001001111001000000100", 87 => "00111110100110010000010110001111", 
    88 => "10111110111001111100111110010111", 89 => "10111100101110111001011110000110", 90 => "10111101101110100010010000111010", 91 => "10111100110001011010101010011111", 
    92 => "10111110001111010101100011110111", 93 => "10111100011111001110111101001111", 94 => "10111111000100011110001011000000", 95 => "00111111000010011100001001010110", 
    96 => "10111110101111010110010111011101", 97 => "00111100110110001100000000101011", 98 => "10111110000000111011000111101101", 99 => "00111110110000000110110010101010", 
    100 => "10111100010111001101101011101101", 101 => "10111101101010110000110010000010", 102 => "10111110010111001000110100011001", 103 => "10111110100000101010000100011011", 
    104 => "00111110110010010000010101111101", 105 => "10111110110100101010110101111011", 106 => "10111110000110111000001111010110", 107 => "10111110011011110101111100101100", 
    108 => "10111001101001101000111111100110", 109 => "10111110110000100110100111100010", 110 => "10111110100000111010011100011101", 111 => "10111101110101001010000010011101", 
    112 => "00111011010000101011001101101110", 113 => "00111101001101110000011100100011", 114 => "10111110000111100101010010011001", 115 => "00111110001000000011110111101101", 
    116 => "00111110011111100111011111111100", 117 => "00111101001000010110011011110000", 118 => "10111100011101101110110100100111", 119 => "00111110000110100100111001100101", 
    120 => "10111101111011011100101111111101", 121 => "00111110001101010010011001110001", 122 => "00111110110010011110010011001111", 123 => "10111110001110101011000010001011", 
    124 => "00111101100110101110010011001000", 125 => "00111101000000010110100100000001", 126 => "00111101111011100110011010101000", 127 => "10111110101011000010010000111011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

