-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_37_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_37_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111101000100010000000100010100", 1 => "10111110010011101010011111111000", 2 => "10111110010011100000100111010000", 3 => "10111110111001101001101100000010", 
    4 => "10111110100001010000010000110011", 5 => "00111110011101110110001110011110", 6 => "10111110011101111100111110001001", 7 => "10111100110111011101000111110011", 
    8 => "10111101101011101100000111111110", 9 => "10111101100010011100011110101010", 10 => "10111110011010101000101100000000", 11 => "10111101111110010100011010001011", 
    12 => "10111110010001000100110100001001", 13 => "00111110100101110010001100101101", 14 => "10111110110110011101101001100011", 15 => "10111100110100111101000111011000", 
    16 => "10111101111111010100111010010110", 17 => "00111110100110010111000001000101", 18 => "00111110111010000100010111010010", 19 => "00111101101001111000111011001010", 
    20 => "00111110001010111101101011110100", 21 => "10111101001011111000111101011111", 22 => "00111110000000110110000000110101", 23 => "00111110011110001111010010111000", 
    24 => "10111110110000111001011111000010", 25 => "10111100101010000100110101000001", 26 => "10111110110000111001101100110010", 27 => "00111101100110000000000011111100", 
    28 => "00111101111011111111011111000011", 29 => "00111101011011110101110011011100", 30 => "10111101100001000110011111101001", 31 => "00111101100000010110110100101011", 
    32 => "00111110010111010110101001110100", 33 => "10111111000000001101110000011011", 34 => "00111110011010000001111101111011", 35 => "10111111001001111011000101001100", 
    36 => "00111100111011101111011011000000", 37 => "10111100110111110001011001110011", 38 => "10111110000101111110000110110100", 39 => "10111110010101010101110010110001", 
    40 => "10111110000011110000001011101111", 41 => "10111110000010101100111111110111", 42 => "00111100100111100010001001000101", 43 => "10111101010110100111110110110010", 
    44 => "10111101110000110000000100101011", 45 => "10111110010011101000000111001101", 46 => "00111110001001000010011001110011", 47 => "10111110000101101001101000010110", 
    48 => "10111110111000101010111110000110", 49 => "00111110001011011010101100110010", 50 => "00111110100100000100100010011100", 51 => "00111110100011010110011001011000", 
    52 => "10111110001011110011111101101001", 53 => "00111110000111000010111010101011", 54 => "10111110100111100101010101111101", 55 => "00111101101011000000100000111101", 
    56 => "00111111001110010110011001001011", 57 => "00111110001000110000110010100010", 58 => "10111110000001011000111010111011", 59 => "00111100111110110010001010011011", 
    60 => "00111101100101110011111001100101", 61 => "00111110001001000000110101101111", 62 => "00111111000100100011000000000111", 63 => "10111011110010110100111011001000", 
    64 => "10111110100000101100001001100011", 65 => "10111110111011010111111001000110", 66 => "00111110011110001100001000110001", 67 => "00111110101011111010001100011101", 
    68 => "00111110010111101100010100101111", 69 => "10111110001100000101010000000001", 70 => "00111101010011111001100101010000", 71 => "00111110010110100011110010111001", 
    72 => "00111110100100101110010111110110", 73 => "00111110101100001001111110010100", 74 => "10111100111000101100010011101100", 75 => "10111110001010000101100100101000", 
    76 => "00111101100000011010010001100110", 77 => "10111110101010000011110111101110", 78 => "00111011101111101010011011000100", 79 => "00111101100100011111111011101000", 
    80 => "00111110101001100011111111110110", 81 => "00111110011010111010100001111110", 82 => "10111100110011100001000000001001", 83 => "00111101110101010000110101000011", 
    84 => "10111110000011101111100111101001", 85 => "10111101110101000111100011100101", 86 => "10111110100101101011000010100000", 87 => "10111011110101010111011000111111", 
    88 => "00111110001001101011011010100001", 89 => "10111110010110001000011011110101", 90 => "10111110000000110001111111010011", 91 => "00111101110111000011101000100001", 
    92 => "10111110101100001111110111010110", 93 => "10111101111111001001000110111101", 94 => "10111111000101100001100101110001", 95 => "00111111000100010000001101010011", 
    96 => "10111110110111100111000110001011", 97 => "00111110111000001010011001000010", 98 => "10111101110001110010001010100101", 99 => "10111101000101011100011010100001", 
    100 => "10111110101001000011010101101101", 101 => "10111101111011010101100100000100", 102 => "00111110001011100001010001000001", 103 => "10111111000111001110010011100011", 
    104 => "00111110101111001000010001000001", 105 => "10111101111101001110010000101100", 106 => "00111110000011010011111111011001", 107 => "00111101111000000111001010000000", 
    108 => "00111110000011000111000011010001", 109 => "10111110110100111001101100001000", 110 => "10111110111101110111011000000001", 111 => "10111101101010011010111010110101", 
    112 => "10111110101100111000101000100101", 113 => "10111101111101011000011000010101", 114 => "10111101010001100000110100111000", 115 => "00111010100110000011011101101111", 
    116 => "00111110001011001110001100110100", 117 => "00111101101110101101001101011111", 118 => "00111110101010110110111111100111", 119 => "00111110110010001010100000000100", 
    120 => "00111110000101011110010010011110", 121 => "00111100001110011000011001110100", 122 => "00111110101110000101111001000010", 123 => "00111101110110100110010010010101", 
    124 => "00111110111000001000111010110110", 125 => "10111110011101101010000001111010", 126 => "00111011111101110111111101111110", 127 => "10111110100011010100010100010110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

