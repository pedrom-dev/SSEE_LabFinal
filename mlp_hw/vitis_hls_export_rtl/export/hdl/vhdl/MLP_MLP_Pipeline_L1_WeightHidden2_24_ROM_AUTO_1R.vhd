-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_24_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_24_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110101110111111000110111101", 1 => "00111110010011110000001000010011", 2 => "00111101101011101000111010100000", 3 => "10111111000010000100110111011100", 
    4 => "00111110001100001111100000001001", 5 => "10111110000000011110011000010011", 6 => "10111100100000111000100000000000", 7 => "10111110010011101000101111010000", 
    8 => "10111101101001100101001001010110", 9 => "00111110101000111110101001110010", 10 => "10111011011100100111010000100110", 11 => "00111110011101011001010010101011", 
    12 => "00111110010110101000101100100010", 13 => "00111110000111100101111010010111", 14 => "00111101110001010000000000101101", 15 => "10111111000001010110000110101001", 
    16 => "10111110000011001001010011110101", 17 => "10111110000001100000011011100000", 18 => "00111110010101110001010000110101", 19 => "10111110101111011100001011110010", 
    20 => "00111110000010111101101110001111", 21 => "00111110101001000100000010011111", 22 => "00111111000001011111001111010010", 23 => "00111100101001101010000101000100", 
    24 => "00111100111011110110111100101001", 25 => "00111110001001001000010101000011", 26 => "10111110011001001101111010001101", 27 => "10111101100111111011101101101010", 
    28 => "00111101001001100011000010011001", 29 => "10111110010111001000011101110110", 30 => "00111100101011010011000010000101", 31 => "10111101100111011111001110001010", 
    32 => "00111110101000010110101111011101", 33 => "00111100100101110010001000010110", 34 => "00111101011110010101100110000011", 35 => "00111110010101100110000110110001", 
    36 => "10111110101000010100011001100111", 37 => "10111011111011001010001001011011", 38 => "00111110100011010101010110001001", 39 => "00111101110101110110001011111111", 
    40 => "00111100010001111111111100101000", 41 => "10111100010110010001010010101111", 42 => "10111101101100000000000101111101", 43 => "10111110100101110000100000111000", 
    44 => "00111101001001000011111100010111", 45 => "10111101000110110001111111010001", 46 => "10111101100001010011010100010001", 47 => "10111101000011110000001100011000", 
    48 => "10111101000011010100010110100111", 49 => "00111101100010101111000110001011", 50 => "10111111000001111110101001011111", 51 => "00111011110010000000101010000110", 
    52 => "00111110101010100010011001000001", 53 => "00111101000000000101100010000000", 54 => "00111110111011010110100011111111", 55 => "00111110100000010001010111010111", 
    56 => "00111101101111100101011011111011", 57 => "00111110010110111111011011000101", 58 => "00111110100000111011001110101011", 59 => "10111110001010001100100010111100", 
    60 => "10111110110110010101011010010100", 61 => "10111100100000110001011111100010", 62 => "10111110001010011100101001000000", 63 => "10111110100001000110000011111001", 
    64 => "10111101110011110011110010000101", 65 => "00111110010000101011110001111011", 66 => "10111111000100101110000011100010", 67 => "10111110000011000111011000101111", 
    68 => "00111110001110101110010101011000", 69 => "00111101111110010111010110010011", 70 => "00111110011110101001111011111111", 71 => "10111110000001001000011010010111", 
    72 => "10111110000011000101010011111111", 73 => "10111110100101100100101100100010", 74 => "10111101110110011010011010100010", 75 => "00111111000001101011000001001100", 
    76 => "10111101011011111000000000100000", 77 => "10111101001100000110011010111011", 78 => "10111110110101110001001111100011", 79 => "00111110001101000011001000110110", 
    80 => "10111101011011001001011000111011", 81 => "00111110101110100000011110101000", 82 => "10111110000100000110101001001101", 83 => "10111011100010110011100011011001", 
    84 => "10111110001110010101100010110111", 85 => "10111110101111010101111011011110", 86 => "10111101111101100111001100100011", 87 => "10111101100011011011000101011010", 
    88 => "00111101111111010000110010000100", 89 => "10111110101100100011001111110111", 90 => "10111110100011001001000001010101", 91 => "10111110000101011010100000000000", 
    92 => "00111110110110011111000100100000", 93 => "10111101111100011001011110001000", 94 => "00111110011000100100000101010101", 95 => "10111110111110100011100110101000", 
    96 => "00111101011001101110111000101011", 97 => "10111110110100101001000110000011", 98 => "10111110100110111011010101101001", 99 => "10111101110011001101101111001110", 
    100 => "00111110011111111110001001011011", 101 => "10111101100010010001111001000010", 102 => "00111110110011000010000011011011", 103 => "10111110110100011111010111000101", 
    104 => "10111111001010100100101001101110", 105 => "10111110001011001110000001100100", 106 => "00111110000111110111001000100111", 107 => "00111101111011000100110001111010", 
    108 => "00111110100100101110110010110110", 109 => "00111110011001100110000111011000", 110 => "00111110011100010010001111100000", 111 => "00111110101100011001011011010100", 
    112 => "00111101101111010011110010100000", 113 => "10111110100100111110110000101101", 114 => "00111110000101100111110000101010", 115 => "00111101110100111100100000100000", 
    116 => "00111101111000110100011101110111", 117 => "00111110100101101101110010011000", 118 => "10111110101000001000010011011110", 119 => "00111011000110100010110001100111", 
    120 => "10111110010010011100000110000011", 121 => "10111110110110110010111111000100", 122 => "10111101011000100001100111110110", 123 => "00111110011001001011111111111100", 
    124 => "10111110100010000111001101001010", 125 => "00111101100111100001000000101100", 126 => "10111110000100111011001100110110", 127 => "10111100100011111001111111010000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

