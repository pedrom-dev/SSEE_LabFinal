-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_27_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_27_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110001010111101001101100110", 1 => "00111100101100110011000000100011", 2 => "00111110011111101011100111000110", 3 => "10111110100100001100001010100101", 
    4 => "10111101000101100100101011101101", 5 => "00111101001111101000111001010000", 6 => "00111101000101100110011111001110", 7 => "00111100011110101010000010000101", 
    8 => "00111101001110001110101010000101", 9 => "10111100101010111100010001101001", 10 => "10111101110001011001001001101001", 11 => "00111110110110110011000010001101", 
    12 => "10111101110111110101011011010111", 13 => "10111110010100011101010010101001", 14 => "00111100111010101001001111000010", 15 => "00111110111101001100100100000100", 
    16 => "10111110010011101001001001111110", 17 => "00111101101010110100010011011100", 18 => "10111110100011111011001010010000", 19 => "10111110111011010001100011000110", 
    20 => "10111110011111101111100000110111", 21 => "00111101000110001010101010111100", 22 => "00111101111101000001011001010001", 23 => "00111100001000111111110010110100", 
    24 => "10111110000010110011111000111010", 25 => "10111110101111000000011010000001", 26 => "10111101110000111010100111111110", 27 => "00111110100100010010101100101100", 
    28 => "10111110000000111100101000011101", 29 => "00111101100010010101001100000000", 30 => "10111110011011101001101011110100", 31 => "00111101110100010101001000110000", 
    32 => "00111101011010001000110110010011", 33 => "00111101101110101111011110000001", 34 => "00111101000001000000011111001100", 35 => "00111101110011100001111000100111", 
    36 => "00111110111000000011011100011001", 37 => "10111110101100110001110011101001", 38 => "00111101001111111010101111111010", 39 => "00111101111010110011111011010001", 
    40 => "10111110011001101010010111110001", 41 => "00111110000101110101101010010000", 42 => "00111101110110111011000111000011", 43 => "00111110101101011101111110000010", 
    44 => "10111110100011101100111001001001", 45 => "00111110100111011110000001001000", 46 => "10111110010100101010100000110011", 47 => "00111110100101001110010001011001", 
    48 => "00111110011101000100110110110101", 49 => "00111110000110011101010111010010", 50 => "00111101100101010100111110100111", 51 => "00111101001001010110110100000010", 
    52 => "10111110100111001010101010000101", 53 => "10111101111110010101100100111001", 54 => "00111101100010000111101110011111", 55 => "00111100011100010001001010011101", 
    56 => "00111110000011101000110000101001", 57 => "00111010100101010010110011111000", 58 => "10111110000010101111010010111001", 59 => "00111100011100110000001111111001", 
    60 => "00111011001011010011010110000011", 61 => "00111101100011011000001111011110", 62 => "10111110100000011011111010001100", 63 => "00111110000111100000111000010001", 
    64 => "10111110100011110111001100110000", 65 => "00111101111100010000101110100011", 66 => "00111101100001011111011111100000", 67 => "10111110110000011001010011010101", 
    68 => "00111110100000010100011111001011", 69 => "10111110000001101101011100111111", 70 => "00111110010011000111101010011111", 71 => "10111101001110111001101111111101", 
    72 => "10111110100001011110000011000101", 73 => "10111110000100010011101101110111", 74 => "10111110000001100000100100100010", 75 => "10111101000100100100000010010111", 
    76 => "10111100101110111101101110010011", 77 => "10111101100001010110011001101111", 78 => "00111110101001001101000101101110", 79 => "00111101110000110011101010100101", 
    80 => "10111110110100111110001100101010", 81 => "10111100110011011111001010001100", 82 => "00111110100110000110111100101001", 83 => "00111110010101111100000011010001", 
    84 => "00111110001100111111000010100110", 85 => "00111100110010000110100011100000", 86 => "10111110011101011111010001000001", 87 => "00111110101011000111101010110100", 
    88 => "10111111000110010100000111110001", 89 => "00111110100110101011100010011000", 90 => "00111110000011111011110000011100", 91 => "10111101011101100011011010100011", 
    92 => "10111101011001011010001111100001", 93 => "10111101010000101010001000000011", 94 => "10111110000101110000010101001101", 95 => "00111110100000101100001010100101", 
    96 => "00111101110000111011010111010101", 97 => "10111110101011110010001101000001", 98 => "10111101000011110010100110010100", 99 => "00111110111101111101011011000110", 
    100 => "00111110101101011001010100001011", 101 => "00111101110001001110101110101100", 102 => "10111110110101011110110101000000", 103 => "00111101001001101110100101100110", 
    104 => "00111110011011111110010001000101", 105 => "10111110101110101011010110011111", 106 => "10111110111000101000000111000011", 107 => "10111110000100110001101000001010", 
    108 => "00111101011101010100110100001011", 109 => "10111100101001101110111011111101", 110 => "00111101100101001110101001101001", 111 => "10111101110001101111010001000011", 
    112 => "00111110100100010000001001000111", 113 => "00111101111010001100000000011111", 114 => "10111110000110111011101101000110", 115 => "00111101111100111100101010110011", 
    116 => "00111110010100111010110101111010", 117 => "10111101100101011000101100111011", 118 => "10111110111011001101111101101111", 119 => "10111110101001110001001100100101", 
    120 => "10111110011110000101000010110101", 121 => "00111100010101001100001001011010", 122 => "00111101010100001100111011111101", 123 => "10111110010111101111100000110111", 
    124 => "10111110001000001101011111010100", 125 => "00111100000110011000100110111111", 126 => "00111110011110100111010100000100", 127 => "00111110001001100110111110101111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

