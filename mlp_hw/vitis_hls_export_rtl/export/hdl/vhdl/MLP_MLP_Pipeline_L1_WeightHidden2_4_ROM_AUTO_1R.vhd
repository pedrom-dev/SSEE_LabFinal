-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_4_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_4_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110011111111101000101000101", 1 => "00111011100011111000101110001110", 2 => "00111101101100000110010100111000", 3 => "00111101001100011010001101011110", 
    4 => "00111110001101100111100111100111", 5 => "10111110010100000101111100101011", 6 => "00111101111011110101101100101010", 7 => "10111011100111110000100000011000", 
    8 => "10111100110111111110100001011000", 9 => "00111101101110011101001010010011", 10 => "00111110101000111001110000010000", 11 => "10111110111000110100001110010000", 
    12 => "10111101011000010011100001001001", 13 => "00111110000010110111000110111010", 14 => "00111110101000110111101011010110", 15 => "10111101101000010110111101000110", 
    16 => "00111110000100110101101000100110", 17 => "00111101010001111101100000101101", 18 => "10111110000001100001000011010011", 19 => "00111110000110001111000110011000", 
    20 => "10111101111100111011101111100100", 21 => "10111110010011000010101011101110", 22 => "00111110101010001010111001011010", 23 => "10111011101000010101111010011111", 
    24 => "00111110011001011111010100001011", 25 => "10111101111001111101101110100011", 26 => "10111101000111010101001000110110", 27 => "10111110110011001111001111110001", 
    28 => "00111110010010101010010000101001", 29 => "10111101010001110011010000100101", 30 => "00111101000100011110101101100000", 31 => "00111101000111100010100011111011", 
    32 => "00111110011110011001101101100000", 33 => "00111110001011110011110011011111", 34 => "00111101101100011110011110010101", 35 => "10111110101111011010011110011101", 
    36 => "10111101110111100001010111000101", 37 => "00111101101100111110100001101111", 38 => "10111110000011101001010000010011", 39 => "00111101001011100000010101111010", 
    40 => "10111110100010111001000000100100", 41 => "10111110010100110111011100011000", 42 => "10111101001010001110100011101000", 43 => "10111110001100110110000000011100", 
    44 => "00111110011011010111101011011010", 45 => "10111101101000100001001000110001", 46 => "00111110101000010101100001101011", 47 => "10111110000000001000010001001100", 
    48 => "10111110100101011110100100001001", 49 => "00111110010101101011010111101101", 50 => "10111100001110000010000111111011", 51 => "00111101000101001101001110011100", 
    52 => "00111110001011010011100001100100", 53 => "00111110000111110101010001000111", 54 => "10111100000110000101111100011100", 55 => "00111101110110100000111000111001", 
    56 => "10111100010001110011101000000110", 57 => "10111110001110100010111101100100", 58 => "00111110100000110100011001111101", 59 => "10111100110100110010100110011000", 
    60 => "10111101110001011111110011100100", 61 => "10111101001111100101100000100101", 62 => "10111101111111011001101000101011", 63 => "10111110011011000110010011101011", 
    64 => "10111100101000100011010001100011", 65 => "00111011100000110001111101101111", 66 => "10111101101101010000011110111111", 67 => "00111101110010010010111111010110", 
    68 => "00111110100110110001111100001111", 69 => "00111101101110011110001110100001", 70 => "00111101010010010001010100111101", 71 => "10111110010101000011101111000100", 
    72 => "00111011101111101000001001110010", 73 => "00111110010011010011111001110000", 74 => "00111100000010110101010101011110", 75 => "00111110010001100001010110000100", 
    76 => "10111100000010000000101001111011", 77 => "00111110100110101001000111011100", 78 => "10111110110000110110100011101011", 79 => "00111110100011111101011101001110", 
    80 => "00111110100110111010110111111000", 81 => "10111110000010111010001011001110", 82 => "00111101000010110111101011111001", 83 => "10111110010111110101110101010010", 
    84 => "10111110001110011010110000011100", 85 => "10111110001011110100111011100101", 86 => "00111101111010111100100110100100", 87 => "10111110010110010011000010001110", 
    88 => "00111110111001111001000111111011", 89 => "10111101101111101110001100101001", 90 => "10111101000001111001010000001011", 91 => "10111100110111010001110010001011", 
    92 => "00111100100000001111100001111000", 93 => "10111110000000110010011011011001", 94 => "00111110110010011111010011101101", 95 => "10111110010111011011111111011101", 
    96 => "00111101010100001110001100111010", 97 => "00111101000001001000111100001110", 98 => "10111101111001001111001011101001", 99 => "10111110100001000001100110000101", 
    100 => "10111100100001111100101000111111", 101 => "10111100000111001100101000100110", 102 => "00111101100100110111010001111001", 103 => "10111110001101010001010110100000", 
    104 => "10111110001010000010111010100000", 105 => "00111110101001101111010010010111", 106 => "00111101101010001011001011100001", 107 => "00111110011100000001001000101101", 
    108 => "00111110001111010010110000000100", 109 => "00111100101000110101111111111100", 110 => "10111101010001110010111011000000", 111 => "00111110000001001100011001011111", 
    112 => "10111110101010011011100100110011", 113 => "00111011101011100111001011000101", 114 => "00111110010001100101101101011000", 115 => "10111110010011010100110011100100", 
    116 => "10111100110001000011000110000111", 117 => "10111101101001010011111100111010", 118 => "00111110001010111010111011000001", 119 => "00111110001110011110010101111110", 
    120 => "00111110100010011011100110111111", 121 => "10111110110010010101100001011010", 122 => "10111110010100011011001001100111", 123 => "00111110011011110010100010010011", 
    124 => "00111110011100001100000111011011", 125 => "10111110100010101000000011111110", 126 => "10111101110001101011101100011100", 127 => "00111110101101111110011110010010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

