-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_53_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_53_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110100110001001001001010010", 1 => "00111101101111001001101111000111", 2 => "10111101100011000011001000111011", 3 => "00111110100011110000111011001101", 
    4 => "00111110100010111000101000110100", 5 => "10111110011011010100101010011001", 6 => "10111100010111110111001001000001", 7 => "00111101101000010001111011010000", 
    8 => "00111110100000010100110110000001", 9 => "00111101111110101100010010101101", 10 => "00111110101101001010101001101111", 11 => "10111110101100001011111011010101", 
    12 => "00111110010000100010101101011000", 13 => "10111110001111100100100010111110", 14 => "00111110110011110000011110100110", 15 => "10111110001100101111000111101110", 
    16 => "00111100110010000101110100001100", 17 => "10111101010001100000010000110110", 18 => "10111101101010001111101000111011", 19 => "00111101111100011110101010011100", 
    20 => "10111110000100000010110111001011", 21 => "10111110000011101110100011101100", 22 => "10111101110111001100001100101001", 23 => "10111110101100001110111011001000", 
    24 => "00111110001101010100001101001111", 25 => "10111101100101111110010011001011", 26 => "00111110011101100011110000000110", 27 => "10111110001100111110001011000110", 
    28 => "10111101100101010110001111100101", 29 => "00111101100001110111101101000111", 30 => "00111110000100100111011111101011", 31 => "10111011101100111001010000101100", 
    32 => "10111101001101101110000011000010", 33 => "00111101111100100011101100111110", 34 => "10111110000000110000101110100101", 35 => "00111110000010010110100000010000", 
    36 => "10111110010101010011111101100111", 37 => "10111011100000000010001001000111", 38 => "00111110001100001110111111000110", 39 => "00111101101111001010000111001000", 
    40 => "00111101100110000110100111111001", 41 => "10111101101101010100011010110101", 42 => "10111110100101011101100010100000", 43 => "10111110010100000010011101010001", 
    44 => "00111101101110001010110110100000", 45 => "10111100101100011001011000110000", 46 => "00111011110110111011000011010110", 47 => "00111101000100101101001100100100", 
    48 => "00111101101101001111001000010010", 49 => "10111110000100000010101000011010", 50 => "10111110001000010000110101011000", 51 => "10111101101011111110011001000111", 
    52 => "00111101101111011100110101101000", 53 => "10111101010101010010011011011110", 54 => "00111110000101101011000111100100", 55 => "00111100100110001001000101110001", 
    56 => "10111110111000101100011111011000", 57 => "10111110100111110100101011100100", 58 => "00111101100110101100110111101011", 59 => "10111101010001111111000000100001", 
    60 => "00111101001000111011000010000100", 61 => "00111100111000000100111100000101", 62 => "10111101100100011010011110000000", 63 => "10111110100000101010101011011101", 
    64 => "00111110000100011100100001111000", 65 => "00111101100101111100010100011001", 66 => "10111101101011000000111110101111", 67 => "00111011110101001111110100011101", 
    68 => "10111101011010101101110100010110", 69 => "00111101111000100111110000011001", 70 => "10111110001001101100001111111110", 71 => "10111110101011110011101010010100", 
    72 => "10111011001011000010101101101101", 73 => "00111110001000100010100001001010", 74 => "10111101111010001010100101010100", 75 => "10111101001101010110001100010110", 
    76 => "00111101111110010110110101001011", 77 => "00111110011100011001110100111100", 78 => "10111110010100100110001000011111", 79 => "00111110100110100101010010111110", 
    80 => "00111001101101010000101100110011", 81 => "10111101101111001010100001110110", 82 => "10111110100000000011000010110111", 83 => "10111110101100011101101000011010", 
    84 => "10111100010011111010000011101000", 85 => "10111101011011011110111000011010", 86 => "00111110011000110110101110001000", 87 => "10111101100100110100110110011110", 
    88 => "00111110100111101101101011001000", 89 => "10111101110000110111010001100101", 90 => "10111101100010111101100011001101", 91 => "10111101101010100100110000001011", 
    92 => "00111110001010101100100110000001", 93 => "00111101110000000100111000000110", 94 => "00111110100000110111011000100011", 95 => "10111110010011100011110101011101", 
    96 => "00111110001100000101000111000010", 97 => "10111110000011000100000111011111", 98 => "00111101001011100011110000111110", 99 => "10111101110100011101111011001000", 
    100 => "10111011100000110000010111000100", 101 => "10111110001000101011000000001111", 102 => "10111110001000010111100010111011", 103 => "00111101110010000011001011100000", 
    104 => "10111110000000001001000100110010", 105 => "00111110100001110000001101000101", 106 => "00111110001000110001100001110100", 107 => "00111101100011111011000000100100", 
    108 => "00111110010011001011101001110110", 109 => "00111101001110110011010110100001", 110 => "00111110001001001111110111001111", 111 => "00111101110111000101000010101101", 
    112 => "10111011100110101010010110110011", 113 => "10111010010111111110010110101110", 114 => "00111110001101100101101111001111", 115 => "10111110110001011001110011011001", 
    116 => "10111110010111100110101110001010", 117 => "10111100100010101100100000100000", 118 => "00111100100010010010101100110111", 119 => "10111100111111110101101001011001", 
    120 => "00111110001011110010010100001001", 121 => "10111110100110001100001100001100", 122 => "10111110100000100010010000101111", 123 => "00111101110001111000101111100111", 
    124 => "10111100010101000010100111100011", 125 => "00111110000001100111000101001010", 126 => "10111101101010010100010101110110", 127 => "00111101111011101010101000011010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

