-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_34_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_34_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101111000010111111011101110", 1 => "10111110000101101110110111101110", 2 => "10111101101010010100100100001100", 3 => "00111110101001000101110000111100", 
    4 => "00111100001010110100011010001010", 5 => "10111110001010101000110001111101", 6 => "00111101110100011000111111111001", 7 => "00111101000101010111000100010110", 
    8 => "10111110000010110000111111000101", 9 => "00111101000111001111101100100000", 10 => "10111100101000100000110100000110", 11 => "10111110010100000110110101110011", 
    12 => "00111101001111100010010001100011", 13 => "00111101111011110001000001011101", 14 => "00111110001010011010011001100010", 15 => "10111100111110001110011010100010", 
    16 => "00111110000011001111101001000101", 17 => "10111110100000010011000010011011", 18 => "10111110011001000111000010000100", 19 => "00111110101011001110001110001011", 
    20 => "10111101110001100001000001010000", 21 => "10111110100101011001000110110001", 22 => "10111110101101111110110101111000", 23 => "00111100011000111000001011011100", 
    24 => "00111110011011110001011011101001", 25 => "00111110000111010101010110101000", 26 => "00111110011001101111001001011000", 27 => "10111100101010100000101011000000", 
    28 => "10111110110101000000001011001100", 29 => "00111001011001010110100110100011", 30 => "10111100101111110100010000010011", 31 => "10111101110000011010100000000001", 
    32 => "10111101110010110011100110011101", 33 => "00111110000000010100010111101110", 34 => "10111110000000011100110111111101", 35 => "00111110000010100011101000010001", 
    36 => "10111110000001001111100010101100", 37 => "00111110110000100111100001001000", 38 => "00111101101001100100000101011011", 39 => "10111101101010110001001100011101", 
    40 => "00111110000100001100010100010110", 41 => "10111101100000110111101100100101", 42 => "00111011111011000101101001011100", 43 => "10111110000000001011000001000011", 
    44 => "10111101111001110001110110111110", 45 => "10111101100000100001110010010000", 46 => "10111100100100010111100000111000", 47 => "10111101111110011110100011010101", 
    48 => "00111001100010111011010000111010", 49 => "10111101101000100111101010101000", 50 => "10111110001111101110001000111101", 51 => "10111110100001100011010101011011", 
    52 => "00111110100100001110000011010111", 53 => "00111110001000100011010011110000", 54 => "10111101111101111000101001010001", 55 => "10111110001001010101101110110000", 
    56 => "10111110111000011110100101101111", 57 => "10111110011111010010110001011001", 58 => "10111101111010001111100101110101", 59 => "00111110000111111000011010111111", 
    60 => "10111101111110110001000100111001", 61 => "00111101000100000111001000001000", 62 => "10111110001100100010001101000111", 63 => "10111101110111111000101001111010", 
    64 => "00111110011110011100001101111011", 65 => "00111110011011000000101000001110", 66 => "10111101101111100010001101100111", 67 => "00111101010001111101101011000000", 
    68 => "10111110100110011110010010101100", 69 => "00111110100111001010101010101000", 70 => "10111110110000011010111011111011", 71 => "00111101001010100010000001101010", 
    72 => "10111101000011100011011101100110", 73 => "10111110010001110011000110111010", 74 => "00111101111100010100011001101011", 75 => "00111101000100011101110001011001", 
    76 => "00111101101001001101100111101111", 77 => "00111110001010111101001001100110", 78 => "00111101101000010111010011010100", 79 => "00111100001110010101111000100101", 
    80 => "00111100000000110111010000110110", 81 => "10111110101110011110100001111110", 82 => "00111100110010100000110110001110", 83 => "10111101000101011111101010100001", 
    84 => "10111110001011000100000010111101", 85 => "00111101011101011101011101010010", 86 => "00111110111000111010111110010010", 87 => "10111110101000011101111001010001", 
    88 => "00111110100100100101101010000001", 89 => "00111101110010110000110011111100", 90 => "00111110101001110101110000000110", 91 => "00111110001011011001011001111100", 
    92 => "10111101100011011001011110010110", 93 => "00111110010100010000100000000101", 94 => "00111101111110010100100000111011", 95 => "10111110011111010100010010111100", 
    96 => "00111101101011101111010110001100", 97 => "00111110010100111001110010101111", 98 => "00111110010000001100110100100011", 99 => "10111101001101111011110100000000", 
    100 => "10111110101010000110111101010110", 101 => "00111101110111011110111001111000", 102 => "00111100110111100110010010011111", 103 => "00111110100111010100110010110000", 
    104 => "00111101000110111010100011011000", 105 => "00111110011101001101100010111100", 106 => "00111101101010000000010110110011", 107 => "10111110001011011011101000110101", 
    108 => "10111110101010111110000111111100", 109 => "00111110001000111100010100101011", 110 => "10111100011110101000001111110101", 111 => "10111101011011110001011010101110", 
    112 => "10111100100110100011001010000001", 113 => "00111101011111000011111001011101", 114 => "10111101011110010011010110111100", 115 => "00111101000100010110001000000101", 
    116 => "10111110000011000011011001011011", 117 => "10111110001100110011111010001010", 118 => "00111101111001001001111100100010", 119 => "00111110000001100000001011100111", 
    120 => "00111110010110000001011001111001", 121 => "10111101011100110011011000000000", 122 => "10111110100100001101011010110111", 123 => "10111101100001000100001011010000", 
    124 => "10111110001001001000111101011100", 125 => "00111100101110001101110011000110", 126 => "10111110010111101011010010111101", 127 => "10111101011001001111010101100000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

