-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_25_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_25_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110010001000111101110111011", 1 => "10111100110111101001100000100110", 2 => "10111100111100001111111001000101", 3 => "00111110001001010011110110011110", 
    4 => "10111101101101000110001111101001", 5 => "00111110010000011010101000000110", 6 => "10111110100001000011011001100101", 7 => "10111110100111111111011110111100", 
    8 => "10111101100110100010000001110101", 9 => "10111110001000101010010011110000", 10 => "00111110000010001001101101100011", 11 => "00111110000111000010100000111101", 
    12 => "00111100010011101001010000001101", 13 => "10111101000111100110101101000101", 14 => "10111110100100001010011011001010", 15 => "10111110010100011101111010100110", 
    16 => "10111100001101000110001100001001", 17 => "00111110100001000000011100100111", 18 => "00111110100100100100011111100100", 19 => "10111110001100100011001000110000", 
    20 => "00111101010110100001101001001011", 21 => "00111110100101010111010111111100", 22 => "10111100001101010010100001010110", 23 => "00111100100010011011000010000011", 
    24 => "10111110011101110101010001011100", 25 => "00111110010010101110011101110101", 26 => "10111100100110101101111011001110", 27 => "10111101101100001100000011100100", 
    28 => "00111110110110111011101111011101", 29 => "10111101111011001001111010101001", 30 => "00111101111101011001111100001011", 31 => "10111110100010100111000110011111", 
    32 => "10111110111001111000100001010010", 33 => "00111110000101110011001100100110", 34 => "10111110100101101011100011011111", 35 => "00111110101110011111111001110111", 
    36 => "10111110100111100001100011101100", 37 => "00111100110010100001011000111101", 38 => "10111110011110100001010011000101", 39 => "10111110010110011111101110100101", 
    40 => "00111110100111010101000010101011", 41 => "00111110011000111110000100010001", 42 => "00111101110110010010111011100000", 43 => "00111101011010101010111100101000", 
    44 => "00111110011011001111011110010111", 45 => "10111110000111010011111001111101", 46 => "10111101011011000101011101010100", 47 => "10111100001110010110001101111001", 
    48 => "10111011100001100111100100110111", 49 => "10111110010001010001100101111000", 50 => "10111011110100000101010100011000", 51 => "00111110101010101011000100100001", 
    52 => "00111101101001110000011111011101", 53 => "10111011000010000001101001101011", 54 => "10111101101100000010111010000110", 55 => "10111101001010000000110111111100", 
    56 => "00111101111011000000010100011100", 57 => "00111111000001100111011110010100", 58 => "00111110001110010101101001100100", 59 => "00111110100101111000100100010100", 
    60 => "00111101010101011010010110111100", 61 => "10111110110001001000001011111010", 62 => "10111101010001100110000100000011", 63 => "00111110100011000010110100011001", 
    64 => "00111101100100011100110011110111", 65 => "00111110101000010111110100000110", 66 => "00111110001001011011111000100000", 67 => "10111110100010100010111001101110", 
    68 => "10111110110100110100001111010000", 69 => "10111101110000110100001010100000", 70 => "00111110011000001101100010001011", 71 => "00111110101111001101110110110100", 
    72 => "00111110011100011000000011110001", 73 => "10111101100001101001000111101101", 74 => "00111110001100011110110100100010", 75 => "00111110101100100000000111111100", 
    76 => "10111101111001000111010000100001", 77 => "00111110010110011101001011101010", 78 => "00111110000011001111010001011101", 79 => "10111110101101111101110101111011", 
    80 => "10111110110001010101000010011101", 81 => "00111110001000101100111101000001", 82 => "10111101110100010010000111011100", 83 => "10111101011100100000001000001000", 
    84 => "00111110100101111111000101011101", 85 => "00111110100000101101101011100010", 86 => "10111101111100000000100001010011", 87 => "00111110100101010010110011001010", 
    88 => "10111110010001010010000011110100", 89 => "10111110001001100111001000010000", 90 => "10111110010000110001101100010101", 91 => "00111100101011100100000011000000", 
    92 => "00111110011100110010111010010100", 93 => "00111101010001100010000000011000", 94 => "00111110001010001110110111110111", 95 => "00111101001011010010010101100101", 
    96 => "00111101101100011110010101100101", 97 => "10111101100011100110000000011100", 98 => "10111110000101111000110110010010", 99 => "10111101101000101110001100111100", 
    100 => "00111101000100111011111001010011", 101 => "00111110000100010100110100110011", 102 => "00111110100000101010101101101111", 103 => "00111110001011111100111111111000", 
    104 => "10111110000010101110000111011101", 105 => "10111110111110000101000111000110", 106 => "10111110100011110101001011000001", 107 => "10111101111011111010000010101111", 
    108 => "10111101100000011010001110011010", 109 => "00111110011101010010010110000001", 110 => "00111101100110110001001001010110", 111 => "00111101100000111100101111101010", 
    112 => "00111101010100000101001101110010", 113 => "10111011100100010001011101101010", 114 => "10111110100111000010100101101100", 115 => "00111101110101101101101010101111", 
    116 => "00111110010010100010000000010101", 117 => "00111101000101101100001110000011", 118 => "10111110001110000101100111110010", 119 => "10111101100011100000001001100100", 
    120 => "10111110100110111001101001010100", 121 => "00111110111001001000000011101011", 122 => "00111110010101110001011011011111", 123 => "00111101001010001010110000000011", 
    124 => "00111101101110110000010000111000", 125 => "00111101000001110111000010000111", 126 => "00111110101001011111101000001100", 127 => "00111101000000000111010000001110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

