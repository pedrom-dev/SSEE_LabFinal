-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_L2_BiasesHidden1_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_L2_BiasesHidden1_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101101000011010011110100010", 1 => "00111110001110010000001010111111", 2 => "10111110100101001010110110110110", 3 => "10111101000111101100001011011110", 
    4 => "00111110000000001110100010011001", 5 => "00111110100000101101010101010001", 6 => "10111100010000011101100011110001", 7 => "00111100110010110000001111001010", 
    8 => "00111110100101110100100111111000", 9 => "10111110001001100111100000001000", 10 => "10111110101101000010010110101111", 11 => "10111110110110001111110001001000", 
    12 => "10111101111100011001001000010110", 13 => "10111111000011001111000101010101", 14 => "10111101100110011101100110110011", 15 => "10111101111011101111000000001010", 
    16 => "00111110000000010000011000101001", 17 => "10111101010010001010110111010010", 18 => "10111110100100011111101111110100", 19 => "10111110101011111011000001111000", 
    20 => "00111110100000000001110110010001", 21 => "00111110001011100001000110001110", 22 => "00111101110001101101010100010111", 23 => "10111110101111111100100110011110", 
    24 => "00111110100111110110011011101010", 25 => "10111101100110010010010000000101", 26 => "00111110100011001000110011111111", 27 => "00111101101001110010110010001110", 
    28 => "00111101101000011101001111101000", 29 => "10111110001101100011001001010010", 30 => "00111111000110001010111011101001", 31 => "10111110010111011000010101000111", 
    32 => "10111110010010101001010010101101", 33 => "10111110110001001001101101010000", 34 => "00111110011101000001011000001010", 35 => "10111101010111101000110101110001", 
    36 => "00111101100010001000010110010110", 37 => "10111110010110001001110110100000", 38 => "00111101100111101110111011111110", 39 => "10111101010000110001000111001111", 
    40 => "00111110100110001111101001101100", 41 => "00111101000100100001111111011111", 42 => "10111110110111101011010100110000", 43 => "10111100001010001100110101101101", 
    44 => "10111101100111100011100100100000", 45 => "10111101110101111111101101001000", 46 => "10111110110011100011010101010100", 47 => "00111110001110111001001100000010", 
    48 => "00111110000111000010001100010010", 49 => "10111110000001001100110011011001", 50 => "10111110100110111010100000001110", 51 => "10111111000010111101001111111000", 
    52 => "10111110010111100000101111111001", 53 => "00111110100110110101110010000101", 54 => "00111110001000101011110001110101", 55 => "10111111010000101101001111001101", 
    56 => "00111110110001000101111000111101", 57 => "10111101010000110110011010111011", 58 => "10111110111101111101011000100101", 59 => "10111101011100000000110100110001", 
    60 => "00111101101001011110101000010010", 61 => "10111101011000101010101111111000", 62 => "10111110011010000011100001000110", 63 => "00111110010101110011010000001000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

