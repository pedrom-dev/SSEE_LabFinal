-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_31_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_31_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101100110000111001001101110", 1 => "10111110101011101010101100011111", 2 => "10111110100111000010111101011110", 3 => "10111110011001111101001001010110", 
    4 => "10111101100011001001011011011111", 5 => "00111100111101100001100100011100", 6 => "10111101110010010110010000010010", 7 => "00111101100010001010101100110110", 
    8 => "10111110001010011100111101110010", 9 => "00111101100011101010111110001110", 10 => "10111110110011110010110010100101", 11 => "00111110001101111111000100110100", 
    12 => "10111110001110011011010110110001", 13 => "00111110001010100110011001011101", 14 => "10111110001011011010110010101100", 15 => "00111101011111010010111100101011", 
    16 => "10111101101101001110011100110011", 17 => "00111101100111001010000110101001", 18 => "00111101001010100110001101101110", 19 => "00111110100010000011101100011111", 
    20 => "10111101001010000011111011110001", 21 => "10111110110110010001111101011001", 22 => "10111110000001100000010000111110", 23 => "00111110100101100101100001110010", 
    24 => "10111110100011010110000110010111", 25 => "10111100111001110001111011001101", 26 => "00111101000110000110011010011001", 27 => "00111110000001000101001101010011", 
    28 => "10111110110101010110011001110110", 29 => "00111110010101010111011100100011", 30 => "00111101011111100000100110011001", 31 => "10111101100000001000011001011000", 
    32 => "00111101101010111101000110011001", 33 => "10111110111010001100011111001010", 34 => "00111110011010101100100010010101", 35 => "10111110011101110101111011100001", 
    36 => "00111110011000101000010101001001", 37 => "00111110101011000101001111001111", 38 => "00111101100101110111111001111000", 39 => "10111101101110001100000010010001", 
    40 => "00111101010110110100011000101111", 41 => "10111101001010110000110100101010", 42 => "00111110011010010111111100100010", 43 => "00111101111101000011111100010110", 
    44 => "10111110001110111100001101001110", 45 => "10111101111001011011011011010000", 46 => "10111110001101110001001000101101", 47 => "10111110100000001010100101100000", 
    48 => "10111110010111111100001000110010", 49 => "00111100000001111001010001001001", 50 => "00111101101111111000000001110001", 51 => "10111110011011101001011111101001", 
    52 => "00111101010111011111101001101010", 53 => "00111110001000111011000111100110", 54 => "10111100001100000111101001011100", 55 => "10111110000010000001001101000000", 
    56 => "00111101110001001111010011101010", 57 => "00111101000011000101110011000101", 58 => "10111110001001001101111010101100", 59 => "00111011101001010101110001110000", 
    60 => "10111110000101101110100111110010", 61 => "00111110101001101011001111111110", 62 => "00111110001011001000010011101000", 63 => "00111101111010010101111101110001", 
    64 => "10111100000001100110001100011100", 65 => "10111101100100111001100100100010", 66 => "00111110001011110100110011010110", 67 => "00111110001011100001010000101110", 
    68 => "10111110000101111000111111101100", 69 => "00111101000000001000101001010111", 70 => "10111110001011011111001111111111", 71 => "10111101111010010001100000111010", 
    72 => "00111110010110010000100111111111", 73 => "00111101001000011100010001101000", 74 => "10111101001111100011100011110011", 75 => "10111110010001001110101110010110", 
    76 => "00111110001011011110011101000101", 77 => "10111110011010011011101110110000", 78 => "00111110001011010111010111100101", 79 => "10111110010101010011010100001111", 
    80 => "00111110011000000001111010011000", 81 => "10111110010110100111001100110001", 82 => "00111110000010110100011110100111", 83 => "00111100111111111110001010000100", 
    84 => "10111110011100010000010111010101", 85 => "10111110000110010100000110100010", 86 => "00111110010100010010001100110011", 87 => "10111110000010101100001100001011", 
    88 => "10111101111010110110000010110100", 89 => "00111110011011010010001001000101", 90 => "00111110100100010111101110001000", 91 => "00111110011111111010100100010100", 
    92 => "10111101110001010000100010111110", 93 => "00111110100010101001101011111111", 94 => "10111110011111111000101111010001", 95 => "00111101110001111101110111111011", 
    96 => "10111101101110111000100101011001", 97 => "00111110010110000000010100001001", 98 => "00111101000000110101001011110110", 99 => "00111101111000110010111101100010", 
    100 => "10111110110000000101001111010011", 101 => "00111101110111000110001101101000", 102 => "10111101000001000000110010111010", 103 => "10111101111010100000011001111011", 
    104 => "00111110100010101001000110101010", 105 => "10111110000111100101101110101010", 106 => "10111101000100010011000101110100", 107 => "10111110100001010000110100101100", 
    108 => "10111110100101101000100100110101", 109 => "10111110101100100000000010011000", 110 => "10111110100111110111111010101001", 111 => "10111110100011111100101001000000", 
    112 => "10111101001011000101000000011000", 113 => "00111101111000110110111100101000", 114 => "10111110000011111110110111010110", 115 => "00111110001000111011000111111000", 
    116 => "00111110000000100111111010000100", 117 => "00111100000001011110110001010011", 118 => "10111010111100000111001010011001", 119 => "00111110010111000101101110111100", 
    120 => "00111110010001101001010010001101", 121 => "10111100110010101011011111000100", 122 => "00111101000001110011011011001011", 123 => "10111110001101010101010001101010", 
    124 => "00111101100110001000001001000001", 125 => "10111110100011011100111101011101", 126 => "10111101110001110000001101100110", 127 => "10111110010000101110000000100100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

