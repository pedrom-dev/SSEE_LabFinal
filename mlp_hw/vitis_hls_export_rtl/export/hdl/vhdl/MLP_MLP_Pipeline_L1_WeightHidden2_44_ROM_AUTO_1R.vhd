-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_44_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_44_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110111101101100111010111100", 1 => "10111110110110011001111000011111", 2 => "10111110011000000100000110010111", 3 => "10111100010111000100010011000101", 
    4 => "10111110000101100010001011000011", 5 => "00111110011110011100100110110111", 6 => "10111110101101101100001001101111", 7 => "10111101111010010111100001111010", 
    8 => "10111110000101110001111010111111", 9 => "10111110100001000111011001110001", 10 => "10111110110000111001001010001000", 11 => "00111110101001001011010100000011", 
    12 => "00111100000111111011111111101111", 13 => "10111110001100101111101010010111", 14 => "10111110111011000111110000100110", 15 => "10111001111100010011000101101001", 
    16 => "10111110100000001101110110100110", 17 => "10111101101101101011010001001011", 18 => "00111110010111110100000000110010", 19 => "00111101110101010000110001111100", 
    20 => "00111110010111110100100110011110", 21 => "10111101100100101010111110100011", 22 => "10111110110100100000100000000010", 23 => "00111110010110111011101011011101", 
    24 => "10111110111100110110000100100100", 25 => "00111110101011100010100110101101", 26 => "10111101010101110011101110000011", 27 => "00111101101101001110011001011100", 
    28 => "10111110011011101111011011101011", 29 => "00111110100001110110000010010000", 30 => "00111110100010100111110010010010", 31 => "10111110010000111100011000110010", 
    32 => "10111110101101101110101100001011", 33 => "10111110001101111111111110010110", 34 => "10111100000101111111100111011100", 35 => "00111110001101100011100101101000", 
    36 => "10111110101010010110000011100010", 37 => "00111110110101101010010011100101", 38 => "00111101100101011010010000010000", 39 => "00111110011000111110011100000011", 
    40 => "00111110100010101101101011001000", 41 => "00111110000111110010011110100110", 42 => "00111101101000100001001100111100", 43 => "00111101100100011011110001100110", 
    44 => "10111100011101101111101001110011", 45 => "00111110001001001010001011100100", 46 => "10111110100100110110100100111100", 47 => "10111101101101000110011011111010", 
    48 => "00111110000011111100001111000110", 49 => "10111110001110101000001000100110", 50 => "00111101111100101001100111001010", 51 => "10111110000010101100110110001011", 
    52 => "00111101010000100010111110111011", 53 => "00111101110101110010111110001110", 54 => "10111110000011110110001001011010", 55 => "10111110101010000000110111110001", 
    56 => "00111110010101010111110001011110", 57 => "00111110011110000100101001001001", 58 => "10111100111101110010000010001000", 59 => "00111110011011001100000100111011", 
    60 => "00111101011111101111001110100001", 61 => "10111101011010111011110111011100", 62 => "00111110000111001110111000011111", 63 => "00111110101010110110111011010000", 
    64 => "00111110110111111011011110111110", 65 => "00111110011101000110000110000110", 66 => "00111110101111011111110011101100", 67 => "00111110011000011010100101101011", 
    68 => "10111110111010111101100101110000", 69 => "00111100111100111010100001110100", 70 => "10111110001100100011100001000110", 71 => "00111110011101110000110100011111", 
    72 => "00111110000000111111111101010101", 73 => "10111101101100110011110111010100", 74 => "10111100001101001111100101111100", 75 => "10111100110001100100111011011111", 
    76 => "10111100111101110100001010100111", 77 => "10111110100100101000001100100110", 78 => "00111110011110001010101011000001", 79 => "10111110110110011111110110010110", 
    80 => "00111101010000101100000000101110", 81 => "00111011110100100110111000001100", 82 => "10111110100100100111110000111001", 83 => "00111110100100010111011011111100", 
    84 => "00111110001001110011010100011100", 85 => "00111110001101111000001001011011", 86 => "00111101000101101111110010001110", 87 => "00111110100100110101010010110011", 
    88 => "10111110010101011011111011001110", 89 => "00111101110001100011100110011011", 90 => "00111110001001110100100001100111", 91 => "00111110101000001011010110011011", 
    92 => "00111100110001011100000100001010", 93 => "00111110101011100001010100110101", 94 => "10111111000010010010000111010111", 95 => "00111110011001110100110110011001", 
    96 => "10111101111110100110011000111100", 97 => "00111110001111010011000000111011", 98 => "00111110010000101001100010000100", 99 => "10111101010100111100000000100001", 
    100 => "10111110011000111101100110111011", 101 => "00111101101100010011010110010010", 102 => "00111101110001000110000001010100", 103 => "00111110000101000101010011011111", 
    104 => "10111101000100111100100110011110", 105 => "10111110001101001110110100111001", 106 => "10111101100100010110011010010011", 107 => "10111110100101100110101101110100", 
    108 => "10111110101100101000011100010100", 109 => "10111100100111111101011000010100", 110 => "10111100001110100000000000101100", 111 => "10111110000000010101000010111011", 
    112 => "00111101110001110100011000011101", 113 => "00111110011011011100000111010001", 114 => "00111100101010011101001110001001", 115 => "00111110110000011100001001101001", 
    116 => "00111101010101101110001101010101", 117 => "10111101000100001001010010011011", 118 => "10111100001000010000000101111000", 119 => "00111011101101000110110111000110", 
    120 => "10111110000000100100110011101100", 121 => "00111111000000011110110011011111", 122 => "00111110010001001110000001000100", 123 => "10111110101011101000000110010010", 
    124 => "10111100111100001011100001111111", 125 => "00111101110010111001001101111111", 126 => "10111110010001011100100011001101", 127 => "10111110110101000011010001001000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

