-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_22_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_22_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110100010010101100010111111", 1 => "00111110100110101100010111010011", 2 => "00111101000010100000100011110011", 3 => "00111101010111111001000010100111", 
    4 => "00111101111100110101110111110111", 5 => "10111011111110110011101001110011", 6 => "10111101010000101101110001101001", 7 => "10111110010101010010100001100101", 
    8 => "00111110010110010001001111001000", 9 => "00111101011000101101101111110101", 10 => "10111101110101010101111110101010", 11 => "00111100111101001001110101110110", 
    12 => "00111110010101101101001000000001", 13 => "00111011111011101101111100110001", 14 => "00111100001100000111011111111000", 15 => "00111101110110000010011101101111", 
    16 => "10111100100111110001110111010010", 17 => "00111001101110011110110110110111", 18 => "00111101100010101100101111000001", 19 => "10111110001111001111011111000011", 
    20 => "00111110101011101100100001001101", 21 => "00111110101000011100001101101100", 22 => "10111110000011101010101100011010", 23 => "10111100100101111011000100111100", 
    24 => "10111101010001101111111111111111", 25 => "00111110011100001111011101111010", 26 => "10111010100101001000001010000011", 27 => "00111110100001000100100000111000", 
    28 => "00111110000010011010011101010110", 29 => "10111011111000100111001000011111", 30 => "00111110000001000011010111000101", 31 => "10111100100111000100101010001110", 
    32 => "10111101011010101110111100111101", 33 => "10111100111000110010111000001101", 34 => "00111101001011011011111010110101", 35 => "00111101111111101110110010001111", 
    36 => "10111110011110110011001001011111", 37 => "10111110100101101100010000011010", 38 => "00111101000110011101110001010010", 39 => "00111110001010000111111011111011", 
    40 => "00111110100010100100100000101010", 41 => "10111101100011101011101000101000", 42 => "10111110111101011010111100010101", 43 => "10111110000001101001101111111101", 
    44 => "00111101101101111101110001000000", 45 => "10111110000001011010010010010101", 46 => "10111101100110011111101100010011", 47 => "10111011111010011101100010001100", 
    48 => "00111101100010101010000010001101", 49 => "10111110110010000010011100011001", 50 => "00111110010111011000111110010001", 51 => "00111101111011110011110001000111", 
    52 => "10111101100011100001010101110010", 53 => "10111110010010010001110010011001", 54 => "00111110000001001011001000001110", 55 => "00111101110101111000101010001011", 
    56 => "10111101000100011101110101100101", 57 => "00111110001010101010010011011001", 58 => "10111110001111111101010101101101", 59 => "10111110010111111010010011111111", 
    60 => "00111110100000100010111000001101", 61 => "10111101000100111100111011101101", 62 => "00111110010111111000111001101100", 63 => "10111110000001010101001000010011", 
    64 => "00111101100000001001111101111010", 65 => "10111101110010100010100001111001", 66 => "00111101101010100011001001011110", 67 => "00111101100011001101100000110111", 
    68 => "00111101010110011011010110101001", 69 => "10111100001010100010110111010001", 70 => "00111110010000011100010010110100", 71 => "10111110001001111100100110100111", 
    72 => "00111101011001100101101001100111", 73 => "00111110000011010111011011111111", 74 => "10111100001110111100100101100101", 75 => "10111110100101011110110100110011", 
    76 => "10111101101100011110010110010111", 77 => "10111101101001000101100011011000", 78 => "00111101110101110111010000101101", 79 => "00111110100110100000010001101011", 
    80 => "10111110000000101001011110010110", 81 => "00111110101010101000000110010001", 82 => "10111110010000111000110011100011", 83 => "10111110000001111100100011101001", 
    84 => "00111110000100010010110110000001", 85 => "10111101000000001001010001111010", 86 => "10111101110100111000010000001110", 87 => "00111101100010001111001101100001", 
    88 => "10111100100101010000101011101010", 89 => "10111101100110011110011000101000", 90 => "10111110101011010011100010111000", 91 => "10111110101010111010010010111010", 
    92 => "00111110001101001010101100110011", 93 => "00111101001000111101100100110000", 94 => "10111110001011011110100000000001", 95 => "00111101110001011100110001001110", 
    96 => "10111110000110111110000010110111", 97 => "10111101110110111011000001011110", 98 => "10111101001100111011001110110111", 99 => "00111110000010011010110101110110", 
    100 => "00111100111101101111101101011111", 101 => "10111110100000000011001010111010", 102 => "10111101111001000100001010111000", 103 => "10111101111000011001011110100010", 
    104 => "10111100011111101111100000001101", 105 => "10111010100011011010111100000000", 106 => "00111110100100001101001000001000", 107 => "10111110000010000110001010110000", 
    108 => "00111110110100110101111111101000", 109 => "00111101110010111011101111010000", 110 => "00111101010000001110000111011010", 111 => "00111110010110110110111011011000", 
    112 => "10111101110010111000010111101001", 113 => "10111110010111010000100101101100", 114 => "00111110000010100111101111111000", 115 => "10111110011101000110010110110000", 
    116 => "00111100100101001000100011010010", 117 => "00111110100111010000111010111111", 118 => "00111101110110100110000101100000", 119 => "10111010110001000110101010101001", 
    120 => "10111110010110011101000101100110", 121 => "10111110001110001100000000011011", 122 => "00111100110010111001010011111111", 123 => "00111101000111100001001000110100", 
    124 => "00111101011110010110001100111001", 125 => "00111110101011000100001011010000", 126 => "00111101101101111111101100001101", 127 => "10111101100101001010110000110010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

