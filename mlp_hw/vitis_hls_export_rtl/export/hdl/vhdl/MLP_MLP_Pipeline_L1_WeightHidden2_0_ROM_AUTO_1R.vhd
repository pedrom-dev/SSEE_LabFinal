-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_0_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_0_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110101011010101011100100111", 1 => "00111100111101110011001101001000", 2 => "10111110001100011100100010001101", 3 => "00111010101111101101001111100110", 
    4 => "00111110001111101010100111110101", 5 => "10111110010000000010111111101111", 6 => "00111101110011001010100010010000", 7 => "10111101111101100111011100001110", 
    8 => "00111101010000111001111000101010", 9 => "00111110011000010001010101111111", 10 => "00111110000111100011010101101101", 11 => "10111110001111111001000000000101", 
    12 => "00111101001000010001111101000101", 13 => "10111100111100001100000101111001", 14 => "00111110011100110101001000111110", 15 => "10111110101110010100110110111111", 
    16 => "00111100101101000101010000010101", 17 => "10111011100001111101000110110111", 18 => "10111100001001100010111001111101", 19 => "10111101111101110100111100011000", 
    20 => "00111101110000111110111111000100", 21 => "10111101000000000000010101111111", 22 => "00111101101011000001101100000101", 23 => "10111110000101110101000011100001", 
    24 => "00111101011100101000101100010000", 25 => "10111101000010010011110111110111", 26 => "00111101000111110010111000111011", 27 => "10111101101101101101100110010110", 
    28 => "00111110011100010100101111111111", 29 => "10111101110101101010101101111011", 30 => "00111100101010111011111011000000", 31 => "10111101100000000100000111011000", 
    32 => "00111110100010110000110101110111", 33 => "10111110001010011110010001101000", 34 => "00111110000011001101101010100011", 35 => "10111100111110100010001001010110", 
    36 => "10111101010000111000101101010110", 37 => "10111110000100100110100011100000", 38 => "00111110001000110101110000010011", 39 => "10111101101010000101001011011101", 
    40 => "10111101101110111111101011111100", 41 => "10111110000011100011010100110111", 42 => "10111101001111101101110111000100", 43 => "10111110000000001011110001111111", 
    44 => "00111101111110111000100010010101", 45 => "10111110011000000100111011001110", 46 => "00111110000101010100011111010110", 47 => "10111110001000100111011001100111", 
    48 => "10111110010001001111011000010001", 49 => "10111101110011011010110001011001", 50 => "10111101111011000010101011011100", 51 => "00111110001011001100000000000000", 
    52 => "10111011100011001000000000101100", 53 => "10111011000000101111010111101001", 54 => "00111110000110101000000000011001", 55 => "00111101101111110100001110010110", 
    56 => "10111101011000100101000111001100", 57 => "10111100100000110000110101010001", 58 => "10111101010010111010000100101011", 59 => "00111100010110100000010001001110", 
    60 => "10111101110111111110011111110110", 61 => "00111101111111011101001110001111", 62 => "00111101101111110011111100010101", 63 => "10111110100110111110111001111000", 
    64 => "10111101101101110011100110001111", 65 => "10111110000101110000100000110110", 66 => "10111110001110111011100010010000", 67 => "10111101000111010100000011010000", 
    68 => "00111110001100010001110101111100", 69 => "10111011101110010000010101011010", 70 => "00111101001110100010011111000111", 71 => "10111110100101111110100001111000", 
    72 => "00111110001100111110001010011110", 73 => "00111101111011100110110001000110", 74 => "10111110001101001101100110001000", 75 => "00111101011000000000100011011100", 
    76 => "00111011101011100110101011100010", 77 => "00111110000101110000001001000011", 78 => "10111110001001011001001101100000", 79 => "00111110011101011001110011101011", 
    80 => "00111101010000100001000110001110", 81 => "00111110001011001011010101101011", 82 => "10111110001111010000010011100000", 83 => "10111101100011100010011000110010", 
    84 => "10111100101010100100111100111111", 85 => "10111110001110110001011011011001", 86 => "00111100111010001110001111110101", 87 => "10111100110011010000101101111100", 
    88 => "00111101100100011111100111000000", 89 => "10111110010000000011111111011100", 90 => "10111101010011110001001001001100", 91 => "10111110000000000010110010101011", 
    92 => "00111110010111010000010101110110", 93 => "10111110000011101001100001101101", 94 => "00111110001111101101101100100000", 95 => "10111101100011101100000100000011", 
    96 => "10111110000110101001111011000001", 97 => "00111100111000001001100001010100", 98 => "10111101110001000010011110001101", 99 => "10111100110010101010111010101010", 
    100 => "00111100000110001011010110101110", 101 => "10111110000110011100110011100101", 102 => "00111101011010100110000000110001", 103 => "10111110100011100100110010100101", 
    104 => "10111101001101110100000011111010", 105 => "00111101101110101110101010101010", 106 => "00111110000100100111011111100101", 107 => "10111100110001001010011110101010", 
    108 => "00111110100001011110101000000000", 109 => "00111100000010000110100011111010", 110 => "00111100111101100010001101100011", 111 => "00111100110111011100111101011001", 
    112 => "10111110001101011011111011110101", 113 => "10111110000110110000100001111100", 114 => "00111101110010100111101011001100", 115 => "10111101100111101111101110011110", 
    116 => "00111101000110110010111110000111", 117 => "00111110000001011100110110010110", 118 => "00111101011100110110111000100001", 119 => "00111110011000101011111001011001", 
    120 => "00111110000010001000001111000100", 121 => "10111110110101011100000100101100", 122 => "10111101111011001001001111000011", 123 => "00111100111010111010010001011001", 
    124 => "00111110000001100011111000110000", 125 => "00111011011110100001001010000000", 126 => "00111101111100001110010101000101", 127 => "00111101100110101011100010000010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

