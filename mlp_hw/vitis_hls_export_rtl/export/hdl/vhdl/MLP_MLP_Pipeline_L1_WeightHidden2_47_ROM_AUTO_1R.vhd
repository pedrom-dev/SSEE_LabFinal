-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_47_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_47_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101111110101101110000011011", 1 => "10111111000001101100100101100001", 2 => "10111101100011111101111011000001", 3 => "10111100100000001101110100001010", 
    4 => "10111101000101001010111101101101", 5 => "00111101001100011111100000111011", 6 => "10111110010001000000011100001010", 7 => "00111110111110111000100101010110", 
    8 => "10111101101111001110100110100000", 9 => "10111101110010011100111110100001", 10 => "00111110001100110110110011011110", 11 => "10111101110100100010111111000010", 
    12 => "00111100001000100010010001011000", 13 => "10111110101001110010001010101001", 14 => "00111110000101111011101100100111", 15 => "10111101101110100100000010110001", 
    16 => "10111110101011111010100111101100", 17 => "10111111000001110010100110000001", 18 => "10111110100000111111111110101100", 19 => "10111101110000101101100011000101", 
    20 => "10111110110010000101100110000100", 21 => "10111110001010010000100101010110", 22 => "00111101000111101101111000111010", 23 => "10111101011010101010101011100100", 
    24 => "10111100111110011010100101100100", 25 => "10111110100110000010000001100100", 26 => "10111101110001111001010010110111", 27 => "00111110001110111011100010010101", 
    28 => "10111110011110111110110010111100", 29 => "00111101111111000101010010100110", 30 => "10111110000110101100010110100010", 31 => "00111101011110111000111000010000", 
    32 => "00111110001100000101110110110101", 33 => "10111101001101000101111010011010", 34 => "00111100111100100010000001011001", 35 => "10111110100000010110010010100010", 
    36 => "00111110100010110111101001000001", 37 => "00111101111001000110100010100010", 38 => "00111110101001001000110111101111", 39 => "00111110010101101011000011001101", 
    40 => "10111110010100111110100011001011", 41 => "10111110011110011110001011001000", 42 => "00111110000011100110000010111001", 43 => "00111100100001110110101111111010", 
    44 => "10111110110111111101010000010000", 45 => "00111101100011110000001110110101", 46 => "10111101100001111101111011001101", 47 => "00111110001111010100101001011110", 
    48 => "00111101110010110111110000001111", 49 => "00111101010001010111010000110110", 50 => "10111110010000010001000001001100", 51 => "10111110111111010111010100000100", 
    52 => "00111110001100100110110111101001", 53 => "10111110000111100010001101001111", 54 => "10111011001001110001001011111111", 55 => "10111101011100101100110110011101", 
    56 => "10111110000111110110101111111010", 57 => "10111110110111111110101101011100", 58 => "00111110011101010101110010100111", 59 => "00111100110011101111111011100110", 
    60 => "00111101010000100000101010000001", 61 => "00111110111100010101001110000000", 62 => "10111110011100011111001010101111", 63 => "00111101100000001001010110101011", 
    64 => "10111100111000101000011110001010", 65 => "10111101101001000000011001100111", 66 => "10111101001010110111011010101010", 67 => "00111110000100100001110110011010", 
    68 => "00111110011101000100011101010101", 69 => "00111110001000111100110000001000", 70 => "10111101010001100001100110100010", 71 => "10111110000101101110111000110010", 
    72 => "10111101101101000011101110101101", 73 => "10111110000101110011100011010111", 74 => "10111110001110011001111001111111", 75 => "10111101000101100101010110100101", 
    76 => "00111011101110001011101101110011", 77 => "00111101101011010001101101011101", 78 => "10111110001100000011000100011100", 79 => "00111101111100010000000011010000", 
    80 => "00111110011000010010010010011000", 81 => "10111101011111001010001101001100", 82 => "10111110100101110110010111000101", 83 => "00111110101001001100001011010101", 
    84 => "10111110001110010010000101101100", 85 => "10111101101000000101001010011110", 86 => "00111101101001111100010110101010", 87 => "00111110010011000101100100110111", 
    88 => "10111101110111100100101001101011", 89 => "00111110000110111100100001001011", 90 => "00111110111101111100100011010110", 91 => "00111110000111101010001011111011", 
    92 => "10111101000000001110001100110111", 93 => "00111101111101000111101110100100", 94 => "00111101100111100110110011111000", 95 => "00111110010000010110100100000011", 
    96 => "10111101101110111011100101010111", 97 => "00111110000110100100011001110100", 98 => "00111110100001110000011110000000", 99 => "00111101110100111111110011010111", 
    100 => "00111110000111100101001111000011", 101 => "10111101000101110000011011010010", 102 => "10111110000011000001011110011001", 103 => "10111101110110101110111111001000", 
    104 => "00111110001101101011000100111101", 105 => "00111101100001010000001100111110", 106 => "10111110000011000011011100000100", 107 => "00111110101111001111000101001111", 
    108 => "10111110010101110100011011100001", 109 => "10111101010111101001010100000100", 110 => "00111101110010011111011011010000", 111 => "10111110000111011011101100100000", 
    112 => "00111101000001100111110001001011", 113 => "00111110010110100000001011001000", 114 => "00111101110110110101010000101011", 115 => "00111101100111000101100011000100", 
    116 => "10111110100000000011101100000100", 117 => "10111110010100100110101111100111", 118 => "10111110000110101111010110101110", 119 => "10111110000111000111000011011101", 
    120 => "00111101100100101110001010111111", 121 => "00111101000001010101111011011111", 122 => "10111101111001111000001101000011", 123 => "00111110000100101000000010010111", 
    124 => "10111101011100101111111000100010", 125 => "00111110001000100100000100101111", 126 => "10111110010000000110011010011110", 127 => "00111101110010110001111011010101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

