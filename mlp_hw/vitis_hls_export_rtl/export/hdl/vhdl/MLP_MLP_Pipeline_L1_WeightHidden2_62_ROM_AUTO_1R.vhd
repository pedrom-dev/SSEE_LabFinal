-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_62_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_62_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110001111001000111110100110", 1 => "10111110001001000001000101110111", 2 => "10111110000101110001110111111111", 3 => "10111101111000000011001110100111", 
    4 => "10111110010110011010100110100101", 5 => "00111110000101011111110101011101", 6 => "00111101001110101101100011010111", 7 => "10111110010101101001011100100101", 
    8 => "10111110000100000001101001111100", 9 => "10111110000110001100001000000011", 10 => "00111110000110000010000101101010", 11 => "00111101000111011010100011011000", 
    12 => "10111110011001100000011001110010", 13 => "00111110000111011101110001111100", 14 => "10111110100000101010110111010110", 15 => "00111110010000101000110011111010", 
    16 => "00111110010010111100101001011011", 17 => "00111110001101110111100100010011", 18 => "10111101001110100110001100000000", 19 => "10111100101100001101101000011101", 
    20 => "10111101101111111011011110110011", 21 => "10111110010010100010100110000010", 22 => "00111101100000001011100110001110", 23 => "00111110100000111111011011000101", 
    24 => "10111101000100110110010101100101", 25 => "10111101110101000100011111001011", 26 => "10111101111010110000011011001010", 27 => "10111110000000100001101100011111", 
    28 => "00111011100110101110101011010010", 29 => "10111110100010000011100010111110", 30 => "10111110011101010101001001001100", 31 => "00111101100100111001101100111001", 
    32 => "00111100101000100111010110001011", 33 => "10111101001010111110101011100010", 34 => "00111100110111001111011000101011", 35 => "10111110000110111011011011000101", 
    36 => "00111110110000001111010111111001", 37 => "00111110010110110000101100011101", 38 => "10111110100101001111111000101111", 39 => "10111110110011000011000101000010", 
    40 => "10111110101101001101111101000100", 41 => "00111101110111010101011110110000", 42 => "00111110110100111101111000001101", 43 => "00111101011100110100101011111110", 
    44 => "10111101100111001010010100111001", 45 => "10111101101011110000111010110100", 46 => "00111110010111111011111001001000", 47 => "10111110001100000100100000110100", 
    48 => "10111101110110010010000110010011", 49 => "00111110100010011100011101001010", 50 => "00111101100101100010111000001111", 51 => "00111101111000100101000111100010", 
    52 => "10111110001111001110111011011100", 53 => "00111101110011111111101010100010", 54 => "10111110100011010000110010011000", 55 => "10111101000101010010011101001100", 
    56 => "00111110011000010011001110011100", 57 => "10111101000010101001000111100111", 58 => "10111101101011001010100001010101", 59 => "00111110010010011001100111101001", 
    60 => "10111110011001110011011111100100", 61 => "10111110010110111100000010110100", 62 => "10111110000000010101101000001101", 63 => "00111110000110100010000000111111", 
    64 => "10111110010111110101101100100001", 65 => "10111100110010111001010100110101", 66 => "00111101100010001011110110110000", 67 => "10111110010100110100000011101110", 
    68 => "00111100101010111011110010000111", 69 => "10111110010001000001110010110110", 70 => "10111100110101110110010100110010", 71 => "00111110100011000011011110010001", 
    72 => "10111100110000000110110101110011", 73 => "10111101001001000010000101011000", 74 => "00111110001000101111010110000011", 75 => "00111110001000000011010110101010", 
    76 => "00111101100100000100011110000110", 77 => "00111110001101011001100101111010", 78 => "00111110001100110011111101010100", 79 => "10111110100000010110110001010010", 
    80 => "10111110000011101000000111010001", 81 => "10111110110000100000010011000000", 82 => "00111110110000101110110000111001", 83 => "00111110010000001011001011111011", 
    84 => "10111010110011000111110001000101", 85 => "00111101100011011110010001101110", 86 => "10111101100101011111010011000011", 87 => "00111110000010101100011010011101", 
    88 => "10111110000100101011011100100010", 89 => "10111100100110011101100111001011", 90 => "00111101101000001001100110000010", 91 => "00111101101011011110011111110000", 
    92 => "10111110101001001001010111001111", 93 => "10111110000100010110011001100010", 94 => "00111100110101101111110100000010", 95 => "00111110000000110001000001000001", 
    96 => "00111110001010111000011001110010", 97 => "00111110100101011111000100001111", 98 => "10111101101110001000111011010101", 99 => "00111101001110011110101011100011", 
    100 => "10111110010110110101000011011110", 101 => "00111110011100111001110000011101", 102 => "00111101010011100101011001010111", 103 => "00111100101000110010111001011110", 
    104 => "00111110011000100101000000010001", 105 => "10111101111011111101110101100000", 106 => "10111110100011001111100110101100", 107 => "10111101111001001111001111111111", 
    108 => "10111110101010000111010101110000", 109 => "10111101001111011110000111010011", 110 => "10111110101101010100011111000010", 111 => "10111110110110101001010100000100", 
    112 => "00111101011010001001011101010011", 113 => "00111110000110010111010111000000", 114 => "10111110101110110010100101111000", 115 => "00111101101001010001001011011100", 
    116 => "00111101100110100101101000101111", 117 => "10111110000001100010010100101011", 118 => "00111110000011100011100011101110", 119 => "00111101100101011101011110011111", 
    120 => "00111101010100110111111111110101", 121 => "00111110100110111010011101100101", 122 => "00111101110100100111100110111001", 123 => "00111101001000111111011101111100", 
    124 => "10111101110110111111111111000011", 125 => "10111110111101011110010100111110", 126 => "00111101100010111011101000000101", 127 => "00111101101011110101111111101111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

