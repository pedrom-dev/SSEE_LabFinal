-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_5_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_5_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110100010111111110011001011", 1 => "10111110000011011010110111111111", 2 => "10111101111100011010100001110100", 3 => "10111110101010011011001001000101", 
    4 => "00111101101001111110101010101011", 5 => "00111101011001000100111100011111", 6 => "00111100100111001111011100010111", 7 => "00111101100101000100100101111010", 
    8 => "10111101100111001010111011110101", 9 => "10111101010110110001001100101111", 10 => "10111111000110011001100111100101", 11 => "00111110111000110000101000111011", 
    12 => "00111100100110101001110000011000", 13 => "10111101101011011011101000101111", 14 => "10111110100001001010101000010000", 15 => "00111101111101011001001101000101", 
    16 => "10111110001010110000101101000101", 17 => "10111110100000011000111111000110", 18 => "00111101101000111000001010100101", 19 => "00111101111001101101000000000001", 
    20 => "00111011111111001000100110010011", 21 => "10111101110011101111111010101111", 22 => "10111110010000101101011100010010", 23 => "00111110001010110000011101000011", 
    24 => "10111110011011110010101100101000", 25 => "00111110011010011011111111001111", 26 => "10111101111010010010111111001010", 27 => "00111110001111111100001100110001", 
    28 => "10111110111111011010101111011001", 29 => "00111110001101101011011110011001", 30 => "00111101101011011111010001101011", 31 => "10111100111100111111111110100111", 
    32 => "00111101010011011011111110001100", 33 => "10111110100001001100011110001110", 34 => "00111101100010111000100001000101", 35 => "00111110001000001100101000111011", 
    36 => "10111101100111010011001111110110", 37 => "00111110100101110010000100101001", 38 => "00111110101101011010101010100101", 39 => "00111110110001000101011101100010", 
    40 => "00111110101101101011001001000100", 41 => "00111101110011010010010011011001", 42 => "00111101010011111101010111010100", 43 => "10111011101000111001110010010010", 
    44 => "10111110000111100110111111010010", 45 => "00111110011000011100101001110100", 46 => "10111110111110000101111110111101", 47 => "10111101010110001010101101101010", 
    48 => "00111110010111001101101011000001", 49 => "10111101110101101100100001010000", 50 => "00111010101100010101010011001100", 51 => "10111110110111001011101000110001", 
    52 => "00111101010010101101000101010010", 53 => "10111101100010011110110110011101", 54 => "10111100010101111010010111001111", 55 => "10111110001110101000111101101001", 
    56 => "00111101011110111111101111111010", 57 => "10111010101100110000001101001101", 58 => "10111101101000011000000010100101", 59 => "10111100011111110000111001001000", 
    60 => "10111101011110001010111111111010", 61 => "00111110100000001100010010101000", 62 => "10111101011101000100110110001010", 63 => "00111110001111110000000100101101", 
    64 => "00111110000101011101100001101010", 65 => "00111110010100111110001001000100", 66 => "10111100100100000000101011110100", 67 => "00111101111010110010000011000101", 
    68 => "10111110010011101111011001010101", 69 => "00111101111001111000010111101111", 70 => "10111101110111010110101010110100", 71 => "10111110000001101010110000001001", 
    72 => "10111101001010111011101110111000", 73 => "10111110101010001100000111010110", 74 => "00111010110110010110110100011001", 75 => "10111110010010100100100110011111", 
    76 => "00111011001101010000010100110000", 77 => "10111111000000011001101000000011", 78 => "00111101011101001000100011000110", 79 => "10111110100111101100101111101100", 
    80 => "00111010110000100010001110011111", 81 => "10111101101110011010111000010000", 82 => "10111101101110011011101000111110", 83 => "00111110010000100011111101010010", 
    84 => "10111101110110001110100100110111", 85 => "00111010001101110010011011110011", 86 => "00111101001000110000101101111110", 87 => "00111101011000111011110110011010", 
    88 => "10111110000110111000000110111000", 89 => "00111110001111111110011110001111", 90 => "00111110010100010110001110111101", 91 => "00111110100100011011000100101100", 
    92 => "00111101110101110001011111110111", 93 => "00111110100011101010101110000000", 94 => "10111110111100111000011100111111", 95 => "10111100111011001001111000001001", 
    96 => "10111101111110111010101011100010", 97 => "10111110000011101010000000111110", 98 => "00111110001011111010010000010000", 99 => "00111110010000010110010001100110", 
    100 => "10111101001001001110100010001000", 101 => "00111101011001000010111000011101", 102 => "10111101101111011101000111000100", 103 => "00111101100100011001000111010111", 
    104 => "00111100100011110001100110010011", 105 => "10111101000111001010010110011011", 106 => "10111101101010110000100011001101", 107 => "10111110101100101101011100001101", 
    108 => "10111110001011001010000110010111", 109 => "10111101010111110101111111111010", 110 => "10111100100000001100000100000110", 111 => "10111101010001001111110110000110", 
    112 => "00111110100000000111011001000001", 113 => "10111010001001011100111100000111", 114 => "00111101011110111011010100010010", 115 => "00111110110000100111010001010010", 
    116 => "00111101100111101111110110000011", 117 => "00111101000111101101101001110110", 118 => "10111110010010000110000000110011", 119 => "00111010111011010101100001011110", 
    120 => "10111110000000100101000011110100", 121 => "00111101110011011100101101100100", 122 => "00111110000001101011101000010000", 123 => "10111110010100001000000110011100", 
    124 => "10111110101000010010110111110010", 125 => "00111101011010110010000011011011", 126 => "10111110100000110111000010010101", 127 => "10111110101100100111001100010001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

