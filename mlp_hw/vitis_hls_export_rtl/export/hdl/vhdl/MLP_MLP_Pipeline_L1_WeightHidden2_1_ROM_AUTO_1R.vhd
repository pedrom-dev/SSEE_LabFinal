-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_1_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_1_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110111010001111010101011001", 1 => "10111110110010110010001010111001", 2 => "00111110001010110100001011000010", 3 => "00111110010100111110011001010110", 
    4 => "10111110101100010000101000000110", 5 => "00111110001111000010111000000111", 6 => "10111101100101110110010101100011", 7 => "00111110101000101000101001001110", 
    8 => "10111110101010100111101101000101", 9 => "10111110110011000010101110100111", 10 => "10111101101110010010111010001101", 11 => "00111101111100111000011110101111", 
    12 => "00111100001111001011001110111011", 13 => "10111101101000000101111101101001", 14 => "10111110001001000011111110011000", 15 => "00111110110101111000101010011100", 
    16 => "10111101011011110111000001010110", 17 => "10111110110001010001000010011101", 18 => "10111101111010001100110100011110", 19 => "10111110000100010010110101000100", 
    20 => "10111110000101100110100110100100", 21 => "10111100011000001110011110001100", 22 => "00111101000110010011011110100010", 23 => "10111101011001111110010010011011", 
    24 => "00111100110110010101001100110011", 25 => "10111110100001111101001011000000", 26 => "10111110000101000111011001111011", 27 => "10111110010100110010001100101101", 
    28 => "10111110001110000000010000111110", 29 => "00111101100101000011110011101001", 30 => "10111110100000111000010110100000", 31 => "00111101100011100000000011110001", 
    32 => "10111110100101111010100110011000", 33 => "00111110010100000111101010001111", 34 => "10111101101010011001100100111010", 35 => "10111110001101111100111001110000", 
    36 => "00111110100001001110100001001111", 37 => "00111101111010111010110000111100", 38 => "00111010111100011011111100100000", 39 => "00111101011100001111100010001001", 
    40 => "10111101100110100101001000100101", 41 => "00111101000011010110100001000011", 42 => "00111110101011110001101110111000", 43 => "00111110101011100000111000100100", 
    44 => "10111110010100111011011010001000", 45 => "00111110110001100000100100111010", 46 => "00111110011111001111111010100110", 47 => "00111110010100010101000011101100", 
    48 => "00111101101111001000000011011000", 49 => "00111110000110101001010101011100", 50 => "00111110011111101101110100001001", 51 => "10111110000101100000111101010110", 
    52 => "00111101001101111000110110001000", 53 => "00111100100011000011101010111100", 54 => "10111110110001101101100010111101", 55 => "10111110001100001111100011100010", 
    56 => "00111101100101001111100011111001", 57 => "10111110010000000110001100110011", 58 => "00111110011011011001100011001100", 59 => "00111011101011101111000111000101", 
    60 => "00111101110110010001100110100100", 61 => "10111110010001011000110111010001", 62 => "10111110101110100111110110111010", 63 => "00111110101110100001011100010011", 
    64 => "00111110011001011010100000110011", 65 => "00111101101100111111101111111010", 66 => "00111110100100101000001111001111", 67 => "00111101001111010001000101110110", 
    68 => "00111110011101100001010111010000", 69 => "10111100011000111011010111111101", 70 => "10111101011101111010010100011000", 71 => "00111110101000000100000011010110", 
    72 => "10111110100001001001010011111100", 73 => "10111110101000100100001011011001", 74 => "00111101110011100000000000010110", 75 => "00111101101110111111011001100000", 
    76 => "10111110000111000011011010010111", 77 => "00111110010101011111100001010111", 78 => "00111101110111101100000001110101", 79 => "10111110110110001001010001011100", 
    80 => "10111110001000010110111101010010", 81 => "10111110010011100000110001111101", 82 => "10111100000100100101111101100011", 83 => "00111110101110010011010000001110", 
    84 => "00111101011101011001100001010011", 85 => "00111110001011110110001011011110", 86 => "10111110000100010011010110000111", 87 => "00111110011100110100101001101100", 
    88 => "10111110001001100010101001111111", 89 => "00111110100000011110001011011000", 90 => "00111110110000010101011011000011", 91 => "00111110101110010110111000000000", 
    92 => "10111110010110001101101010111001", 93 => "00111100100100010101111011111101", 94 => "10111110010010000111100001001010", 95 => "00111110010100011110010101001011", 
    96 => "00111110011101011010100010000011", 97 => "00111110101001011010001110101100", 98 => "00111110000100110111100100011110", 99 => "00111110001110010001101011111010", 
    100 => "00111101110000111000010100011000", 101 => "00111110101000111111000111010001", 102 => "00111110001101111011011100000100", 103 => "00111110010000110111101001101101", 
    104 => "10111101001110110101110111100010", 105 => "00111101000110001000101100000001", 106 => "10111110011011110101000000110111", 107 => "00111110011100101011101101010100", 
    108 => "10111110111100001111010111001110", 109 => "00111100011101000100100001011100", 110 => "00111100001100010000100100100010", 111 => "10111110000001100010011110111001", 
    112 => "00111110100110011001011101001101", 113 => "00111110101110110010110010000001", 114 => "10111100110110100110100101101110", 115 => "00111110011100010011010101110001", 
    116 => "10111110010100101101110001010100", 117 => "10111110101111101001110010011001", 118 => "10111011100001010100000110110011", 119 => "10111110110011101110111011010111", 
    120 => "10111101101101011001100100110000", 121 => "00111110110011000110100001000111", 122 => "10111100110101101111010000011000", 123 => "10111110000010000100110100011110", 
    124 => "10111110000101011111011110000100", 125 => "10111101110111000000011110001011", 126 => "10111110010101010101111100101001", 127 => "00111101101011001010000010110110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

