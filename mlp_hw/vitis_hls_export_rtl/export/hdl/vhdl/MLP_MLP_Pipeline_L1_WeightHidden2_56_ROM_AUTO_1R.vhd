-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_56_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_56_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111100110000100001010000110111", 1 => "10111110010010101000011111010010", 2 => "10111100100110001000010111011000", 3 => "10111110000000011111101001000101", 
    4 => "00111110010100111111101111100001", 5 => "10111101111111011001001001001101", 6 => "10111101100010100111100101000010", 7 => "00111110101001000010110111111110", 
    8 => "10111101001011100111001100001101", 9 => "00111101110000111001011100010100", 10 => "10111110001110010010100001111011", 11 => "00111110011101000001011100111001", 
    12 => "10111011010101111001100100101111", 13 => "10111110010001100010011100111010", 14 => "00111110100011011111111010100111", 15 => "00111100111001001100000111100000", 
    16 => "10111110101010011101000011010000", 17 => "10111110110111111011011111000100", 18 => "10111110010101111111110000010011", 19 => "10111101100011000001001000110111", 
    20 => "10111110001010010011111100010100", 21 => "10111110000011010011101011101001", 22 => "00111110011100010001011011010110", 23 => "00111101110011011101101110010000", 
    24 => "00111101110010011000101011011111", 25 => "10111101110110101110110001101100", 26 => "10111110000101100011011011100110", 27 => "00111101011111000111001110000001", 
    28 => "10111110101101011100101011001110", 29 => "00111110011000111110101110001001", 30 => "00111101101100011011000000111000", 31 => "00111110000001111100011110001111", 
    32 => "00111110010100011111111001101001", 33 => "10111101011110100110101110010100", 34 => "00111110100001010110110100111010", 35 => "10111101011001100001011110011010", 
    36 => "00111101001100110010000000110001", 37 => "00111101001011010110111111001001", 38 => "00111110100100110111000011011011", 39 => "00111110110010001001110110101000", 
    40 => "00111101001100111111111000101010", 41 => "10111110100000011000000000010011", 42 => "00111101011001011000100010100011", 43 => "10111101000001011111010100000111", 
    44 => "10111110100001110000011000110001", 45 => "00111110010000011001100110110001", 46 => "10111101011111010010101110100010", 47 => "00111101011101000101011010111100", 
    48 => "00111101110000010101101000001001", 49 => "00111110001100000101001001000010", 50 => "10111101101110100011000111011110", 51 => "10111110110110001001111110110010", 
    52 => "00111101100100010101011001110111", 53 => "10111110000100010001011000011000", 54 => "00111110010100110001011111101000", 55 => "10111101111101110100111000111011", 
    56 => "10111011101000100110000101111111", 57 => "10111110010110101000011100001101", 58 => "00111110011100001111011101101001", 59 => "10111110010001001100010000000101", 
    60 => "10111101110001100010101100010010", 61 => "00111110111000010100010110111011", 62 => "10111110001000010001001011010000", 63 => "10111011010110001111000010011101", 
    64 => "00111101111010000010011011111011", 65 => "00111101010001000101100101101100", 66 => "10111110000011101101110000100100", 67 => "00111110010000010100101100111010", 
    68 => "00111110010000010111010110011000", 69 => "00111110011000111011100100001010", 70 => "10111101110100100110110001100100", 71 => "10111110011010110010011000110001", 
    72 => "10111101011111010100001110101101", 73 => "10111110011110011100011001100100", 74 => "10111110100000000011110001010010", 75 => "00111101110101100010101101001100", 
    76 => "00111110000111100111010110111101", 77 => "10111110011011101101001111011111", 78 => "10111110101111010011101110011100", 79 => "00111101100000010000101011011110", 
    80 => "00111110010100001111101000001111", 81 => "00111101101010110010110100010000", 82 => "10111110101000111111000111010111", 83 => "00111101100111100100010101101111", 
    84 => "10111110011011110000110111010011", 85 => "10111110010010110111100011001111", 86 => "00111110010000010001010000001111", 87 => "10111101101001010100101000010011", 
    88 => "00111110001011100010010000010100", 89 => "00111101101111000101111101011000", 90 => "00111110010011010101010111101101", 91 => "00111101100000010010111101110100", 
    92 => "00111110001110001101100000110000", 93 => "00111101111010011100101010011000", 94 => "10111100111011110000110010100011", 95 => "10111101010101110101000010101111", 
    96 => "10111101101011101001111111100111", 97 => "10111101110111100001001111111100", 98 => "00111110001111000011010111110001", 99 => "00111101001000000111011000000010", 
    100 => "00111110010001000001101010101011", 101 => "10111101001011101100011111111010", 102 => "00111101111101110100000001111001", 103 => "10111110001000011010101010010010", 
    104 => "10111110100010110110111011001001", 105 => "00111110010000100001110101110111", 106 => "00111101101110011000010101001001", 107 => "00111101010011011100110101000101", 
    108 => "00111101111111111010000000011001", 109 => "10111101101010111011100100010110", 110 => "00111110001011010110101110110101", 111 => "00111110010011001000100100110110", 
    112 => "10111100110101010011111100100010", 113 => "00111100001100011100100010111010", 114 => "00111110110111110010011001111111", 115 => "00111101001011111110011100111110", 
    116 => "10111101100101111000101110010010", 117 => "00111100110111010101010111100111", 118 => "10111110011111011000101101110001", 119 => "10111100101110100111100011101101", 
    120 => "00111110001000010101110100101101", 121 => "10111110100010111011000001010010", 122 => "10111110000001100000101001010010", 123 => "10111101001010110100110110101100", 
    124 => "00111101100110100101110111100011", 125 => "00111011111111010000110101011100", 126 => "10111110100101000100111100110011", 127 => "00111100000110100001010111100001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

