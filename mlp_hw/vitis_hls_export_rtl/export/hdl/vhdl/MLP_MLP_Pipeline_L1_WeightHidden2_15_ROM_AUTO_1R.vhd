-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_15_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_15_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110100000111101101100010100", 1 => "10111110100001000001000111010101", 2 => "10111110100101110100111100110101", 3 => "00111110011111101010010110111001", 
    4 => "00111101100110101111010001100011", 5 => "10111110000100011011110011101000", 6 => "00111100001011001001100101011011", 7 => "10111100100111001111101110011001", 
    8 => "10111101110001100100101100010011", 9 => "00111101111111110011011001100100", 10 => "00111110101111100001100010011110", 11 => "10111110111000000010000110010011", 
    12 => "10111101100011000011110011101011", 13 => "00111110011001101111000111101010", 14 => "00111101000010001100011011000011", 15 => "10111111000011000101101001011111", 
    16 => "00111101110001101100101111101110", 17 => "00111101100111111101010101110100", 18 => "00111101010110010101011011000001", 19 => "00111110001100111110000100100111", 
    20 => "10111101110100111100010000110000", 21 => "10111101100000100110001101110111", 22 => "10111100100001110110110101000111", 23 => "10111100010001000110011001100001", 
    24 => "00111101010010000111101100001001", 25 => "00111101111111000101111000111010", 26 => "10111100000010100110101110001001", 27 => "10111110011011011100101110110101", 
    28 => "00111110011001000010010011100000", 29 => "10111110001011010111000101100111", 30 => "00111101100100111111100111000110", 31 => "10111100111010000011111111010000", 
    32 => "10111101100010111001111001100101", 33 => "00111101011010110110110101000110", 34 => "10111110001111010110100111100100", 35 => "10111001110111001011111110110011", 
    36 => "10111110100100000010100011101000", 37 => "00111110100100010111011000011100", 38 => "10111101011000011110101011011001", 39 => "10111110100010000011001011010100", 
    40 => "00111101100010111000011110011111", 41 => "10111011100000010000100111000000", 42 => "00111100111011011011000100110011", 43 => "10111110000100011000101010101110", 
    44 => "00111101000000110001010110100001", 45 => "10111110011010000110011111111100", 46 => "00111110001111110011100000100010", 47 => "10111110001101111011111010101100", 
    48 => "10111110101010110000010101111010", 49 => "00111101101100100111000000001101", 50 => "10111110100111100010011100110101", 51 => "00111110001011111101000010101001", 
    52 => "00111110101100111010111010000011", 53 => "00111101101111110101011010100010", 54 => "10111100011000100010000010100111", 55 => "10111100100011001110010000101010", 
    56 => "10111101101010000111000100010100", 57 => "00111101011001110101001111001111", 58 => "00111110010100111101100010010001", 59 => "00111101110111101000111110110011", 
    60 => "10111110000111011001101011000011", 61 => "10111110001011101000010100000001", 62 => "00111101011111111010001101011001", 63 => "10111110010001100000011101110101", 
    64 => "10111100000011001110110101001110", 65 => "00111011001001110101011011110001", 66 => "10111101110011011101011100110101", 67 => "00111101100111100010000111001111", 
    68 => "00111100000110110001110001100110", 69 => "00111101110011110010011101011111", 70 => "10111101110010001001100001100001", 71 => "00111100100111110101011000010111", 
    72 => "00111110001111111010010000011010", 73 => "00111100011000101100100000100001", 74 => "10111101000011111111110001010010", 75 => "00111110011111001000000010101001", 
    76 => "00111110001011110011110101110001", 77 => "00111110101100100010101001100011", 78 => "10111101111011010110000110111111", 79 => "00111101100101000111010001111101", 
    80 => "00111110100100000001111110111001", 81 => "10111110001111001000101111000011", 82 => "10111101100100101101010111111011", 83 => "10111101011111100011111110011110", 
    84 => "10111110001000111010010101100110", 85 => "10111110001110001101101111001000", 86 => "00111110001001101010101000111110", 87 => "10111101100110100110001110111111", 
    88 => "00111110101011010100010101101111", 89 => "10111110011001111011001110110001", 90 => "00111110000011011100100000111001", 91 => "10111100101101011000101001100001", 
    92 => "00111101100111001111110111101000", 93 => "10111101000010100111010110000000", 94 => "00111110011111001110010101101000", 95 => "00111011100010110011000110100010", 
    96 => "10111100111000000010010011011110", 97 => "00111110010010111101101000101000", 98 => "10111100011110111101000100100111", 99 => "10111110100000110111100101110011", 
    100 => "10111110100110111001101001110000", 101 => "00111011111100111011011011000110", 102 => "00111110110000111010100101000110", 103 => "10111101101001010111010010101011", 
    104 => "10111110001101010110000110000111", 105 => "00111101100001100111001000001011", 106 => "00111110010010111101111101010110", 107 => "00111110101100000110010011000100", 
    108 => "10111101110100101001010011111101", 109 => "00111101100100010100001010011010", 110 => "10111101000010111101101111011001", 111 => "10111100111110011101010100001001", 
    112 => "10111101111000011111011111101101", 113 => "10111101000001110000001001000101", 114 => "10111101001001010010001101011000", 115 => "10111101101110110101101100011011", 
    116 => "10111110001011011111000100001110", 117 => "10111101110101000001101100111111", 118 => "00111110100011001111010101010000", 119 => "00111110010001011000110001111101", 
    120 => "00111101100100110100101100000110", 121 => "10111101110100100011001101000010", 122 => "00111101011000110011011001111001", 123 => "00111110000100010110101011010110", 
    124 => "00111110000000011001011101010110", 125 => "10111110000001111001000011011000", 126 => "10111011101100111110111011000101", 127 => "00111100100100101000010101011110");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

