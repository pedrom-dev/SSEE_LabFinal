-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_7_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_7_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110001110001011101101010000", 1 => "00111110111000101111011000111110", 2 => "00111110001111111001101111111001", 3 => "00111101010101101101011101001101", 
    4 => "00111110011101100111110111011000", 5 => "10111100100011110111000111010011", 6 => "00111101110011111100101101100010", 7 => "10111110001001100100011100011010", 
    8 => "00111101010000100011101001101101", 9 => "00111011101011111111001000100001", 10 => "10111101101000011100111011110110", 11 => "00111110101011010101011101001110", 
    12 => "00111110100100000010110111010000", 13 => "10111100101101111110111100111010", 14 => "00111110010001101001100000110001", 15 => "10111101110010000111010110100111", 
    16 => "00111110001101111101001010010001", 17 => "00111110000011110001011110101010", 18 => "00111101101110100100011101011011", 19 => "10111110101110001000010000101100", 
    20 => "00111110100000001001000010011010", 21 => "00111110111001110010011001111110", 22 => "10111101001011000111100101011101", 23 => "10111110100011011100100110011010", 
    24 => "10111100101011011000000111011110", 25 => "00111101101100001110100100001101", 26 => "00111101110111011100011010000111", 27 => "10111100100110110111101011010000", 
    28 => "00111110000110101011100110110010", 29 => "10111110010110100110100011010010", 30 => "00111100100000001110101101001000", 31 => "10111101010101111010110111001001", 
    32 => "10111101101111101010111101101111", 33 => "00111110101111100001110110100010", 34 => "10111110000010011010111110011101", 35 => "00111111000111000011110100111000", 
    36 => "10111110101010011100100011011111", 37 => "10111110100111111001001000111100", 38 => "10111101001100101011000010100100", 39 => "10111101100110100000110111100000", 
    40 => "00111110101011010011011011001010", 41 => "00111110100000100001000000101010", 42 => "10111110101000001001001101000100", 43 => "10111110000010101111111111001100", 
    44 => "00111110010100001100100101010010", 45 => "00111101010110011111000000111100", 46 => "10111110010100110100101110101000", 47 => "00111110001001001100101000101100", 
    48 => "00111110100110011011110100010000", 49 => "10111101101011010010110110000111", 50 => "10111110001001111011000011010000", 51 => "00111110010001100111011000111111", 
    52 => "10111101010000110100001000000100", 53 => "10111101101111110010000100001011", 54 => "00111110100001110001111101100000", 55 => "10111101000100101011110000110101", 
    56 => "10111110010101110000011011011100", 57 => "00111110100110010010001011000110", 58 => "10111101101101001110111010001100", 59 => "00111101010010110110011011110001", 
    60 => "00111100001010010010010101010011", 61 => "10111110100111101111111111001110", 62 => "10111110100111001010100001111101", 63 => "10111101110011010011111100100010", 
    64 => "10111101010101100011100110011000", 65 => "00111110100011010010010110111010", 66 => "10111110010101111000011111010000", 67 => "10111110100111110010011011010010", 
    68 => "10111110101000000011101101110100", 69 => "10111101111100011011111001001110", 70 => "00111110001011000100100010100000", 71 => "10111110000011001011000011001110", 
    72 => "10111110000011001100100001011001", 73 => "10111110000100101110011000001110", 74 => "00111100101000100100001111011101", 75 => "00111110010011010001111001101101", 
    76 => "10111110011011111000100000000101", 77 => "10111100001101000101011101001011", 78 => "00111101011000001111111101010100", 79 => "10111101001001110100110101101111", 
    80 => "10111110111111110011010110110100", 81 => "00111110100111001001010011010111", 82 => "10111011000110101110101111100100", 83 => "10111110010110000111110010001111", 
    84 => "00111110011101101111101111011011", 85 => "00111100000100011000100001011110", 86 => "10111110001111010111101111110111", 87 => "10111101011101101011010001000100", 
    88 => "10111110001110001011000100011111", 89 => "10111101000000001011000100010000", 90 => "10111110101111100111010100111110", 91 => "10111110100000001011110000111101", 
    92 => "00111110111011001011111000010011", 93 => "10111110001000110010100111101000", 94 => "00111110100101001111001110011010", 95 => "10111110100010100000011101110101", 
    96 => "00111110001110000010010111000011", 97 => "10111111000001010010110010101110", 98 => "10111110000010010110110111110001", 99 => "00111101000001011011010000010100", 
    100 => "00111110101100000100110100011000", 101 => "10111110000011100010110101010111", 102 => "10111101101000010000100101000101", 103 => "00111110101010011000101000010000", 
    104 => "10111110110000101010000000101101", 105 => "10111110001110001010110111100011", 106 => "00111101000011010001111001011110", 107 => "10111101110010010000101001001101", 
    108 => "00111110000100100010100001000101", 109 => "00111110101010111101011100100111", 110 => "00111110111010010010011010111000", 111 => "00111110011001001000010000001111", 
    112 => "00111110101001100111100111101101", 113 => "10111110010101000101111010101011", 114 => "10111101110110101100010011001110", 115 => "00111010101001110110010100001001", 
    116 => "00111101110101000001000100000110", 117 => "00111110101000000010001111101101", 118 => "10111110111011110011011111101111", 119 => "10111110001111101110101100100010", 
    120 => "10111110110111010111110110001011", 121 => "10111100111100101001000001000110", 122 => "10111101101101001000100010001100", 123 => "10111101100100100000010111011010", 
    124 => "10111110101111011100001111110111", 125 => "00111110101000111100100100101110", 126 => "00111110010001101010111110011001", 127 => "00111100011110011000010110101000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

