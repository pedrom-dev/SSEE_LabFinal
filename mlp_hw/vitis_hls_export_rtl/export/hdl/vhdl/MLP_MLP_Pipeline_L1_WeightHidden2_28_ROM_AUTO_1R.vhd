-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_28_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_28_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110000001001110010000010101", 1 => "00111111000110100101001110110101", 2 => "00111101110100101001100110101110", 3 => "00111101101001001110100101000010", 
    4 => "00111110000000111100101010110011", 5 => "10111110001001000101000001010111", 6 => "00111101110101100100011010011110", 7 => "10111110111100100101110100110011", 
    8 => "00111110000000001101010011001110", 9 => "00111011111001101000001101010111", 10 => "10111110010001111010000101001001", 11 => "00111110011011011101110010110011", 
    12 => "00111100001101001010110101100111", 13 => "00111110100010111100100000001000", 14 => "10111100100111111100011110100110", 15 => "00111101001010000000011001100100", 
    16 => "00111110101110000101011100110101", 17 => "00111110110111100100110011010000", 18 => "00111110011110010111110110110110", 19 => "00111110001001101011111011101101", 
    20 => "00111110110110001101011010010111", 21 => "00111110101010110110111101110001", 22 => "10111110101011000010001010001001", 23 => "00111110000011101000101001101011", 
    24 => "10111101101010100110110110001010", 25 => "00111110111101001011101010111100", 26 => "00111100100110101000101100110001", 27 => "10111100111000111001011101111111", 
    28 => "00111110000100110101100000101000", 29 => "10111110000011001111001010100011", 30 => "00111110010000000001111101011100", 31 => "10111110011001101111010100110010", 
    32 => "10111110010100101111000010001111", 33 => "00111110001011011111011011011000", 34 => "10111110100100000110101001100100", 35 => "00111110111110001000011001101100", 
    36 => "10111110111100010000111010110000", 37 => "00111101001101110011011010001000", 38 => "10111110100100011010100101011110", 39 => "10111100001000100000111110001010", 
    40 => "00111110110011100011011110010110", 41 => "00111110010111100011101110001000", 42 => "10111110101100100011010100110001", 43 => "10111110001110010101011111001010", 
    44 => "00111110100111001011110000011010", 45 => "10111101100000000111001001110110", 46 => "10111110100101000111010100000011", 47 => "10111110100010101001011101000110", 
    48 => "10111100011100110000000101001001", 49 => "10111110101100111100001001111010", 50 => "00111110000000001101000001111100", 51 => "00111110101011001010101111010100", 
    52 => "00111100101110010011110101000011", 53 => "00111110000000111101001100011001", 54 => "00111110000000101101001111010101", 55 => "00111101100110010010110010011100", 
    56 => "10111101111000111000100000001010", 57 => "00111111000011010111101101100011", 58 => "10111110100100101010100000100100", 59 => "00111100110101011011101010010111", 
    60 => "00111101101000110010101101110101", 61 => "10111110110011110000110011010110", 62 => "00111101110000001110000110001111", 63 => "00111100111001110001110101110000", 
    64 => "00111101110100101001111010111011", 65 => "00111110110000100001101010010010", 66 => "00111101011101111100000100100110", 67 => "10111110010101101100100000001000", 
    68 => "10111111000001110000000110010101", 69 => "10111101101100000101000111000111", 70 => "00111100101110011011110110100110", 71 => "00111110010000111000011001001110", 
    72 => "00111101100101000111011001110100", 73 => "10111101111011010010111100101001", 74 => "00111110011010001001100111111000", 75 => "00111110010110001010000001000100", 
    76 => "10111110010100110111000100101011", 77 => "10111101111001110111101101010110", 78 => "00111110010111110001010010001010", 79 => "10111101101011001111111110010100", 
    80 => "10111110110001101010010001110101", 81 => "00111110000100110100011000001010", 82 => "00111101101110110100011101001100", 83 => "10111110110100111110000110000111", 
    84 => "00111110100100110100001000100101", 85 => "00111110010100100001001101101100", 86 => "10111101011111100100101111110011", 87 => "10111110011100000000001000110000", 
    88 => "10111101110011010000101101010100", 89 => "10111110010010100101001110110110", 90 => "10111111000110001101110100100010", 91 => "10111110000100010100100101110010", 
    92 => "00111110011000010000000011101111", 93 => "10111011001011111011110101001110", 94 => "00111101111110111010101000000101", 95 => "10111110110110110011011011110000", 
    96 => "00111110000010111001001000001101", 97 => "10111110001101001110101011010101", 98 => "10111110011000010010111110001010", 99 => "10111110001100001101101111100111", 
    100 => "10111101000111010110101010001010", 101 => "10111101001101010010001011001111", 102 => "00111100111101100001000100001001", 103 => "00111110010000010001111001000110", 
    104 => "10111110110000011110111101001000", 105 => "00111100011011011111100111100011", 106 => "00111101101100100011111010000100", 107 => "10111111000010010110110100111111", 
    108 => "00111110001101010010101111100001", 109 => "00111110101101000111010000110101", 110 => "00111110010100101010100010100111", 111 => "00111110010001001110011110110000", 
    112 => "00111110010011001000100000001001", 113 => "10111110110000100101111101011010", 114 => "10111110000100000100101010110010", 115 => "10111101111000000010010001001100", 
    116 => "00111110100110011110100001010000", 117 => "00111110100110011110010011010101", 118 => "10111110011010010010110001001010", 119 => "10111101101010111000111010011000", 
    120 => "10111110100100000110101011110110", 121 => "00111110000001101111000001010000", 122 => "00111101000010111111000111010110", 123 => "10111110010001101110000100100110", 
    124 => "10111110000000100111110100001111", 125 => "00111110000011101011011101100100", 126 => "00111110100101011111001101100110", 127 => "10111110010000101110110101110010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

