-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_33_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_33_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110000011110011101011111001", 1 => "00111101100111000011100111011101", 2 => "10111100100000000111101011100101", 3 => "10111110100100110001100111100010", 
    4 => "10111101101100010101111110011001", 5 => "00111110001010110100110110001100", 6 => "10111101100000100100111101111111", 7 => "10111110101011100001111100110111", 
    8 => "10111101011001100111001101100100", 9 => "00111110001000100011010010100110", 10 => "10111110100101000111110000010010", 11 => "00111110101000110110000000100001", 
    12 => "00111101101001111010000000011100", 13 => "10111011011101011010111100011001", 14 => "10111110010101111011110001000010", 15 => "10111110111101110110011011110111", 
    16 => "10111110000001000111011001010101", 17 => "00111110100111101100110101111110", 18 => "00111110011011000011001110100110", 19 => "10111110101100101100111010110011", 
    20 => "00111110100110110100101100001101", 21 => "00111110100111010101101001000010", 22 => "00111101001000011101101100110010", 23 => "00111110010001011100011101110011", 
    24 => "10111110110110101100101000110000", 25 => "00111110101000010011101001010001", 26 => "10111110011001010111010010111100", 27 => "00111110011101100110001110111101", 
    28 => "00111110100100110110100000010010", 29 => "10111110001011101101001010100001", 30 => "00111110000101110110010010001101", 31 => "10111110001011111110110001111000", 
    32 => "00111011101001010000001001011000", 33 => "10111110100001110111001010101111", 34 => "00111100011011001001000111101111", 35 => "00111110100000001001010111100110", 
    36 => "10111110101110000011110010001111", 37 => "00111101000010110100010001001000", 38 => "00111101110010000000001001111000", 39 => "10111100001110010110001111001111", 
    40 => "00111110101110000011111100000000", 41 => "00111110100110110111010001000010", 42 => "10111101010110000000111001011100", 43 => "10111100110001011000100000011111", 
    44 => "00111110011010001110111000001100", 45 => "10111110001100111000101100011011", 46 => "10111110011101000011100001110101", 47 => "10111101100111111011110101011110", 
    48 => "10111101101101111000110000100100", 49 => "10111101111110111011011010111001", 50 => "10111110100011110100110010110010", 51 => "00111110101100100101100101110110", 
    52 => "10111100011101110001101011101010", 53 => "10111101101001110111000110000001", 54 => "00111110010111101101100101111111", 55 => "00111110001011110010110000110011", 
    56 => "00111110101111101001011001010011", 57 => "00111111000000010000001011001011", 58 => "10111110000110101111100110110101", 59 => "00111101000010100010010001111100", 
    60 => "10111110011000011011101111110000", 61 => "10111101010011001100100110000101", 62 => "00111110010011011100000001010010", 63 => "00111101110011000100000111000001", 
    64 => "10111110001011110000011110010000", 65 => "10111100101010100101101001100111", 66 => "10111101111101001100000110010000", 67 => "10111110100010011010101100111010", 
    68 => "10111101100100001011010011010010", 69 => "10111110001000111000010011010010", 70 => "00111110100011101101110000010010", 71 => "00111110011110100010010100001111", 
    72 => "00111110100101010001101000101010", 73 => "10111101000000100011011000001110", 74 => "10111110001000101010011000000011", 75 => "00111110011001110101110001001011", 
    76 => "10111101100001110000001011000011", 77 => "10111110010111101100000011011100", 78 => "00111101111000001101101101000101", 79 => "10111110010011110011110010010110", 
    80 => "10111110010101010100011000111011", 81 => "00111110110011010110000101110001", 82 => "10111110000000010011110101111110", 83 => "00111101001101000110010111111110", 
    84 => "00111110000010010110101111000110", 85 => "10111100011101000010001011111101", 86 => "10111110100110001101101110100001", 87 => "00111100111001111101000000001110", 
    88 => "10111110001011101000001000100101", 89 => "10111110100000000111001010101101", 90 => "10111110001000110111110001101011", 91 => "10111101101100001011000101010010", 
    92 => "00111110011011101000100101110110", 93 => "10111110001010010011000001111111", 94 => "10111110001001111111010000101101", 95 => "00111101110111101111101000110101", 
    96 => "10111110100001000011001000100011", 97 => "10111110010001111010101000101101", 98 => "10111110001100111000010101110001", 99 => "00111100101000101010110000100010", 
    100 => "00111100101010010111001110100010", 101 => "10111100110110101100011101001100", 102 => "00111110100000001101101100110011", 103 => "10111101110011011100010011001111", 
    104 => "10111110011010010100110010100111", 105 => "10111110110001100110110100010000", 106 => "00111101000010010111001100100000", 107 => "10111110000001101101011110011101", 
    108 => "00111101100000101101010110011110", 109 => "00111100111001111000000111001111", 110 => "00111101100010001110100001101111", 111 => "00111101010110010100010001011100", 
    112 => "00111101100010010111100001001011", 113 => "10111110010010000101101001000001", 114 => "10111110000111011010110111100111", 115 => "00111110010011101111001001100011", 
    116 => "00111110101101111011110100010101", 117 => "00111110101011100111101101101010", 118 => "10111110011101101100101110011100", 119 => "00111101110100010101110100011001", 
    120 => "10111110100011110101011011110000", 121 => "00111110100100110111100000001110", 122 => "00111110101100001111101010001010", 123 => "00111100101101010010110110010100", 
    124 => "10111101101110101011010110101001", 125 => "00111110000011011100111111101010", 126 => "00111110100011111100110100110111", 127 => "10111110101010010101111011110001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

