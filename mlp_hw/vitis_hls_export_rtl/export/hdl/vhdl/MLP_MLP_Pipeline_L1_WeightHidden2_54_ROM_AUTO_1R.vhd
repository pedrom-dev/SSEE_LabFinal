-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_54_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_54_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110100100001100001100101110", 1 => "00111111000001011000101111110111", 2 => "00111110011010000001101101111110", 3 => "00111101010011000000101101111111", 
    4 => "00111101100100100110010101010101", 5 => "10111101110001001000100010111101", 6 => "00111110011101001001111000101111", 7 => "10111110000110101111011001111101", 
    8 => "00111110011110100010010100110010", 9 => "00111110000110101010011011011100", 10 => "00111110011110111100100010000000", 11 => "10111110000110010111000000011001", 
    12 => "00111110001110110101110000011001", 13 => "10111101011000100110101111111011", 14 => "00111110100110000001111010101100", 15 => "00111110000110100111110100110110", 
    16 => "00111110010110110101100000100101", 17 => "00111101011001110000101111011001", 18 => "10111110001111010011101001010101", 19 => "10111101100100000111011000101110", 
    20 => "00111101010100100100010101101010", 21 => "00111110011011110000111101010110", 22 => "00111110010010101110111100011100", 23 => "10111110101000000111110011000101", 
    24 => "00111110110000001100011000110101", 25 => "10111110000001101000001110100001", 26 => "00111110010101000010111111101000", 27 => "10111110000000000001010000111110", 
    28 => "00111110100101001100000000010000", 29 => "10111110100010111101111011000110", 30 => "10111110001011100010001111010101", 31 => "00111101100110101011101000011111", 
    32 => "10111010110111010010000100000011", 33 => "00111110101001000001011100111100", 34 => "10111100110000100000001100100101", 35 => "00111110100011011110010101110111", 
    36 => "00111110000011101000100011111000", 37 => "10111110110111111011010001100100", 38 => "10111101000100000100011011001101", 39 => "10111110001000111011110011001101", 
    40 => "10111110001000000101100001100100", 41 => "10111101100110101000000011011110", 42 => "10111110011001001100111001000101", 43 => "10111110000110000100011100010111", 
    44 => "00111101111000000010100011110010", 45 => "00111011110001111010000011010011", 46 => "00111011110000000100001001111011", 47 => "00111101110110101100100110110101", 
    48 => "00111110000111111000001101010101", 49 => "10111101100100110101001111111010", 50 => "00111101101001010100000111111010", 51 => "00111110010110100101101011000100", 
    52 => "10111110001100001011110011001100", 53 => "10111110010100100100000001100111", 54 => "00111110000010110010100010101111", 55 => "00111110010010110010011001011001", 
    56 => "10111110100111000010110001000110", 57 => "00111100001000010100100010111011", 58 => "10111110001100100000010100000001", 59 => "10111011111011111010001111111101", 
    60 => "00111101101001111001010001001110", 61 => "10111110100000100100000000110111", 62 => "10111101011101101010101111101100", 63 => "10111110100100110000000100011000", 
    64 => "10111110011101010001100010101111", 65 => "00111101110111101001101111110101", 66 => "10111110100000010100110110100011", 67 => "10111110101011100001111111000101", 
    68 => "10111100110001011111100101000100", 69 => "10111011100110000101011100100100", 70 => "00111110000101010001110100000111", 71 => "10111110010110111011101010001010", 
    72 => "10111110010010110101011100000000", 73 => "00111110000001111010001011111001", 74 => "00111101000111110110011111111000", 75 => "10111110000100101100010000011100", 
    76 => "10111100100000101010100000000110", 77 => "00111110000000010110000011111101", 78 => "10111101101110001111001100110010", 79 => "00111110100010011001010101011110", 
    80 => "10111110010101000001100110110100", 81 => "00111110001001000011001001011101", 82 => "00111110010100111011100100101101", 83 => "10111110000111111001100110100001", 
    84 => "00111100101010110110100010101111", 85 => "00111101001001011001101001011001", 86 => "10111110000111101011100110100110", 87 => "10111100111000011100110001101110", 
    88 => "00111100000101101000011111101100", 89 => "10111101101011000101100101011010", 90 => "10111110100111000111110101100111", 91 => "10111110100011001100110111101111", 
    92 => "00111110010101010010010101011010", 93 => "10111110100111000111110011111010", 94 => "00111110111001010001110100100001", 95 => "10111110100110011011101111011111", 
    96 => "00111101111000100100111100010100", 97 => "10111110101000011100101111100010", 98 => "10111101010010100100000100111111", 99 => "00111101101011000101101101101010", 
    100 => "00111110100000100000101110000001", 101 => "10111110011001101100000010010111", 102 => "10111110000110100101011011000110", 103 => "00111101010000010111000001010011", 
    104 => "10111101101000010110101111101111", 105 => "00111101101111011101011100010110", 106 => "00111101000011001111001111001100", 107 => "10111100010100000100001000101101", 
    108 => "00111110101110010011101000110111", 109 => "00111110011010111010100000010100", 110 => "00111110010101011001111101001111", 111 => "00111101111001110100010011010010", 
    112 => "00111110001000000110101011100100", 113 => "10111110000101011000001110100001", 114 => "00111101000001001000110111011100", 115 => "10111110101000110000011001010000", 
    116 => "00111011110001101010100110000000", 117 => "00111110001110011110010100011100", 118 => "10111100110111111000010000001010", 119 => "00111100110111111110101010011100", 
    120 => "10111110010100001011000110110011", 121 => "10111101111011011000110010000010", 122 => "10111110100001011010110010100110", 123 => "00111110010000010010110110100010", 
    124 => "10111110001011010000111101111101", 125 => "00111101100110101001111100000111", 126 => "00111110001001100101111000000100", 127 => "00111110101000101010010101011100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

