-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_9_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_9_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101110110010101001100000111", 1 => "10111110101000100001000111101001", 2 => "10111101100001001111110000010001", 3 => "10111110001100111000100100011010", 
    4 => "10111110000111100100010100101110", 5 => "00111101001111110111111111111011", 6 => "10111110011001111110000000000000", 7 => "00111110011110000011001110111111", 
    8 => "00111101110010111111000010111000", 9 => "10111100110110011110111111000110", 10 => "10111111001011101111011101001101", 11 => "00111110010100110010100010111100", 
    12 => "00111110000000011001100101011110", 13 => "10111101100101011100111000000011", 14 => "10111110110110100100111000001010", 15 => "00111110100010101100000101111100", 
    16 => "10111110000110101001110011100100", 17 => "10111110100010011000110001100100", 18 => "00111110000011111110000101010010", 19 => "00111110000100000011010100110010", 
    20 => "00111110010001100100100110000001", 21 => "10111100100011010001111110001000", 22 => "10111110010001001001110101111000", 23 => "00111110101110011110000010111100", 
    24 => "10111110101001001000110001010010", 25 => "00111110000000110100111101101111", 26 => "10111110011010111101010100010011", 27 => "00111110101000001010001010100000", 
    28 => "10111110100110100110010010110100", 29 => "00111110110101100000011111011111", 30 => "00111110100011001100001000110010", 31 => "10111101010000101110110100000010", 
    32 => "00111100111010100000011000101001", 33 => "10111110111011000001010001101100", 34 => "00111110100101011001010111100110", 35 => "10111110011000100100101101110100", 
    36 => "10111001110011010011001010110000", 37 => "00111110011101001111111010010001", 38 => "00111110001010010111010010110111", 39 => "00111110110000001101111111001011", 
    40 => "00111110100110010010010011100000", 41 => "10111101111000011111001000001100", 42 => "10111110010111111111001100001101", 43 => "00111101101100010010111100111010", 
    44 => "10111110010011001111011010001111", 45 => "00111100011001100000000100010001", 46 => "10111110000011011000001110100100", 47 => "00111100000100101011111010001001", 
    48 => "10111100001110101101101001111110", 49 => "10111110010100011110011110000100", 50 => "00111110101100010000001111111000", 51 => "10111110110101100000011100001100", 
    52 => "10111110000111001001101100100000", 53 => "10111101110010000110110100101011", 54 => "10111110000101101001110101011000", 55 => "10111110001000010111100010110101", 
    56 => "00111110101101000110100110000001", 57 => "00111101010110000111001111101010", 58 => "10111101101100100110111101011110", 59 => "10111110001110000100000111010110", 
    60 => "00111101101101111010111010001001", 61 => "00111111000001101000110000101110", 62 => "00111110101111010110101001111101", 63 => "00111101110000111110000000011100", 
    64 => "00111110101100111010111100001011", 65 => "10111110011011001001010011011011", 66 => "00111110110001100011010001010011", 67 => "00111111000010011011010000110011", 
    68 => "00111100100011100100001110010101", 69 => "00111110011010111010110001111000", 70 => "10111110011111011010110010010000", 71 => "10111100001000001000011101101010", 
    72 => "00111110001011011010111010000011", 73 => "10111101111101000011000111000010", 74 => "10111101000000111110001011100001", 75 => "10111110101110100100010000111001", 
    76 => "00111101010101110010001000011011", 77 => "10111111000101010110000101110110", 78 => "00111101011010000001111001001111", 79 => "10111110010010000101110101110000", 
    80 => "00111110110000101010110000100100", 81 => "10111100011001100010010011011000", 82 => "10111110100001100011000110001010", 83 => "00111110010101101010000100111110", 
    84 => "10111101001011111001011010001011", 85 => "10111101000000010101100101111001", 86 => "10111101100100110010010101101001", 87 => "10111100100011100111111101010100", 
    88 => "00111110000010011101101110100000", 89 => "00111101111110101100111100000010", 90 => "00111101101110111111101100110010", 91 => "00111110100001100001100110000001", 
    92 => "10111110011011110010000001101110", 93 => "00111110011101001010000100001000", 94 => "10111111001110010000011101100000", 95 => "00111110101010001010001000110100", 
    96 => "10111110001101010110111001111101", 97 => "00111101010010101001111101110111", 98 => "00111110101011010011011011110000", 99 => "00111101110001100001010011110100", 
    100 => "10111110100011101001011010010001", 101 => "00111101101000101111010111001101", 102 => "00111101011011111010100000000100", 103 => "10111110001101001001010001001001", 
    104 => "00111110011010010111010010001011", 105 => "00111110001001000011011011011010", 106 => "00111110100010000000101011001100", 107 => "10111101101101001010110010001100", 
    108 => "00111101000100010110111001111010", 109 => "10111110100111011110111000000010", 110 => "10111101101001101011000110111000", 111 => "00111101011000010000100100000010", 
    112 => "10111110100100011010011101000100", 113 => "00111101100101111010011111010111", 114 => "00111110100010110101110001001011", 115 => "00111110100000011001111110110100", 
    116 => "10111101111001000110000111110110", 117 => "00111100010111011101001001001110", 118 => "00111101110111101010101001000010", 119 => "00111110011001110100111001111111", 
    120 => "00111100111100111001011001010000", 121 => "10111100011110010100101001011001", 122 => "00111110011101111001110011101010", 123 => "10111110101000010111100111101111", 
    124 => "00111110010100110111101010000011", 125 => "00111110000110111010101011000010", 126 => "10111110100000110011101101001101", 127 => "10111110111100111110101000010101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

