-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_20_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_20_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110100111111010100110100101", 1 => "10111101111010100100110000010100", 2 => "10111101010010001111100100111110", 3 => "00111110010111010011101000100011", 
    4 => "00111110000000101011100100000111", 5 => "00111100100110100110000011110101", 6 => "10111100010001010101100100000101", 7 => "00111110011101111000000110000101", 
    8 => "10111100110100100000010111001100", 9 => "10111101001010100010101100010111", 10 => "10111101001000011001010000111101", 11 => "00111110000101001000111100001010", 
    12 => "10111101010010111111110110011010", 13 => "10111110000101100110100001000100", 14 => "00111101010110110010000010010010", 15 => "00111110100001001100010101001000", 
    16 => "10111101111000000011110000101001", 17 => "10111110011001111010101010110010", 18 => "10111101111110011000010100111110", 19 => "00111101101110111001111101000001", 
    20 => "10111110010000011010101110010110", 21 => "10111110011011011110110111001100", 22 => "10111110110000110011101110010001", 23 => "10111101100100110111110100101000", 
    24 => "00111101110101000000001010100101", 25 => "10111101001001100000011010001101", 26 => "00111110011011000101111010000000", 27 => "10111101101110010000101001110101", 
    28 => "10111110110100000111100100011111", 29 => "00111110100111001000001010010011", 30 => "10111100101011101011100001111010", 31 => "10111101100010101110001010101110", 
    32 => "10111110011001111101000010101001", 33 => "00111110001011011110010101001100", 34 => "10111101111100100101000110000000", 35 => "00111101101101010101011111001110", 
    36 => "00111101111101000111110010100010", 37 => "00111101110110000010101010100100", 38 => "10111110000111010111000101111111", 39 => "00111110010101111000100000110001", 
    40 => "00111101001100100111110010000100", 41 => "00111011010001001100100000011100", 42 => "10111101101111111100101000111101", 43 => "00111110011000111000111001011110", 
    44 => "10111110000011111000010011100100", 45 => "00111110001111000101011101101001", 46 => "10111110010011111000111100111100", 47 => "10111100001100110000101100100101", 
    48 => "00111101101010011111000111100010", 49 => "10111110010011100100000001111100", 50 => "00111110010111111000110001010110", 51 => "10111110011001110111010100000100", 
    52 => "10111101110111111010011010001010", 53 => "00111100000011001011100100100001", 54 => "00111101001110111111100110001000", 55 => "10111110100010100101000101001100", 
    56 => "10111110100001001011100011001101", 57 => "10111101110100100010101010010011", 58 => "00111100010000101111101001010001", 59 => "10111101011001111000100100111100", 
    60 => "00111101110011000110011001001001", 61 => "00111101100110100000000000101001", 62 => "10111101101011110001111101010101", 63 => "00111101100011101101011100110111", 
    64 => "00111110100000001110100111001101", 65 => "00111110010001110000010000000011", 66 => "00111110100000110011101010000101", 67 => "00111101011001000101001111110101", 
    68 => "10111110000110010110010100000010", 69 => "00111110001001110101000110000110", 70 => "10111110001001001110011101100001", 71 => "00111101100101011101110101110010", 
    72 => "10111101111101000100010111000000", 73 => "10111110001110100011111000000100", 74 => "00111100011001000011011011001100", 75 => "10111110100000110100111000001100", 
    76 => "10111100010000110000111011011110", 77 => "10111101111001001001011010000001", 78 => "00111101101100110000100101011011", 79 => "10111110010001001001001000010010", 
    80 => "00111011111101101000101101101000", 81 => "10111110101010011000111000011000", 82 => "10111100110000100011011111111110", 83 => "10111110001010010001101100110011", 
    84 => "10111101101000100001011011100000", 85 => "00111101100101111110001101010101", 86 => "00111110001110100010001111000111", 87 => "00111100111100011101100101110111", 
    88 => "00111101111110000111111101101110", 89 => "00111110100010011010000111101001", 90 => "00111100111011101011111100000101", 91 => "00111101011000010010110001100011", 
    92 => "00111101000001010010100010101100", 93 => "00111110010110010011011011010001", 94 => "10111100110111000010101011111001", 95 => "10111101110001100100010000001000", 
    96 => "00111110000110101111110010000110", 97 => "10111101101111000000100101011101", 98 => "00111110100111010011011101011100", 99 => "10111101010100010001111101111000", 
    100 => "00111100111100100010111001100001", 101 => "00111100000110110110010000111111", 102 => "10111110100001111010100100001010", 103 => "00111110011100011111101001100010", 
    104 => "00111101101110011011111100101010", 105 => "00111110100010001100011011011111", 106 => "00111001000110011100001001101110", 107 => "10111110000111100111001111110101", 
    108 => "10111100100010110011101101110001", 109 => "00111100100011101011110001010001", 110 => "00111101100100111011010011011110", 111 => "10111110001001011100010101100101", 
    112 => "00111100100100100011000110101011", 113 => "00111110010001011011110111010010", 114 => "00111110001110110010110001000001", 115 => "10111101110001101110010000110001", 
    116 => "10111011110000001101111100010100", 117 => "10111101111000001100101100110101", 118 => "10111101100000001000000101110100", 119 => "10111101101011100100010011010000", 
    120 => "00111101110011010111101000010110", 121 => "00111110010100100000011100110000", 122 => "10111110001101111110100011111110", 123 => "10111110101000100011111011001101", 
    124 => "10111101011111011010101010011011", 125 => "00111101000011100000011111100011", 126 => "10111101110111110011010100011011", 127 => "00111101010101101111111110110100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

