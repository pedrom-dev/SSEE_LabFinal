-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_43_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_43_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111110111011001101011011100101", 1 => "10111101110100101110100101000111", 2 => "00111110011011011001011100111110", 3 => "00111110100100000110011010110110", 
    4 => "10111110110001110001101110001101", 5 => "00111101010111010101011001100000", 6 => "10111101100010111101101101000001", 7 => "00111110001110110111011011111100", 
    8 => "10111110001100111110001111010000", 9 => "10111111000001110110000000001111", 10 => "10111100100100010010100111100100", 11 => "00111110000101010011110111001000", 
    12 => "10111101111110110010101110110011", 13 => "00111011100100111100000111010100", 14 => "10111110010010001010011110101111", 15 => "00111111001111101010001111101001", 
    16 => "00111101011010011110100001100100", 17 => "00111100101010110001100101011101", 18 => "10111101011100101110101110010101", 19 => "00111101000100010101101100101010", 
    20 => "10111101100110010100001000010111", 21 => "00111110001001011000110010111110", 22 => "00111101100010010001110011001000", 23 => "00111101000111010101111100011110", 
    24 => "00111110000100011000110101010000", 25 => "10111110000111010101111001010010", 26 => "10111100110100100100111011110010", 27 => "10111110010010111110010010000010", 
    28 => "00111100100010010011000010000110", 29 => "00111101101110011100100100001000", 30 => "10111110000111000000010100001000", 31 => "00111110000011010000110100111011", 
    32 => "10111110010010000100000011001110", 33 => "00111110100101000000110100000101", 34 => "10111110000011010001110000010101", 35 => "10111110001000101001100000100011", 
    36 => "00111110001110010010100111101011", 37 => "10111101001000111011011111010010", 38 => "10111110110100110111000000011011", 39 => "10111110000010100100100001111101", 
    40 => "10111101111010000101010100111010", 41 => "00111110001000111100101111011101", 42 => "00111110001001101010101010000100", 43 => "00111110011101100110100010101001", 
    44 => "10111101100101100110011101111010", 45 => "00111110100101101101010010011010", 46 => "00111110101000101011011110000111", 47 => "00111110000110101011001011001101", 
    48 => "00111101101111000101001010010000", 49 => "00111101011001001010011010111001", 50 => "00111111000001000100010010110111", 51 => "00111101010101011001111011100001", 
    52 => "10111110100001100001010111001001", 53 => "10111101100111100001011000110110", 54 => "10111110111101000011101010111101", 55 => "10111110010010111011011111111010", 
    56 => "00111110011001001110110101000000", 57 => "00111011010111100010001000001010", 58 => "00111110010010110001011001011000", 59 => "00111101110100110001011111110111", 
    60 => "00111110110010111110010110110000", 61 => "10111110101000010111011010010001", 62 => "10111101110000101001010001001010", 63 => "00111110100000010001010001011101", 
    64 => "00111101110000011110011010111101", 65 => "10111110000000100010001010000001", 66 => "00111110111100001110101110001101", 67 => "00111100000101110000010011011111", 
    68 => "00111110000010100101110010110100", 69 => "10111101110111100111011100000000", 70 => "10111101110000100110111111000010", 71 => "00111110111100001000001011000011", 
    72 => "10111110000111110010101110111000", 73 => "10111100001010110110000101100010", 74 => "00111101111001011010111000011001", 75 => "00111100101001010110011101111110", 
    76 => "10111110010010101110001111010100", 77 => "00111100101011000100110101000110", 78 => "00111101111011110110101111110001", 79 => "10111110101101100110011001100010", 
    80 => "10111101100111110001000101111011", 81 => "10111110001100000110100000010010", 82 => "00111101100101111001100111111101", 83 => "00111110100011000110000100101111", 
    84 => "00111110011000111111010111101100", 85 => "00111110010100111111101010110111", 86 => "10111110000100010011110010000000", 87 => "00111110010110100000010100010110", 
    88 => "10111101111010100011110100010100", 89 => "00111110010010110111101000110110", 90 => "00111110000010110100011001101100", 91 => "00111110011011010011010011101111", 
    92 => "10111110111111100110100011011101", 93 => "00111101101001101110110010111100", 94 => "10111110011100110000000100110111", 95 => "00111110100100000001110011000010", 
    96 => "00111110100000001110011101010011", 97 => "00111101111101010110011100111100", 98 => "00111101100111110101000100001001", 99 => "00111101110111010010110110011001", 
    100 => "00111100010111100110110101110100", 101 => "00111110100101100110110100100000", 102 => "00111011110101100011010111101101", 103 => "00111110001010110000110000101000", 
    104 => "00111110011001000000010111110101", 105 => "00111101101001100000011100011100", 106 => "10111101111110010011010110110001", 107 => "00111110000001111101101010011000", 
    108 => "10111110011100000010110010011001", 109 => "10111101110111101010010000110101", 110 => "10111101100011111010001100100111", 111 => "10111110010100011101001011110110", 
    112 => "00111101110111011000001100010011", 113 => "00111110000011010000000010101110", 114 => "00111100001001100000001111101011", 115 => "00111110000111110100111111001111", 
    116 => "10111110000100110000101101001100", 117 => "10111110110001101100101000111010", 118 => "00111110010111010010110100000000", 119 => "10111110110000101010101010100100", 
    120 => "10111110001010111010100011000011", 121 => "00111110110101101000111110111110", 122 => "10111101110110110110110010011101", 123 => "10111101110000110001011010110100", 
    124 => "00111100101001011101000010011010", 125 => "00111101010111101010100010101010", 126 => "00111101110010011101100011110111", 127 => "00111100101100101110111000110100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

