-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_17_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_17_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110100000000110001001101111", 1 => "10111110001110010001101110000000", 2 => "10111110000010001011001100010010", 3 => "00111101011010100000010001000110", 
    4 => "10111110000011100010001101010110", 5 => "10111100110001100111111011001010", 6 => "10111110001001111001111001011001", 7 => "10111101000111111000010111101101", 
    8 => "00111100111010000011001000001000", 9 => "10111011011000111011001110011001", 10 => "00111110101101100000111100010111", 11 => "10111111001100001101010000000011", 
    12 => "10111110011000100011001001111011", 13 => "00111110110001000001001000000011", 14 => "10111100110011010011100010101101", 15 => "10111111000001101011000101000001", 
    16 => "10111100110000110100101100001110", 17 => "00111110001100011111001110011011", 18 => "00111110101100011100001000010101", 19 => "00111101110111010011111101011101", 
    20 => "00111101101110001011001000001110", 21 => "00111100110110110111010010000101", 22 => "00111110100101100001011000101001", 23 => "10111100110011100010011111010110", 
    24 => "00111101011011100100100101110111", 25 => "00111100111100010101010100000010", 26 => "10111100101111110101001101000111", 27 => "10111110000011010011100101110011", 
    28 => "00111110111011100110001101101000", 29 => "10111110001100110100011110010101", 30 => "10111100110010001110110100000100", 31 => "00111101110111010110101111110000", 
    32 => "00111110001110010101011010011011", 33 => "10111110100100101110111110100000", 34 => "00111100100011111000011110101101", 35 => "10111111000001100010101101110010", 
    36 => "10111101111111001100011010111001", 37 => "00111011111011111001001111110100", 38 => "10111101110011101111000100001011", 39 => "10111110100011000111110010010101", 
    40 => "10111110101001011110010111000111", 41 => "10111110100001001111011110011110", 42 => "10111100101000110001000101001101", 43 => "10111110100011110000100000110101", 
    44 => "00111110100011000000111001111110", 45 => "10111111000000011011010011110000", 46 => "00111110110001111001101111111010", 47 => "10111110100110100100000110101111", 
    48 => "10111110111101111010011111111010", 49 => "00111110001011111010110000110101", 50 => "10111110001110001110010000011011", 51 => "00111110100011110111000101000110", 
    52 => "00111101110110010011111100101001", 53 => "00111110100001000110111001010111", 54 => "10111110100000010101011001101101", 55 => "00111101110100110001001011100001", 
    56 => "00111110101111111011100100000111", 57 => "00111110001011110001000100111000", 58 => "10111100010010100111000011110010", 59 => "00111101101110010110101101111001", 
    60 => "10111101010000111100110001111011", 61 => "00111101001110111011011001011010", 62 => "00111110110001010110111111110110", 63 => "10111110100110001110001011101011", 
    64 => "10111110100110110011100101101010", 65 => "10111110111011011000001000000001", 66 => "10111011010000011010111110010111", 67 => "00111110100001000101100101011011", 
    68 => "00111110110100011001010010001001", 69 => "10111101111100010010011000111011", 70 => "00111101111101001101000110011010", 71 => "10111100101110000100001010110111", 
    72 => "00111110101110001010110011110110", 73 => "00111110111101100010111100110001", 74 => "10111101110110101010011110011100", 75 => "10111100011100111101100100100000", 
    76 => "00111101011010100111110100111111", 77 => "00111110010100111001110011011000", 78 => "10111110100101101011010011101010", 79 => "00111110110001111111000010011000", 
    80 => "00111110110100111000010100001001", 81 => "00111110010110101011110000000101", 82 => "10111110011110110110011101110011", 83 => "10111110000000001111101011000111", 
    84 => "10111110100001001101001100010001", 85 => "10111101111010011111111001101000", 86 => "00111101000011011101001110100000", 87 => "10111110010001111111000001011010", 
    88 => "00111110101110101011010111001110", 89 => "10111110111110011000111000100101", 90 => "10111110010011110100000111011101", 91 => "00111101001100100010000111010011", 
    92 => "10111101110100010111010110110101", 93 => "10111101111110100011100010101100", 94 => "00111101100000100100100101010111", 95 => "00111110100011001110001010101000", 
    96 => "10111110011110011110101010111010", 97 => "00111110111110111011010001100100", 98 => "10111110010111101101010101111110", 99 => "10111110110011110100001100001010", 
    100 => "10111110100001101101100010010010", 101 => "10111110100000111001001100111100", 102 => "00111110110001100010000000001001", 103 => "10111111000101000011011010000011", 
    104 => "00111101111100111001100110100100", 105 => "00111101111100010010101010110100", 106 => "00111110000111100011100110111000", 107 => "00111110110100101101000111001110", 
    108 => "00111101101101100011101100011100", 109 => "10111110000000110011011110100110", 110 => "10111110110101010100001000101001", 111 => "00111101110000010100000100101011", 
    112 => "10111110111111100011010100100101", 113 => "10111101110110011011000001011000", 114 => "10111100111010101110111010101100", 115 => "10111101111111111110101001110110", 
    116 => "10111110001100110010000101011001", 117 => "00111101011011110001001100100110", 118 => "00111111001100000100111011110101", 119 => "00111111000100111010101011111000", 
    120 => "00111110010111010110000011001001", 121 => "10111110101001010101010011001000", 122 => "00111110000000000000100000110101", 123 => "00111110110101100100000011101101", 
    124 => "00111110111111100111110000111011", 125 => "10111110011011011110110010110010", 126 => "00111100111111010001110101001101", 127 => "00111101110110100000111001101111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

