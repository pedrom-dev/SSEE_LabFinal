-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_52_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_52_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111100100011011110111100010001", 1 => "10111101100010000000010010000010", 2 => "00111101010001100010011001001010", 3 => "10111101101111100001101101000000", 
    4 => "00111101100101100110111111000000", 5 => "00111101111110001011111000000001", 6 => "10111101101111101000011111110111", 7 => "10111110001100101111000101011111", 
    8 => "10111110001010011101111011000010", 9 => "10111110011001011100101000101000", 10 => "00111110100110010100111011111101", 11 => "00111101100111100000011010101001", 
    12 => "10111110011110101100010111010000", 13 => "00111100110010011100011001000010", 14 => "10111100110010000001001110001010", 15 => "10111101101001110110100010010000", 
    16 => "00111101110011101010111101101000", 17 => "00111110100101000110110101010011", 18 => "00111101101001001001001111111001", 19 => "10111110100001011100100100101111", 
    20 => "10111101101101010111000000000011", 21 => "00111110010001000110011001010101", 22 => "00111110000110001110011101111000", 23 => "00111101001110101100101111001011", 
    24 => "10111101101100000011111011011110", 25 => "10111101111111000010111000111011", 26 => "10111100100001101010100000000000", 27 => "10111110100010110001000011110011", 
    28 => "00111110100110110110011110110011", 29 => "10111110011001101011011001000010", 30 => "10111110001100101011011101111101", 31 => "00111101001001000000001111001011", 
    32 => "10111101111000101110110100110101", 33 => "00111110011111100011100011110001", 34 => "10111101100011001011101111011111", 35 => "10111101101100001010101000001010", 
    36 => "00111101000011100100101011110000", 37 => "00111101111000001101111010000110", 38 => "10111110010001011100001000111010", 39 => "10111110100100111010110000010100", 
    40 => "10111110000110111110001100100100", 41 => "00111110000001100010100000010101", 42 => "00111110011101101011101010001001", 43 => "00111110000000111100011110000101", 
    44 => "00111110000110100000001010100001", 45 => "00111100001010101011010011011111", 46 => "00111101010011100110011101010100", 47 => "10111101100111001110100010011000", 
    48 => "10111101011011100111101001010110", 49 => "00111101110000010110110000000010", 50 => "10111110000011110101111011000011", 51 => "00111110011101001100110010111101", 
    52 => "00111101011111100110010000110100", 53 => "00111110010000001111000000100110", 54 => "00111101000011101000010110100111", 55 => "10111100101110011011100100100100", 
    56 => "00111101111101110010011100001010", 57 => "00111110000101000001001011001010", 58 => "00111110100001010010110011001010", 59 => "00111110100000101110110110101011", 
    60 => "10111110011110000110001111001100", 61 => "10111110110001101100100010111110", 62 => "10111101110000011100101011010110", 63 => "00111110000011110110100110011100", 
    64 => "10111110000011001001001001010010", 65 => "00111101100001100111110001001111", 66 => "00111011110100111100111110000100", 67 => "10111110100000010111001010010100", 
    68 => "00111101100001111011011011011001", 69 => "10111110100010111100011010010101", 70 => "00111110100110011011010110000100", 71 => "00111110101000100101011100100111", 
    72 => "00111101010100110010011101001111", 73 => "00111101111011111001111111000000", 74 => "00111101110010111001111001111110", 75 => "00111110110011100001101111001010", 
    76 => "00111101001110011010011010111000", 77 => "00111110010111101001100011101100", 78 => "00111110000000111001100010100000", 79 => "10111110001010110110111110111011", 
    80 => "10111110001010111110100100001100", 81 => "00111101011011001010110000100000", 82 => "00111110000011100111000000001101", 83 => "10111100101100001001000101100011", 
    84 => "00111101111001001001010101001101", 85 => "00111101011101011101010001001101", 86 => "10111101110011001001011010111110", 87 => "00111101110100111101000010100011", 
    88 => "10111101011110111010111001010010", 89 => "10111101101111111000110010001101", 90 => "10111101011110110101111011011001", 91 => "10111110000010001111001110011100", 
    92 => "00111101110111111111111010001000", 93 => "10111110001010100110001001001010", 94 => "00111110000000001111100110110000", 95 => "10111101001010011100011010100110", 
    96 => "00111110001001100111001110001111", 97 => "00111101011101001110010000001100", 98 => "10111110011111000000010001110101", 99 => "10111101011101000010001001110001", 
    100 => "00111101011010010011101001111111", 101 => "00111101001001001110000100000011", 102 => "00111101100010011010100010010110", 103 => "10111101110010011111010111100101", 
    104 => "10111011111111011001100110001001", 105 => "10111110100011110100011100000010", 106 => "10111110101000110111101101101000", 107 => "00111100000011101110101000001000", 
    108 => "00111101000010110001000011100100", 109 => "00111101101010000101111011110011", 110 => "10111110000110100011101011010001", 111 => "10111100001010101000011000011011", 
    112 => "00111101011010010001111000001001", 113 => "00111101100101100110001000101101", 114 => "10111110100101000010001100111000", 115 => "00111101011100000100111100010101", 
    116 => "00111110011011100100110101111110", 117 => "00111101110100101111111110100011", 118 => "10111100110101001110100110110010", 119 => "10111110000000100100110011000110", 
    120 => "00111100010001111111110100100101", 121 => "00111110001011011001000111011010", 122 => "00111101110010000000110001011110", 123 => "10111011100111000001010000011101", 
    124 => "00111110010011111001110111010100", 125 => "10111110100011001001101110110001", 126 => "00111110010101010110101000011000", 127 => "00111110000001011100001010001101");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

