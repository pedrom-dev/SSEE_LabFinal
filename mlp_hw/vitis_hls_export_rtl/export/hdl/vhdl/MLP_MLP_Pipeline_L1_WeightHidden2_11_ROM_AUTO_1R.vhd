-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_11_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_11_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00111101111100001010100010011111", 1 => "00111110000111010001101100101101", 2 => "10111110000111010000101001000000", 3 => "00111110110010110000000010110101", 
    4 => "10111110010011000011010001001000", 5 => "00111101110110101011010001101000", 6 => "10111011100001110101010011001001", 7 => "10111110000000110110110000110011", 
    8 => "00111110100101001101111001101100", 9 => "10111110010011001000000101011010", 10 => "10111110100110010000010001100111", 11 => "10111101111000101111000000010101", 
    12 => "10111110010011110111000100101101", 13 => "00111101101100100111101000001110", 14 => "10111110110010111001101011001110", 15 => "00111111000101001000100110110011", 
    16 => "00111110011011010100110111011110", 17 => "00111110100100111111111110010000", 18 => "00111110001000111100011100001111", 19 => "00111110110100000000000010101100", 
    20 => "00111101111100101101110001001001", 21 => "10111110101011101010101111010100", 22 => "10111111001010110111101001111001", 23 => "00111110001111001111010100011011", 
    24 => "10111110001100110010011011111111", 25 => "00111100111110110011101011101010", 26 => "00111110001001010100111110000111", 27 => "00111110100110111010111001111011", 
    28 => "10111110001001010010101110100011", 29 => "00111101100101111001010110110100", 30 => "10111101110100000100000001111011", 31 => "10111110010100111111000001000010", 
    32 => "10111110110010100100010000000111", 33 => "10111110110001001110100011101101", 34 => "10111101111111010101101100011110", 35 => "10111100101000000011001011010001", 
    36 => "00111110000110101110000111101001", 37 => "10111101110011010011110111011100", 38 => "10111110000101100010110000111011", 39 => "10111110101001011011000111000101", 
    40 => "00111110001001011000000110101110", 41 => "00111110000000100100001110011000", 42 => "10111101000110001011111110001010", 43 => "00111110101001000001110011111001", 
    44 => "10111110001101010010010011001000", 45 => "10111101011110100101100111110110", 46 => "10111100000101111101101110111111", 47 => "10111110100011000001111101000101", 
    48 => "10111101100100000111011011101100", 49 => "10111110100100111010111100001011", 50 => "00111111000001010000001010110100", 51 => "00111110000001000111000010010110", 
    52 => "10111110110011100101011111111000", 53 => "00111101101101110110111110101010", 54 => "10111110110110011100011000001011", 55 => "10111110001110011110011010100000", 
    56 => "00111101010000001000010011001101", 57 => "10111110000011100011011111101100", 58 => "10111111000010111101110100000111", 59 => "00111101101110000000001011111101", 
    60 => "00111110110101010000010100100100", 61 => "10111110100110100100000110001101", 62 => "00111110101010111100100111101111", 63 => "00111101101100100001010101110011", 
    64 => "10111101100010011100110010111111", 65 => "10111101010000101111110110011011", 66 => "00111111000110011101011100000001", 67 => "00111101101000011010001000000000", 
    68 => "10111110100001010101111000011111", 69 => "10111110001100011010010100001000", 70 => "10111110101011110110111001010011", 71 => "00111100110111000001000111100100", 
    72 => "00111110001101010101100010000010", 73 => "00111110100101011001001000100010", 74 => "00111101001101001100000010101111", 75 => "10111111000010101010011011000100", 
    76 => "10111101101110100111100100011011", 77 => "10111110001001000011000101100011", 78 => "00111111000101010000001101011111", 79 => "10111110001011001110101001010110", 
    80 => "10111110000000011011101011010010", 81 => "10111110110100101101010010101001", 82 => "00111110011110100011100111000001", 83 => "00111101000010110100011010101011", 
    84 => "00111110011110100000001101111111", 85 => "00111110101101110011001011001101", 86 => "00111101101010111011101000110000", 87 => "00111101101000000110010111110011", 
    88 => "10111110001001001010100000000111", 89 => "00111110011111100111110111011110", 90 => "00111101101110110111110010101100", 91 => "10111101111100100111011000000000", 
    92 => "10111110110000100111010000011110", 93 => "00111110010011001000011110101000", 94 => "10111110011010100011100011110010", 95 => "00111110111001000011001011110111", 
    96 => "10111101111000111110000110010111", 97 => "00111110101010100010000011110110", 98 => "00111101000111110001011000101011", 99 => "00111110001111011010100001111001", 
    100 => "10111110111011111110101000100000", 101 => "00111101100100101110010101100111", 102 => "10111110110001000101111010011101", 103 => "00111110101101100100001111001110", 
    104 => "00111111000001101100111010010111", 105 => "10111101000011100000001001001100", 106 => "10111101111100101011110100111001", 107 => "10111110111010110111011011100000", 
    108 => "10111110000101010110011001111010", 109 => "10111110010111100011000001111001", 110 => "10111110100000001011101110011100", 111 => "10111110011110010010100110000101", 
    112 => "10111100111101111110101100101110", 113 => "00111110100101010111100001111001", 114 => "10111110111010000100000111110000", 115 => "00111101011101001010110001000111", 
    116 => "00111010010101000010101011011100", 117 => "10111110101001100011110101101100", 118 => "00111110010101000101010000101111", 119 => "00111101111000101010011101001010", 
    120 => "00111101111111000000110010010010", 121 => "00111111000000110000100101101110", 122 => "00111110001000110011010001111010", 123 => "10111110010001100101000011000011", 
    124 => "10111101000110111001100000000100", 125 => "00111101100000111000111000110110", 126 => "00111110001111100001110101101001", 127 => "10111101110011111000011001111010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

