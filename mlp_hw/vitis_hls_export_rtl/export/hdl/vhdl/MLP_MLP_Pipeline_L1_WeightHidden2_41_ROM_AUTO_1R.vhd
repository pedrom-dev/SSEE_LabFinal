-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity MLP_MLP_Pipeline_L1_WeightHidden2_41_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of MLP_MLP_Pipeline_L1_WeightHidden2_41_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111101011000011010100101101011", 1 => "10111101000000100111100011110001", 2 => "00111101001010001101100001000011", 3 => "00111110101110110110001101001110", 
    4 => "00111110000001100010110001101111", 5 => "10111110000001110111010001011010", 6 => "10111101011000000011110100011111", 7 => "00111101101111101101000110001011", 
    8 => "00111101011001010101110101001111", 9 => "10111100111000100111110101000011", 10 => "00111110111001111110100100011110", 11 => "10111110101110111111100101011000", 
    12 => "10111101010110001110001000010001", 13 => "00111100101101000111100001111000", 14 => "00111101100111000111001011101100", 15 => "10111101000111100010101011001000", 
    16 => "00111101101000110000110010010010", 17 => "00111110001101100111001101001100", 18 => "10111110011100101011000110011000", 19 => "00111101100001101111111011001111", 
    20 => "10111110100110101111011011010100", 21 => "10111110100001001101011111001010", 22 => "10111110001101011111100000011111", 23 => "10111110010111110010011001100100", 
    24 => "00111110010110000010011100000110", 25 => "10111110101101100111001010111100", 26 => "00111110001001000011110110010011", 27 => "10111110001100011001111001010011", 
    28 => "10111011101011010011011111110010", 29 => "10111101100110000100010111000100", 30 => "10111110100000101101011000100100", 31 => "10111100100110000000000111000100", 
    32 => "10111100110000001110101001001011", 33 => "00111101100100101101111000111011", 34 => "10111101111001111100110101111000", 35 => "10111011111000100111010101101000", 
    36 => "00111110100100100111001111100010", 37 => "10111101101011001110011000101000", 38 => "10111110010111010101110111001101", 39 => "10111110110001001000100011100111", 
    40 => "10111110110001001110110010000010", 41 => "00111101000110100010111011011011", 42 => "00111101000000010000101111111111", 43 => "00111101110001101110000001111111", 
    44 => "00111101001100101111000001101011", 45 => "10111100110110000111110001010011", 46 => "00111110101011010001010011101011", 47 => "10111110000110000010001101001110", 
    48 => "10111110000000000011001111100001", 49 => "00111101101101010110010000010111", 50 => "00111110000010011100011010100111", 51 => "00111110010000001001110010011110", 
    52 => "00111101100011100101110011111100", 53 => "10111011100010100000100100000011", 54 => "10111101110111000110100110010011", 55 => "10111100110000011010001000110001", 
    56 => "10111110101001010111111101001111", 57 => "10111110101001100111101100011001", 58 => "00111101011110110100111000110010", 59 => "00111100111011111001111110110110", 
    60 => "00111110010100101111000111101010", 61 => "10111110010111101011101101000111", 62 => "10111100010001011010110000011100", 63 => "10111110011010011001001111010110", 
    64 => "10111110011001001011111100111111", 65 => "10111101010001101110101000100010", 66 => "10111101011011001010010101110000", 67 => "10111101011111001111000011010010", 
    68 => "10111011010001010111111001001111", 69 => "10111101110101110011110011101100", 70 => "10111101000110100001001110011010", 71 => "10111101111010010111100000110100", 
    72 => "10111101110111000100010000000101", 73 => "00111110100101010100001100000010", 74 => "00111110000111100101100000110111", 75 => "10111100011011001100110001110010", 
    76 => "00111110000011101000000101110010", 77 => "00111110111001010011111011000110", 78 => "00111101101101011110100101100001", 79 => "00111110100001011110010111101110", 
    80 => "10111011101011001111001001011111", 81 => "10111110100100001111100011101101", 82 => "00111101101000110101001111000010", 83 => "10111101101011011011000110011101", 
    84 => "00111101011011011100001101010101", 85 => "10111010110111100011100110000111", 86 => "00111101101011011000001001011100", 87 => "10111101101000001111111110010110", 
    88 => "00111101111100010110110001011100", 89 => "00111101111000111100011101101000", 90 => "10111100101100000101111100111001", 91 => "00111011100100011110000111010101", 
    92 => "10111101110000111111100000101010", 93 => "10111110000101111110001010110101", 94 => "00111110101010111101101101010010", 95 => "10111100000100111110111111110111", 
    96 => "00111110010001011011101001111000", 97 => "00111101101101010010111110001100", 98 => "10111101011111000111011011111111", 99 => "10111100110001101100000001010011", 
    100 => "10111101000011110110011110001111", 101 => "10111101101000111010010011011111", 102 => "10111101010010111001111101011011", 103 => "00111101100101110101111100110001", 
    104 => "00111110100110101110010110010000", 105 => "00111101111010100010001000100100", 106 => "10111110001000110001110010010110", 107 => "00111100000010111010000010010010", 
    108 => "10111100101110010011000111100000", 109 => "00111101101101100001011001111000", 110 => "10111101101111110110001010000100", 111 => "10111110010110010100111000010100", 
    112 => "00111101001100110100010101100010", 113 => "00111101111001001111101010010010", 114 => "10111101110000110110000110001011", 115 => "10111110010111000100111011110100", 
    116 => "10111110010010100101000111100100", 117 => "10111110000100100010110110000010", 118 => "00111110000110000110000101110001", 119 => "10111100101111101010101101010001", 
    120 => "00111110011001101101111100010001", 121 => "00111100001100100000110011000011", 122 => "10111101110010001011111110110111", 123 => "00111110000010101100110111010001", 
    124 => "00111110000100111101001000001011", 125 => "10111110000010101000001101011110", 126 => "00111110000000011000101100011000", 127 => "00111110010110010111010001110100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

